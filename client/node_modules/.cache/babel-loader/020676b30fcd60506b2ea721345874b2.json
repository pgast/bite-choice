{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext, useEffect, useMemo, useState } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Calendar as CalendarIcon } from 'grommet-icons/icons/Calendar';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Calendar } from '../Calendar';\nimport { Drop } from '../Drop';\nimport { DropButton } from '../DropButton';\nimport { FormContext } from '../Form';\nimport { Keyboard } from '../Keyboard';\nimport { MaskedInput } from '../MaskedInput';\nimport { useForwardedRef } from '../../utils';\nimport { formatToSchema, valueToText, textToValue } from './utils';\nvar DateInput = /*#__PURE__*/forwardRef(function (_ref, refArg) {\n  var buttonProps = _ref.buttonProps,\n      calendarProps = _ref.calendarProps,\n      defaultValue = _ref.defaultValue,\n      disabled = _ref.disabled,\n      dropProps = _ref.dropProps,\n      format = _ref.format,\n      id = _ref.id,\n      _ref$inline = _ref.inline,\n      inline = _ref$inline === void 0 ? false : _ref$inline,\n      inputProps = _ref.inputProps,\n      name = _ref.name,\n      _onChange = _ref.onChange,\n      _onFocus = _ref.onFocus,\n      valueArg = _ref.value,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"buttonProps\", \"calendarProps\", \"defaultValue\", \"disabled\", \"dropProps\", \"format\", \"id\", \"inline\", \"inputProps\", \"name\", \"onChange\", \"onFocus\", \"value\"]);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var iconSize = theme.dateInput.icon && theme.dateInput.icon.size || 'medium';\n\n  var _useContext = useContext(FormContext),\n      useFormInput = _useContext.useFormInput;\n\n  var ref = useForwardedRef(refArg);\n\n  var _useFormInput = useFormInput(name, valueArg, defaultValue),\n      value = _useFormInput[0],\n      setValue = _useFormInput[1]; // parse format and build a formal schema we can use elsewhere\n\n\n  var schema = useMemo(function () {\n    return formatToSchema(format);\n  }, [format]); // mask is only used when a format is provided\n\n  var mask = useMemo(function () {\n    if (!schema) return undefined;\n    return schema.map(function (part) {\n      var _char = part[0].toLowerCase();\n\n      if (_char === 'm' || _char === 'd' || _char === 'y') {\n        return {\n          placeholder: part,\n          length: [1, part.length],\n          regexp: new RegExp(\"^[0-9]{1,\" + part.length + \"}$\")\n        };\n      }\n\n      return {\n        fixed: part\n      };\n    });\n  }, [schema]); // textValue is only used when a format is provided\n\n  var _useState = useState(schema ? valueToText(value, schema) : undefined),\n      textValue = _useState[0],\n      setTextValue = _useState[1]; // We need to distinguish between the caller changing a Form value\n  // and the user typing a date that he isn't finished with yet.\n  // To track this, we keep track of the internalValue from interacting\n  // within this component. If the value has changed outside of this\n  // component, we reset the textValue.\n\n\n  var _useState2 = useState(value),\n      internalValue = _useState2[0],\n      setInternalValue = _useState2[1];\n\n  useEffect(function () {\n    if (schema && !!value !== !!internalValue) {\n      setTextValue(valueToText(value, schema));\n      setInternalValue(value);\n    }\n  }, [internalValue, schema, value]); // when format and not inline, whether to show the Calendar in a Drop\n\n  var _useState3 = useState(),\n      open = _useState3[0],\n      setOpen = _useState3[1];\n\n  var range = Array.isArray(value);\n  var calendar = /*#__PURE__*/React.createElement(Calendar, _extends({\n    ref: inline ? ref : undefined,\n    id: inline && !format ? id : undefined,\n    range: range,\n    date: range ? undefined : value,\n    dates: range ? [value] : undefined,\n    onSelect: disabled ? undefined : function (nextValue) {\n      var normalizedValue;\n\n      if (range && Array.isArray(nextValue)) {\n        normalizedValue = nextValue[0];\n      } // clicking an edge date removes it\n      else if (range) normalizedValue = [nextValue, nextValue];else normalizedValue = nextValue;\n\n      if (schema) setTextValue(valueToText(normalizedValue, schema));\n      setValue(normalizedValue);\n      setInternalValue(normalizedValue);\n      if (_onChange) _onChange({\n        value: normalizedValue\n      });\n      if (open && !range) setOpen(false);\n    }\n  }, calendarProps));\n\n  if (!format) {\n    // When no format is specified, we don't give the user a way to type\n    if (inline) return calendar;\n    return /*#__PURE__*/React.createElement(DropButton, _extends({\n      ref: ref,\n      id: id,\n      dropProps: _extends({\n        align: {\n          top: 'bottom',\n          left: 'left'\n        }\n      }, dropProps),\n      dropContent: calendar,\n      icon: /*#__PURE__*/React.createElement(CalendarIcon, {\n        size: iconSize\n      })\n    }, buttonProps));\n  }\n\n  var input = /*#__PURE__*/React.createElement(FormContext.Provider, {\n    key: \"input\" // don't let MaskedInput drive the Form\n    ,\n    value: {\n      useFormInput: function useFormInput(_, val) {\n        return [val, function () {}];\n      }\n    }\n  }, /*#__PURE__*/React.createElement(Keyboard, {\n    onEsc: open ? function () {\n      return setOpen(false);\n    } : undefined\n  }, /*#__PURE__*/React.createElement(MaskedInput, _extends({\n    ref: ref,\n    id: id,\n    name: name,\n    icon: /*#__PURE__*/React.createElement(CalendarIcon, {\n      size: iconSize\n    }),\n    reverse: true,\n    disabled: disabled,\n    mask: mask\n  }, inputProps, rest, {\n    value: textValue,\n    onChange: function onChange(event) {\n      var nextTextValue = event.target.value;\n      setTextValue(nextTextValue);\n      var nextValue = textToValue(nextTextValue, schema); // update value even when undefined\n\n      setValue(nextValue);\n      setInternalValue(nextValue || '');\n\n      if (_onChange) {\n        event.persist(); // extract from React synthetic event pool\n\n        var adjustedEvent = event;\n        adjustedEvent.value = nextValue;\n\n        _onChange(adjustedEvent);\n      }\n    },\n    onFocus: function onFocus(event) {\n      setOpen(true);\n      if (_onFocus) _onFocus(event);\n    }\n  }))));\n\n  if (inline) {\n    return /*#__PURE__*/React.createElement(Box, null, input, calendar);\n  }\n\n  if (open) {\n    return [input, /*#__PURE__*/React.createElement(Drop, _extends({\n      overflow: \"visible\",\n      key: \"drop\",\n      id: id ? id + \"__drop\" : undefined,\n      target: ref.current,\n      align: _extends({\n        top: 'bottom',\n        left: 'left'\n      }, dropProps),\n      onEsc: function onEsc() {\n        return setOpen(false);\n      },\n      onClickOutside: function onClickOutside() {\n        return setOpen(false);\n      }\n    }, dropProps), calendar)];\n  }\n\n  return input;\n});\nDateInput.displayName = 'DateInput';\nvar DateInputDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  DateInputDoc = require('./doc').doc(DateInput);\n}\n\nvar DateInputWrapper = DateInputDoc || DateInput;\nexport { DateInputWrapper as DateInput };","map":null,"metadata":{},"sourceType":"module"}