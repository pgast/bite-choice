{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useEffect, useMemo, useRef, useState } from 'react';\nimport { FormContext } from './FormContext';\nvar defaultMessages = {\n  invalid: 'invalid',\n  required: 'required'\n};\nvar defaultValue = {};\nvar defaultTouched = {};\nvar defaultValidationResults = {\n  errors: {},\n  infos: {}\n}; // validations is an array from Object.entries()\n\nvar validate = function validate(validations, value, omitValid) {\n  var nextErrors = {};\n  var nextInfos = {};\n  validations.forEach(function (_ref) {\n    var name = _ref[0],\n        validation = _ref[1];\n\n    if (!omitValid) {\n      nextErrors[name] = undefined;\n      nextInfos[name] = undefined;\n    }\n\n    var result = validation(value[name], value); // typeof error === 'object' is implied for both cases of error with\n    // a status message and for an error object that is a react node\n\n    if (typeof result === 'object') {\n      if (result.status === 'info') {\n        nextInfos[name] = result.message;\n      } else {\n        nextErrors[name] = result.message || result; // could be a node\n      }\n    } else if (typeof result === 'string') {\n      nextErrors[name] = result;\n    }\n  });\n  return [nextErrors, nextInfos];\n};\n\nvar Form = /*#__PURE__*/forwardRef(function (_ref2, ref) {\n  var children = _ref2.children,\n      _ref2$errors = _ref2.errors,\n      errorsProp = _ref2$errors === void 0 ? defaultValidationResults.errors : _ref2$errors,\n      _ref2$infos = _ref2.infos,\n      infosProp = _ref2$infos === void 0 ? defaultValidationResults.infos : _ref2$infos,\n      _ref2$messages = _ref2.messages,\n      messages = _ref2$messages === void 0 ? defaultMessages : _ref2$messages,\n      onChange = _ref2.onChange,\n      _onReset = _ref2.onReset,\n      _onSubmit = _ref2.onSubmit,\n      onValidate = _ref2.onValidate,\n      _ref2$validate = _ref2.validate,\n      validateOn = _ref2$validate === void 0 ? 'submit' : _ref2$validate,\n      valueProp = _ref2.value,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"children\", \"errors\", \"infos\", \"messages\", \"onChange\", \"onReset\", \"onSubmit\", \"onValidate\", \"validate\", \"value\"]);\n\n  var _useState = useState(valueProp || defaultValue),\n      valueState = _useState[0],\n      setValueState = _useState[1];\n\n  var value = useMemo(function () {\n    return valueProp || valueState;\n  }, [valueProp, valueState]);\n\n  var _useState2 = useState(defaultTouched),\n      touched = _useState2[0],\n      setTouched = _useState2[1];\n\n  var _useState3 = useState(defaultValidationResults),\n      validationResults = _useState3[0],\n      setValidationResults = _useState3[1]; // when onBlur input validation is triggered, we need to complete any\n  // potential click events before running the onBlur validation.\n  // otherwise, click events like reset, etc. may not be registered.\n  // for a detailed scenario/discussion, see: https://github.com/grommet/grommet/issues/4863\n  // the value of pendingValidation is the name of the FormField\n  // awaiting validation.\n\n\n  var _useState4 = useState(undefined),\n      pendingValidation = _useState4[0],\n      setPendingValidation = _useState4[1];\n\n  useEffect(function () {\n    setPendingValidation(undefined);\n    setValidationResults({\n      errors: errorsProp,\n      infos: infosProp\n    });\n  }, [errorsProp, infosProp]);\n  var validations = useRef({}); // Currently, onBlur validation will trigger after a timeout of 120ms. #4863\n\n  useEffect(function () {\n    var timer = setTimeout(function () {\n      if (pendingValidation) {\n        // run validations on touched keys\n        var _validate = validate(Object.entries(validations.current).filter(function (_ref3) {\n          var n = _ref3[0];\n          return touched[n] || n === pendingValidation;\n        }), value),\n            nextErrors = _validate[0],\n            nextInfos = _validate[1];\n\n        setPendingValidation(undefined); // give user access to errors that have occurred on validation\n\n        setValidationResults(function (prevValidationResults) {\n          // keep any previous errors and infos for untouched keys,\n          // which probably came from a submit\n          var nextValidationResults = {\n            errors: _extends({}, prevValidationResults.errors, nextErrors),\n            infos: _extends({}, prevValidationResults.infos, nextInfos)\n          };\n          if (onValidate) onValidate(nextValidationResults);\n          return nextValidationResults;\n        });\n      } // a timeout is needed to ensure that a click event (like one on a reset\n      // button) completes prior to running the validation. without a timeout,\n      // the blur will always complete and trigger a validation prematurely\n      // The following values have been empirically tested, but 120 was\n      // selected because it is the largest value\n      // Chrome: 100, Safari: 120, Firefox: 80\n\n    }, 120);\n    return function () {\n      return clearTimeout(timer);\n    };\n  }, [pendingValidation, onValidate, touched, value]); // clear any errors when value changes\n\n  useEffect(function () {\n    setPendingValidation(undefined);\n    setValidationResults(function (prevValidationResults) {\n      var _validate2 = validate(Object.entries(validations.current).filter(function (_ref4) {\n        var n = _ref4[0];\n        return prevValidationResults.errors[n] || prevValidationResults.infos[n];\n      }), value),\n          nextErrors = _validate2[0],\n          nextInfos = _validate2[1];\n\n      return {\n        errors: _extends({}, prevValidationResults.errors, nextErrors),\n        infos: _extends({}, prevValidationResults.infos, nextInfos)\n      };\n    });\n  }, [touched, value]); // There are three basic patterns of handling form input value state:\n  //\n  // 1 - form controlled\n  //\n  // In this model, the caller sets `value` and `onChange` properties\n  // on the Form component to supply the values used by the input fields.\n  // In useFormContext(), componentValue would be undefined and formValue\n  // is be set to whatever the form state has. Whenever the form state\n  // changes, we update the contextValue so the input component will use\n  // that. When the input component changes, we will call update() to\n  // update the form state.\n  //\n  // 2 - input controlled\n  //\n  // In this model, the caller sets `value` and `onChange` properties\n  // on the input components, like TextInput, to supply the value for it.\n  // In useFormContext(), componentValue is this value and we ensure to\n  // update the form state, via update(), and set the contextValue from\n  // the componentValue. When the input component changes, we will\n  // call update() to update the form state.\n  //\n  // 3 - uncontrolled\n  //\n  // In this model, the caller doesn't set a `value` or `onChange` property\n  // at either the form or input component levels.\n  // In useFormContext(), componentValue is undefined and valueProp is\n  // undefined and nothing much happens here. That is, unless the\n  // calling component needs to know the state in order to work, such\n  // as CheckBox or Select. In this case, those components supply\n  // an initialValue, which will trigger updating the contextValue so\n  // they can have access to it.\n  //\n\n  var useFormInput = function useFormInput(name, componentValue, initialValue) {\n    var _useState5 = useState(initialValue),\n        inputValue = _useState5[0],\n        setInputValue = _useState5[1];\n\n    var formValue = name ? value[name] : undefined; // This effect is for pattern #2, where the controlled input\n    // component is driving the value via componentValue.\n\n    useEffect(function () {\n      if (name && // we have somewhere to put this\n      componentValue !== undefined && // input driving\n      componentValue !== formValue // don't already have it\n      ) {\n          setValueState(function (prevValue) {\n            var nextValue = _extends({}, prevValue);\n\n            nextValue[name] = componentValue;\n            return nextValue;\n          }); // don't onChange on programmatic changes\n        }\n    }, [componentValue, formValue, name]);\n    var useValue;\n    if (componentValue !== undefined) // input component drives, pattern #2\n      useValue = componentValue;else if (valueProp && name && formValue !== undefined) // form drives, pattern #1\n      useValue = formValue;else if (formValue === undefined && name) // form has reset, so reset input value as well\n      useValue = initialValue;else useValue = inputValue;\n    return [useValue, function (nextComponentValue) {\n      if (name) {\n        // we have somewhere to put this\n        var nextTouched = _extends({}, touched);\n\n        nextTouched[name] = true;\n\n        if (!touched[name]) {\n          // don't update if not needed\n          setTouched(nextTouched);\n        }\n\n        var nextValue = _extends({}, value);\n\n        nextValue[name] = nextComponentValue;\n        setValueState(nextValue);\n        if (onChange) onChange(nextValue, {\n          touched: nextTouched\n        });\n      }\n\n      if (initialValue !== undefined) setInputValue(nextComponentValue);\n    }];\n  };\n\n  var useFormField = function useFormField(_ref5) {\n    var errorArg = _ref5.error,\n        infoArg = _ref5.info,\n        name = _ref5.name,\n        required = _ref5.required,\n        validateArg = _ref5.validate;\n    var error = errorArg || validationResults.errors[name];\n    var info = infoArg || validationResults.infos[name];\n    useEffect(function () {\n      var validateSingle = function validateSingle(aValidate, value2, data) {\n        var result;\n\n        if (typeof aValidate === 'function') {\n          result = aValidate(value2, data);\n        } else if (aValidate.regexp) {\n          if (!aValidate.regexp.test(value2)) {\n            result = aValidate.message || messages.invalid;\n\n            if (aValidate.status) {\n              result = {\n                message: result,\n                status: aValidate.status\n              };\n            }\n          }\n        }\n\n        return result;\n      };\n\n      var validateField = function validateField(value2, data) {\n        var result;\n\n        if (required && ( // false is for CheckBox\n        value2 === undefined || value2 === '' || value2 === false)) {\n          result = messages.required;\n        } else if (validateArg) {\n          if (Array.isArray(validateArg)) {\n            validateArg.some(function (aValidate) {\n              result = validateSingle(aValidate, value2, data);\n              return !!result;\n            });\n          } else {\n            result = validateSingle(validateArg, value2, data);\n          }\n        }\n\n        return result;\n      };\n\n      if (validateArg || required) {\n        validations.current[name] = validateField;\n        return function () {\n          return delete validations.current[name];\n        };\n      }\n\n      return undefined;\n    }, [error, name, required, validateArg]);\n    return {\n      error: error,\n      info: info,\n      inForm: true,\n      onBlur: validateOn === 'blur' ? function () {\n        return setPendingValidation(name);\n      } : undefined\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: ref\n  }, rest, {\n    onReset: function onReset(event) {\n      setPendingValidation(undefined);\n\n      if (!valueProp) {\n        setValueState(defaultValue);\n        if (onChange) onChange(defaultValue, {\n          touched: defaultTouched\n        });\n      }\n\n      setTouched(defaultTouched);\n      setValidationResults(defaultValidationResults);\n\n      if (_onReset) {\n        event.persist(); // extract from React's synthetic event pool\n\n        var adjustedEvent = event;\n        adjustedEvent.value = defaultValue;\n\n        _onReset(adjustedEvent);\n      }\n    },\n    onSubmit: function onSubmit(event) {\n      // Don't submit the form via browser form action. We don't want it\n      // if the validation fails. And, we assume a javascript action handler\n      // otherwise.\n      event.preventDefault();\n      setPendingValidation(undefined);\n\n      var _validate3 = validate(Object.entries(validations.current), value, true),\n          nextErrors = _validate3[0],\n          nextInfos = _validate3[1];\n\n      setValidationResults(function () {\n        var nextValidationResults = {\n          errors: nextErrors,\n          infos: nextInfos\n        };\n        if (onValidate) onValidate(nextValidationResults);\n        return nextValidationResults;\n      });\n\n      if (Object.keys(nextErrors).length === 0 && _onSubmit) {\n        event.persist(); // extract from React's synthetic event pool\n\n        var adjustedEvent = event;\n        adjustedEvent.value = value;\n        adjustedEvent.touched = touched;\n\n        _onSubmit(adjustedEvent);\n      }\n    }\n  }), /*#__PURE__*/React.createElement(FormContext.Provider, {\n    value: {\n      useFormField: useFormField,\n      useFormInput: useFormInput\n    }\n  }, children));\n});\nForm.displayName = 'Form';\nvar FormDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  FormDoc = require('./doc').doc(Form); // eslint-disable-line global-require\n}\n\nvar FormWrapper = FormDoc || Form;\nexport { FormWrapper as Form };","map":null,"metadata":{},"sourceType":"module"}