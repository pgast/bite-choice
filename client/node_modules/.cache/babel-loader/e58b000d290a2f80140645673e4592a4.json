{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.themeDoc = exports.doc = void 0;\n\nvar _reactDesc = require(\"react-desc\");\n\nvar _utils = require(\"../../utils\");\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar doc = function doc(TextInput) {\n  var DocumentedTextInput = (0, _reactDesc.describe)(TextInput).availableAt((0, _utils.getAvailableAtBadge)('TextInput')).description('A control to input a single line of text, with optional suggestions.').usage(\"import { TextInput } from 'grommet';\\n<TextInput id='item' name='item' />\").intrinsicElement('input');\n  DocumentedTextInput.propTypes = {\n    dropAlign: _reactDesc.PropTypes.shape({\n      top: _reactDesc.PropTypes.oneOf(['top', 'bottom']),\n      bottom: _reactDesc.PropTypes.oneOf(['top', 'bottom']),\n      right: _reactDesc.PropTypes.oneOf(['left', 'right']),\n      left: _reactDesc.PropTypes.oneOf(['left', 'right'])\n    }).description('How to align the drop.').defaultValue({\n      top: 'bottom',\n      left: 'left'\n    }),\n    dropHeight: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge']), _reactDesc.PropTypes.string]).description('The height of the drop container.'),\n    dropTarget: _reactDesc.PropTypes.object.description(\"Target where any suggestions drop will be aligned to. This should be\\n      a React reference. Typically, this is not required as the drop will be\\n      aligned to the TextInput itself by default.\"),\n    dropProps: _reactDesc.PropTypes.object.description('Any valid Drop prop.'),\n    id: _reactDesc.PropTypes.string.description('The id attribute of the input.'),\n    focusIndicator: _reactDesc.PropTypes.bool.description('Whether the plain text input should receive a focus outline.'),\n    messages: _reactDesc.PropTypes.shape({\n      enterSelect: _reactDesc.PropTypes.string,\n      suggestionsCount: _reactDesc.PropTypes.string,\n      suggestionsExist: _reactDesc.PropTypes.string,\n      suggestionIsOpen: _reactDesc.PropTypes.string\n    }).description('Custom messages for TextInput. Used for accessibility by screen readers.').defaultValue({\n      enterSelect: '(Press Enter to Select)',\n      suggestionsCount: 'suggestions available',\n      suggestionsExist: 'This input has suggestions use arrow keys to navigate',\n      suggestionIsOpen: 'Suggestions drop is open, continue to use arrow keys to navigate'\n    }),\n    name: _reactDesc.PropTypes.string.description('The name attribute of the input.'),\n    onChange: _reactDesc.PropTypes.func.description('Function that will be called when the user types in the input.'),\n    onSelect: _reactDesc.PropTypes.func.description(\"Function that will be called when the user selects a suggestion.\\nThe suggestion contains the object chosen from the supplied suggestions.\"),\n    onSuggestionsOpen: _reactDesc.PropTypes.func.description('Function that will be called when the suggestions drop is opened.'),\n    onSuggestionsClose: _reactDesc.PropTypes.func.description('Function that will be called when the suggestions drop is closed.'),\n    placeholder: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.string, _reactDesc.PropTypes.node]).description('Placeholder to use when no value is provided.'),\n    plain: _reactDesc.PropTypes.bool.description(\"Whether this is a plain input with no border or padding.\\nOnly use this when the containing context provides sufficient affordance\"),\n    size: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.oneOf(['small', 'medium', 'large', 'xlarge']), _reactDesc.PropTypes.string]).description('The size of the TextInput.'),\n    suggestions: _reactDesc.PropTypes.arrayOf(_reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.shape({\n      label: _reactDesc.PropTypes.node,\n      value: _reactDesc.PropTypes.any\n    }), _reactDesc.PropTypes.string])).description(\"Suggestions to show. It is recommended to avoid showing too many\\nsuggestions and instead rely on the user to type more.\"),\n    value: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.string, _reactDesc.PropTypes.number]).description('What text to put in the input.')\n  };\n  return DocumentedTextInput;\n};\n\nexports.doc = doc;\n\nvar themeDoc = _extends({\n  'global.colors.border': {\n    description: 'The color of the border.',\n    type: 'object',\n    defaultValue: {\n      dark: 'rgba(255, 255, 255, 0.33)',\n      light: 'rgba(0, 0, 0, 0.33)'\n    }\n  },\n  'global.control.border.color': {\n    description: 'The border color.',\n    type: 'string',\n    defaultValue: 'border'\n  },\n  'global.control.border.radius': {\n    description: 'The border radius.',\n    type: 'string',\n    defaultValue: '4px'\n  },\n  'global.control.border.width': {\n    description: 'The border width.',\n    type: 'string',\n    defaultValue: '1px'\n  },\n  'select.step': {\n    description: 'How many suggestions to render at a time.',\n    type: 'number',\n    defaultValue: 20\n  },\n  text: {\n    description: \"The possible sizes of the text in terms of its font-size and line-height.\",\n    type: 'object',\n    defaultValue: \"{\\n      xsmall: {\\n        size: '12px',\\n        height: '18px',\\n       },\\n      small: {\\n        size: '14px',\\n        height: '20px',\\n       },\\n      medium: {\\n        size: '18px',\\n        height: '24px',\\n      },\\n      large: {\\n        size: '22px',\\n        height: '28px',\\n      },\\n      xlarge: {\\n        size: '26px',\\n        height: '32px',\\n      },\\n      xxlarge: {\\n        size: '34px',\\n        height: '40px',\\n      },\\n    }\"\n  },\n  'textInput.extend': {\n    description: 'Any additional style for TextInput.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textInput.container.extend': {\n    description: 'Any additional style for TextInput container.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textInput.placeholder.extend': {\n    description: 'Any additional style for non-string placeholder inside TextInput.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textInput.suggestions.extend': {\n    description: 'Any additional style for TextInput suggestions.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'textInput.disabled.opacity': {\n    description: 'The opacity when the textInput is disabled.',\n    type: 'number',\n    defaultValue: 0.3\n  }\n}, _utils.themeDocUtils.focusStyle, _utils.themeDocUtils.placeholderStyle, _utils.themeDocUtils.disabledStyle, _utils.themeDocUtils.inputStyle);\n\nexports.themeDoc = themeDoc;","map":null,"metadata":{},"sourceType":"script"}