{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext, useEffect, useState } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Text } from '../Text';\nimport { TabsContext } from '../Tabs/TabsContext';\nimport { normalizeColor } from '../../utils';\nimport { StyledTab } from './StyledTab';\nvar Tab = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var activeProp = _ref.active,\n      disabled = _ref.disabled,\n      children = _ref.children,\n      icon = _ref.icon,\n      plain = _ref.plain,\n      title = _ref.title,\n      onMouseOver = _ref.onMouseOver,\n      onMouseOut = _ref.onMouseOut,\n      reverse = _ref.reverse,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"active\", \"disabled\", \"children\", \"icon\", \"plain\", \"title\", \"onMouseOver\", \"onMouseOut\", \"reverse\"]);\n\n  var _useContext = useContext(TabsContext),\n      active = _useContext.active,\n      activeIndex = _useContext.activeIndex,\n      onActivate = _useContext.onActivate,\n      setActiveContent = _useContext.setActiveContent,\n      setActiveTitle = _useContext.setActiveTitle;\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var _useState = useState(undefined),\n      over = _useState[0],\n      setOver = _useState[1];\n\n  var _useState2 = useState(undefined),\n      focus = _useState2[0],\n      setFocus = _useState2[1];\n\n  var normalizedTitle = title;\n  var tabStyles = {};\n  useEffect(function () {\n    if (active) {\n      setActiveContent(children);\n      var activeTitle = typeof title === 'string' ? title : activeIndex + 1;\n      setActiveTitle(activeTitle);\n    }\n  }, [active, activeIndex, children, setActiveContent, setActiveTitle, title]);\n\n  var onMouseOverTab = function onMouseOverTab(event) {\n    setOver(true);\n\n    if (onMouseOver) {\n      onMouseOver(event);\n    }\n  };\n\n  var onMouseOutTab = function onMouseOutTab(event) {\n    setOver(undefined);\n\n    if (onMouseOut) {\n      onMouseOut(event);\n    }\n  };\n\n  var onClickTab = function onClickTab(event) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    onActivate();\n  };\n\n  if (active && disabled) {\n    console.warn( // eslint-disable-next-line max-len\n    \"Warning: Tab props 'active' and 'disabled' have both been set to TRUE on the same Tab resulting in an interesting Tab state. Is this your intent?\");\n  }\n\n  if (!plain) {\n    if (typeof title !== 'string') {\n      normalizedTitle = title;\n    } else if (active) {\n      normalizedTitle = /*#__PURE__*/React.createElement(Text, theme.tab.active, title);\n    } else if (disabled && theme.tab.disabled) {\n      normalizedTitle = /*#__PURE__*/React.createElement(Text, theme.tab.disabled, title);\n    } else {\n      normalizedTitle = /*#__PURE__*/React.createElement(Text, {\n        color: over ? theme.tab.hover.color : theme.tab.color\n      }, title);\n    }\n\n    if (theme.tab.border) {\n      var borderColor = theme.tab.border.color || theme.global.control.border.color;\n\n      if (active) {\n        borderColor = theme.tab.border.active.color || borderColor;\n      } else if (disabled && theme.tab.border.disabled) {\n        borderColor = theme.tab.border.disabled.color || borderColor;\n      } else if (over) {\n        borderColor = theme.tab.border.hover.color || borderColor;\n      }\n\n      borderColor = normalizeColor(borderColor, theme);\n      tabStyles.border = {\n        side: theme.tab.border.side,\n        size: theme.tab.border.size,\n        color: borderColor\n      };\n    }\n\n    tabStyles.background = active ? theme.tab.active.background || theme.tab.background : theme.tab.background;\n    tabStyles.pad = theme.tab.pad;\n    tabStyles.margin = theme.tab.margin;\n  } // needed to apply hover/active styles to the icon\n\n\n  var renderIcon = function renderIcon(iconProp) {\n    if (active) {\n      return /*#__PURE__*/React.cloneElement(iconProp, _extends({}, theme.tab.active));\n    }\n\n    if (disabled) {\n      return /*#__PURE__*/React.cloneElement(iconProp, _extends({}, theme.tab.disabled));\n    }\n\n    return /*#__PURE__*/React.cloneElement(iconProp, {\n      color: over ? theme.tab.hover.color : theme.tab.color\n    });\n  };\n\n  var normalizedIcon;\n\n  if (icon) {\n    normalizedIcon = renderIcon(icon);\n  }\n\n  var first = reverse ? normalizedTitle : normalizedIcon;\n  var second = reverse ? normalizedIcon : normalizedTitle;\n  var withIconStyles;\n\n  if (first && second) {\n    withIconStyles = {\n      direction: 'row',\n      align: 'center',\n      justify: 'center',\n      gap: 'small'\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(Button, _extends({\n    ref: ref,\n    plain: true,\n    role: \"tab\",\n    \"aria-selected\": active,\n    \"aria-expanded\": active,\n    disabled: disabled\n  }, rest, {\n    onClick: onClickTab,\n    onMouseOver: onMouseOverTab,\n    onMouseOut: onMouseOutTab,\n    onFocus: function onFocus() {\n      setFocus(true);\n      if (onMouseOver) onMouseOver();\n    },\n    onBlur: function onBlur() {\n      setFocus(undefined);\n      if (onMouseOut) onMouseOut();\n    } // ensure focus outline is not covered by hover styling\n    // of adjacent tabs\n    ,\n    style: focus && {\n      zIndex: 1\n    }\n  }), /*#__PURE__*/React.createElement(StyledTab, _extends({\n    as: Box,\n    disabled: disabled,\n    plain: plain\n  }, withIconStyles, tabStyles), first, second));\n});\nTab.displayName = 'Tab';\nTab.defaultProps = {};\nObject.setPrototypeOf(Tab.defaultProps, defaultProps);\nvar TabDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  TabDoc = require('./doc').doc(Tab); // eslint-disable-line global-require\n}\n\nvar TabWrapper = TabDoc || Tab;\nexport { TabWrapper as Tab };","map":null,"metadata":{},"sourceType":"module"}