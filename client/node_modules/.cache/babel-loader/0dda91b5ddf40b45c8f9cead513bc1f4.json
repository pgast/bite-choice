{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { Children, cloneElement, forwardRef, useContext, useState } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Box } from '../Box';\nimport { Drop } from '../Drop';\nimport { useForwardedRef } from '../../utils/refs';\nvar Tip = /*#__PURE__*/forwardRef(function (_ref, tipRef) {\n  var children = _ref.children,\n      content = _ref.content,\n      dropProps = _ref.dropProps,\n      plain = _ref.plain;\n  var theme = useContext(ThemeContext);\n\n  var _useState = useState(false),\n      over = _useState[0],\n      setOver = _useState[1];\n\n  var componentRef = useForwardedRef(tipRef); // In cases the child is a primitive\n\n  var wrapInvalidElement = function wrapInvalidElement() {\n    return (// Handle the use case of a primitive string child\n      // so we'll be able to assign ref and events on the child.\n      ! /*#__PURE__*/React.isValidElement(children) ? /*#__PURE__*/React.createElement(\"span\", null, children) : children\n    );\n  };\n  /* Three use case for children\n    1. Tip has a single child + it is a React Element => Great!\n    2. Tip has a single child +  not React Element => span will wrap the child.\n    3. Tip has more than one child => Abort, display Children.only error \n  */\n\n\n  var child = Children.count(children) === 1 ? wrapInvalidElement() : Children.only(children);\n  var clonedChild = /*#__PURE__*/cloneElement(child, {\n    onMouseOver: function onMouseOver() {\n      return setOver(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      return setOver(false);\n    },\n    onFocus: function onFocus() {\n      return setOver(true);\n    },\n    onBlur: function onBlur() {\n      return setOver(false);\n    },\n    key: 'tip-child',\n    ref: function ref(node) {\n      // https://github.com/facebook/react/issues/8873#issuecomment-287873307\n      if (typeof componentRef === 'function') {\n        componentRef(node);\n      } else if (componentRef) {\n        // eslint-disable-next-line no-param-reassign\n        componentRef.current = node;\n      } // Call the original ref, if any\n\n\n      var callerRef = child.ref;\n\n      if (typeof callerRef === 'function') {\n        callerRef(node);\n      } else if (callerRef) {\n        callerRef.current = node;\n      }\n    }\n  });\n  return [clonedChild, over && /*#__PURE__*/React.createElement(Drop, _extends({\n    target: componentRef.current,\n    trapFocus: false,\n    key: \"tip-drop\",\n    plain: true\n  }, theme.tip.drop, dropProps), plain ? content : /*#__PURE__*/React.createElement(Box, theme.tip.content, content))];\n});\nTip.displayName = 'Tip';\nvar TipDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  TipDoc = require('./doc').doc(Tip);\n}\n\nvar TipWrapper = TipDoc || Tip;\nexport { TipWrapper as Tip };","map":null,"metadata":{},"sourceType":"module"}