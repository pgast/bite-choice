{"ast":null,"code":"import _toConsumableArray from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/CustomForm.js\";\n\nimport React, { Fragment, useState } from 'react'; // updates state with pertaining custom search info\n// when user clicks submit, action is dispatched to fetch data from store\n\nvar customForm = function customForm() {\n  // data = from state\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchTerms = _useState2[0],\n      setSearchTerms = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentTerm = _useState4[0],\n      setCurrentTerm = _useState4[1];\n\n  var _useState5 = useState('best_match'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sortBy = _useState6[0],\n      setSortBy = _useState6[1]; // // ADDS TERM TO STATE\n  // addTerm = e => {\n  //   e.preventDefault();\n  //   if (this.state.currentTerm !== '') {\n  //     if (this.state.searchTerms.length < 3) {\n  //       let newTerms = [...this.state.searchTerms];\n  //       newTerms.push(this.state.currentTerm);\n  //       this.setState({ searchTerms: newTerms });\n  //       this.setState({ currentTerm: '' });\n  //     };\n  //   }; \n  // };\n\n\n  var addTerm = function addTerm(e) {\n    e.preventDefault();\n\n    if (currentTerm !== '') {\n      if (searchTerms.length < 3) {\n        // hacer copia de searchTerms\n        var newTerms = _toConsumableArray(searchTerms); // push copy into searchTerms\n\n\n        newTerms.push(currentTerm); // set searchTerms al nuevo array\n\n        setSearchTerms(newTerms); // set currentTerm a vacio otra vez\n\n        setCurrentTerm('');\n      }\n    }\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Custom Form\"), React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Name:\", React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Type Search Term\",\n    onChange: function onChange(e) {\n      return setCurrentTerm(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: function onClick(e) {\n      return addTerm(e);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Add term\")), _this.state.searchTerms.map(function (el, index) {\n    return React.createElement(\"p\", {\n      key: index,\n      onClick: function onClick() {\n        return _this.removeTerm(index);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, el);\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Sort by:\", React.createElement(\"select\", {\n    name: \"sortBy\",\n    value: _this.state.sortBy,\n    onChange: _this.handleInputChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"best_match\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"Best Match\"), React.createElement(\"option\", {\n    value: \"rating\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Rating\"), React.createElement(\"option\", {\n    value: \"review_count\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Review Count\"), React.createElement(\"option\", {\n    value: \"distance\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Distance\"), React.createElement(\"option\", {\n    value: \"random\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Random\"))), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  })));\n};\n\nexport default customForm;","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/CustomForm.js"],"names":["React","Fragment","useState","customForm","searchTerms","setSearchTerms","currentTerm","setCurrentTerm","sortBy","setSortBy","addTerm","e","preventDefault","length","newTerms","push","target","value","state","map","el","index","removeTerm","handleInputChange"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from 'react';\n\n// updates state with pertaining custom search info\n  // when user clicks submit, action is dispatched to fetch data from store\n\n\nconst customForm = () => {\n\n  // data = from state\n  const [searchTerms, setSearchTerms] = useState([]);\n  const [currentTerm, setCurrentTerm] = useState(\"\");\n  const [sortBy, setSortBy] = useState('best_match');\n\n   // // ADDS TERM TO STATE\n  // addTerm = e => {\n  //   e.preventDefault();\n  //   if (this.state.currentTerm !== '') {\n  //     if (this.state.searchTerms.length < 3) {\n  //       let newTerms = [...this.state.searchTerms];\n  //       newTerms.push(this.state.currentTerm);\n  \n  //       this.setState({ searchTerms: newTerms });\n  //       this.setState({ currentTerm: '' });\n  //     };\n  //   }; \n  // };\n\n\n  const addTerm = (e) => {\n    e.preventDefault();\n    \n    if (currentTerm !== '') {\n      if (searchTerms.length < 3) {\n        // hacer copia de searchTerms\n        let newTerms = [...searchTerms];\n        // push copy into searchTerms\n        newTerms.push(currentTerm);\n        // set searchTerms al nuevo array\n        setSearchTerms(newTerms);\n        // set currentTerm a vacio otra vez\n        setCurrentTerm('');\n      }\n    }\n  }\n\n  return (\n    <Fragment>\n      <h1>Custom Form</h1>\n\n      {/* onSubmit fetch data */}\n      <form>\n          <label>\n            Name:\n            <input \n              type=\"text\" \n              placeholder=\"Type Search Term\" \n              onChange={(e) => setCurrentTerm(e.target.value)} \n            />\n            <button onClick={(e) => addTerm(e)}>Add term</button>\n          </label>\n\n          {\n            this.state.searchTerms.map((el, index) => {\n              return <p key={index} onClick={() => this.removeTerm(index)} >{el}</p>\n            })\n          }\n\n          <label>\n            Sort by:\n            <select name=\"sortBy\" value={this.state.sortBy} onChange={this.handleInputChange} >\n              <option value=\"best_match\">Best Match</option>\n              <option value=\"rating\">Rating</option>\n              <option value=\"review_count\">Review Count</option>\n              <option value=\"distance\">Distance</option>\n              <option value=\"random\">Random</option>\n            </select>\n          </label>\n\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n    </Fragment>\n  );\n};\n\nexport default customForm;"]},"metadata":{},"sourceType":"module"}