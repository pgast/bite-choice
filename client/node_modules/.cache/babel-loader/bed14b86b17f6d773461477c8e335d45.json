{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.doc = void 0;\n\nvar _reactDesc = require(\"react-desc\");\n\nvar _propTypes = require(\"../../utils/prop-types\");\n\nvar _mixins = require(\"../../utils/mixins\");\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar doc = function doc(DropButton) {\n  var DocumentedDropButton = (0, _reactDesc.describe)(DropButton).availableAt((0, _mixins.getAvailableAtBadge)('DropButton', 'Controls')).description(\"A Button that controls a Drop. When opened, the Drop will contain\\n      whatever is specified via `dropContent`. The Drop will control the focus\\n      so that the contents behind it are not focusable. All properties and \\n      theme properties of Button or Drop can be passed through.\\n      \").usage(\"import { DropButton } from 'grommet';\\n<DropButton dropContent={...} />\").intrinsicElement('button');\n  DocumentedDropButton.propTypes = _extends({}, _propTypes.genericProps, {\n    disabled: _reactDesc.PropTypes.bool.description('Whether the button should be disabled.').defaultValue(false),\n    dropAlign: _reactDesc.PropTypes.shape({\n      top: _reactDesc.PropTypes.oneOf(['top', 'bottom']),\n      bottom: _reactDesc.PropTypes.oneOf(['top', 'bottom']),\n      right: _reactDesc.PropTypes.oneOf(['left', 'right']),\n      left: _reactDesc.PropTypes.oneOf(['left', 'right'])\n    }).description('How to align the drop with respect to the button.').defaultValue({\n      top: 'top',\n      left: 'left'\n    }),\n    dropContent: _reactDesc.PropTypes.element.description('Content to put inside the Drop.').isRequired,\n    dropTarget: _reactDesc.PropTypes.object.description(\"Target where the drop will be aligned to. This should be\\n      a React reference. Typically, this is not required as the drop will be\\n      aligned to the DropButton itself by default.\"),\n    dropProps: _reactDesc.PropTypes.object.description('Any valid Drop prop.'),\n    onClose: _reactDesc.PropTypes.func.description('Callback for when the drop is closed'),\n    onOpen: _reactDesc.PropTypes.func.description('Callback for when the drop is opened'),\n    open: _reactDesc.PropTypes.bool.description(\"Whether the drop should be open or not. Setting this property does not\\n      influence user interaction after it has been rendered.\").defaultValue(false)\n  });\n  return DocumentedDropButton;\n};\n\nexports.doc = doc;","map":null,"metadata":{},"sourceType":"script"}