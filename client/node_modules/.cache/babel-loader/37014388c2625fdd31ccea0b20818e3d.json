{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useCallback, useContext, useMemo, useState } from 'react';\nimport styled, { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { DropButton } from '../DropButton';\nimport { Keyboard } from '../Keyboard';\nimport { Text } from '../Text';\nimport { normalizeColor } from '../../utils';\nvar ContainerBox = styled(Box).withConfig({\n  displayName: \"Menu__ContainerBox\",\n  componentId: \"sc-17fcys9-0\"\n})([\"max-height:inherit;@media screen and (-ms-high-contrast:active),(-ms-high-contrast:none){width:100%;}\", \";\"], function (props) {\n  return props.theme.menu.extend;\n});\n/* Notes on keyboard interactivity (based on W3) // For details reference: https://www.w3.org/TR/wai-aria-practices/#menu\n\nTo open menu when menu button is focused:\n- Space/Enter/Up arrow/Down arrow will open menu\n\nTo navigate within menu:\n- Up/down arrow keys can be used and will loop through options\n(keeping focus within the Menu)\n- Tab can be used, but once the last menu item is reached, Tab will close the\nMenu and continue through page content.\n\nTo close the menu:\n- Tabbing beyond the first or last menu item.\n- Esc will close the menu\n- Select a menu item\n\nTo make a selection:\n- Enter key is pressed.\n- Space is pressed.\n*/\n\nvar Menu = /*#__PURE__*/forwardRef(function (props, ref) {\n  var a11yTitle = props.a11yTitle,\n      children = props.children,\n      disabled = props.disabled,\n      dropAlign = props.dropAlign,\n      dropBackground = props.dropBackground,\n      dropProps = props.dropProps,\n      dropTarget = props.dropTarget,\n      justifyContent = props.justifyContent,\n      icon = props.icon,\n      items = props.items,\n      label = props.label,\n      messages = props.messages,\n      onKeyDown = props.onKeyDown,\n      open = props.open,\n      plain = props.plain,\n      size = props.size,\n      rest = _objectWithoutPropertiesLoose(props, [\"a11yTitle\", \"children\", \"disabled\", \"dropAlign\", \"dropBackground\", \"dropProps\", \"dropTarget\", \"justifyContent\", \"icon\", \"items\", \"label\", \"messages\", \"onKeyDown\", \"open\", \"plain\", \"size\"]);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n  var iconColor = normalizeColor(theme.menu.icons.color || 'control', theme);\n  var align = dropProps.align || dropAlign;\n  var controlButtonIndex = useMemo(function () {\n    if (align.top === 'top') return -1;\n    if (align.bottom === 'bottom') return items.length;\n    return undefined;\n  }, [align, items]); // Keeps track of whether menu options should be mirrored\n  // when there's not enough space below DropButton. This state\n  // is modified on /Drop/DropContainer.js.\n\n  var _useState = useState(),\n      alignControlMirror = _useState[0],\n      setAlignControlMirror = _useState[1];\n\n  var buttonRefs = {};\n  var constants = useMemo(function () {\n    return {\n      none: 'none',\n      tab: 9,\n      // Menu control button included on top of menu items\n      controlTop: align.top === 'top' || undefined,\n      // Menu control button included on the bottom of menu items\n      controlBottom: align.bottom === 'bottom' || undefined,\n      controlButtonIndex: controlButtonIndex\n    };\n  }, [align, controlButtonIndex]);\n\n  var _useState2 = useState(constants.none),\n      activeItemIndex = _useState2[0],\n      setActiveItemIndex = _useState2[1];\n\n  var _useState3 = useState(open || false),\n      isOpen = _useState3[0],\n      setOpen = _useState3[1];\n\n  var MenuIcon = isOpen && theme.menu.icons.up ? theme.menu.icons.up : theme.menu.icons.down;\n  var onDropClose = useCallback(function () {\n    setActiveItemIndex(constants.none);\n    setOpen(false);\n  }, [constants.none]);\n  var onDropOpen = useCallback(function () {\n    setOpen(true);\n  }, []);\n\n  var onSelectMenuItem = function onSelectMenuItem(event) {\n    if (isOpen) {\n      if (activeItemIndex >= 0) {\n        event.preventDefault();\n        event.stopPropagation();\n        buttonRefs[activeItemIndex].click();\n      }\n    } else {\n      onDropOpen();\n    }\n  };\n\n  var isTab = function isTab(event) {\n    return event.keyCode === constants.tab || event.which === constants.tab;\n  };\n\n  var onNextMenuItem = function onNextMenuItem(event) {\n    event.preventDefault();\n\n    if (!isOpen) {\n      onDropOpen();\n    } else if (isTab(event) && (!constants.controlBottom && activeItemIndex === items.length - 1 || constants.controlBottom && activeItemIndex === controlButtonIndex)) {\n      // User has reached end of the menu, this tab will close\n      // the menu drop because there are no more \"next items\" to access\n      onDropClose();\n    } else {\n      var index;\n\n      if ( // This checks if the user has reached the end of the menu.\n      // In the case the the menu control button is located at the\n      // bottom of the menu, it checks if the user has reached the button.\n      // Otherwise, it checks if the user is at the last menu item.\n      constants.controlBottom && activeItemIndex === controlButtonIndex || !constants.controlBottom && activeItemIndex === items.length - 1 || activeItemIndex === constants.none) {\n        // place focus on the first menu item\n        index = 0;\n      } else {\n        index = activeItemIndex + 1;\n      }\n\n      setActiveItemIndex(index);\n      buttonRefs[index].focus();\n    }\n  };\n\n  var onPreviousMenuItem = function onPreviousMenuItem(event) {\n    event.preventDefault();\n\n    if (!isOpen) {\n      onDropOpen();\n    } else if (isTab(event) && (constants.controlTop && activeItemIndex === controlButtonIndex || !constants.controlTop && activeItemIndex - 1 < 0)) {\n      // User has reached beginning of the menu, this tab will close\n      // the menu drop because there are no more \"previous items\" to access\n      onDropClose();\n    } else {\n      var index;\n\n      if (activeItemIndex - 1 < 0) {\n        if (constants.controlTop && activeItemIndex - 1 === controlButtonIndex) {\n          index = items.length;\n        } else {\n          index = items.length - 1;\n        }\n      } else {\n        index = activeItemIndex - 1;\n      }\n\n      setActiveItemIndex(index);\n      buttonRefs[index].focus();\n    }\n  };\n\n  var menuIcon = icon !== false ? icon !== true && icon || /*#__PURE__*/React.createElement(MenuIcon, {\n    color: iconColor,\n    size: size\n  }) : null;\n  var buttonProps = {\n    plain: plain,\n    size: size\n  };\n  var content;\n\n  if (children) {\n    content = children;\n  } else if (!theme.button[\"default\"]) {\n    content = /*#__PURE__*/React.createElement(Box, {\n      direction: \"row\",\n      justify: justifyContent,\n      align: \"center\",\n      pad: \"small\",\n      gap: label && icon !== false ? 'small' : undefined\n    }, /*#__PURE__*/React.createElement(Text, {\n      size: size\n    }, label), menuIcon);\n  } else {\n    // when a theme has theme.button.default, keep content as\n    // undefined so we can rely on Button label & icon props\n    buttonProps = {\n      icon: menuIcon,\n      label: label,\n      plain: plain,\n      reverse: true,\n      size: size\n    };\n    content = undefined;\n  }\n\n  var controlMirror = /*#__PURE__*/React.createElement(Box, {\n    flex: false\n  }, /*#__PURE__*/React.createElement(Button, _extends({\n    ref: function ref(r) {\n      // make it accessible at the end of all menu items\n      buttonRefs[items.length] = r;\n    },\n    a11yTitle: a11yTitle || messages.closeMenu || 'Close Menu',\n    active: activeItemIndex === controlButtonIndex,\n    focusIndicator: false,\n    hoverIndicator: \"background\",\n    onClick: onDropClose,\n    onFocus: function onFocus() {\n      return setActiveItemIndex(controlButtonIndex);\n    } // On first tab into menu, the control button should not\n    // be able to receive tab focus because the focus should\n    // go to the first menu item instead.\n    ,\n    tabIndex: activeItemIndex === constants.none ? '-1' : undefined\n  }, buttonProps), typeof content === 'function' ? function () {\n    return content(_extends({}, props, {\n      drop: true\n    }));\n  } : content));\n  return /*#__PURE__*/React.createElement(Keyboard, {\n    onDown: onNextMenuItem,\n    onUp: onPreviousMenuItem,\n    onEnter: onSelectMenuItem,\n    onSpace: onSelectMenuItem,\n    onEsc: onDropClose,\n    onTab: onDropClose,\n    onKeyDown: onKeyDown\n  }, /*#__PURE__*/React.createElement(DropButton, _extends({\n    ref: ref\n  }, rest, buttonProps, {\n    a11yTitle: a11yTitle || messages.openMenu || 'Open Menu',\n    onAlign: setAlignControlMirror,\n    disabled: disabled,\n    dropAlign: align,\n    dropTarget: dropTarget,\n    dropProps: dropProps,\n    open: isOpen,\n    onOpen: onDropOpen,\n    onClose: onDropClose,\n    dropContent: /*#__PURE__*/React.createElement(Keyboard, {\n      onTab: function onTab(event) {\n        return event.shiftKey ? onPreviousMenuItem(event) : onNextMenuItem(event);\n      },\n      onEnter: onSelectMenuItem\n    }, /*#__PURE__*/React.createElement(ContainerBox, {\n      background: dropBackground || theme.menu.background\n    }, alignControlMirror === 'top' && align.top === 'top' ? controlMirror : undefined, /*#__PURE__*/React.createElement(Box, {\n      overflow: \"auto\"\n    }, items.map(function (item, index) {\n      // Determine whether the label is done as a child or\n      // as an option Button kind property.\n      var child = !theme.button.option ? /*#__PURE__*/React.createElement(Box, {\n        align: \"start\",\n        pad: \"small\",\n        direction: \"row\",\n        gap: item.gap\n      }, item.reverse && item.label, item.icon, !item.reverse && item.label) : undefined; // if we have a child, turn on plain, and hoverIndicator\n\n      return (\n        /*#__PURE__*/\n        // eslint-disable-next-line react/no-array-index-key\n        React.createElement(Box, {\n          key: index,\n          flex: false\n        }, /*#__PURE__*/React.createElement(Button, _extends({\n          ref: function ref(r) {\n            buttonRefs[index] = r;\n          },\n          onFocus: function onFocus() {\n            return setActiveItemIndex(index);\n          },\n          active: activeItemIndex === index,\n          focusIndicator: false,\n          plain: !child ? undefined : true,\n          align: \"start\",\n          kind: !child ? 'option' : undefined,\n          hoverIndicator: !child ? undefined : 'background'\n        }, !child ? item : _extends({}, item, {\n          gap: undefined,\n          icon: undefined,\n          label: undefined,\n          reverse: undefined\n        }), {\n          onClick: function onClick() {\n            if (item.onClick) {\n              item.onClick.apply(item, arguments);\n            }\n\n            if (item.close !== false) {\n              onDropClose();\n            }\n          }\n        }), child))\n      );\n    })), alignControlMirror === 'bottom' || align.bottom === 'bottom' ? controlMirror : undefined))\n  }), content));\n});\nMenu.defaultProps = {\n  dropAlign: {\n    top: 'top',\n    left: 'left'\n  },\n  dropProps: {},\n  items: [],\n  messages: {\n    openMenu: 'Open Menu',\n    closeMenu: 'Close Menu'\n  },\n  justifyContent: 'start'\n};\nMenu.displayName = 'Menu';\nvar MenuDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  MenuDoc = require('./doc').doc(Menu); // eslint-disable-line global-require\n}\n\nvar MenuWrapper = MenuDoc || Menu;\nexport { MenuWrapper as Menu };","map":null,"metadata":{},"sourceType":"module"}