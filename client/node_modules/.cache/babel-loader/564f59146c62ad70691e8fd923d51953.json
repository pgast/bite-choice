{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.getHoverIndicatorStyle = exports.selectedStyle = exports.activeStyle = exports.backgroundStyle = exports.backgroundIsDark = exports.normalizeBackground = void 0;\n\nvar _styledComponents = require(\"styled-components\");\n\nvar _colors = require(\"./colors\"); // evalStyle() converts a styled-components item into a string\n\n\nvar evalStyle = function evalStyle(arg, theme) {\n  if (arg && Array.isArray(arg) && typeof arg[0] === 'function') {\n    return arg[0]({\n      theme: theme\n    });\n  }\n\n  return arg;\n};\n\nvar normalizeBackground = function normalizeBackground(background, theme) {\n  // If the background has a light or dark object, use that\n  var result = background;\n\n  if (background) {\n    if (theme.dark && background.dark && typeof background.dark !== 'boolean') {\n      result = background.dark;\n    } else if (!theme.dark && background.light && typeof background.light !== 'boolean') {\n      result = background.light;\n    }\n\n    result = evalStyle(result, theme);\n  }\n\n  return result;\n};\n\nexports.normalizeBackground = normalizeBackground;\n\nvar backgroundIsDark = function backgroundIsDark(backgroundArg, theme) {\n  var background = normalizeBackground(backgroundArg, theme);\n  var result;\n\n  if (background) {\n    if (typeof background === 'object') {\n      var color = background.color,\n          dark = background.dark,\n          opacity = background.opacity;\n\n      if (typeof dark === 'boolean') {\n        result = dark;\n      } else if (color && ( // weak opacity means we keep the existing darkness\n      !opacity || opacity !== 'weak')) {\n        var backgroundColor = (0, _colors.normalizeColor)(background.color, theme);\n\n        if (backgroundColor) {\n          result = (0, _colors.colorIsDark)(backgroundColor);\n        }\n      }\n    } else {\n      var _color = (0, _colors.normalizeColor)(background, theme);\n\n      if (_color) {\n        result = (0, _colors.colorIsDark)(_color);\n      }\n    }\n  }\n\n  return result;\n};\n\nexports.backgroundIsDark = backgroundIsDark;\n\nvar backgroundStyle = function backgroundStyle(backgroundArg, theme, textColorArg) {\n  // for Grommet component, if the background isn't defined, don't set it\n  if (backgroundArg === undefined) {\n    return undefined;\n  } // If the background has a light or dark object, use that\n\n\n  var background = normalizeBackground(backgroundArg, theme);\n  var textColor = textColorArg || theme.global.colors.text;\n\n  if (typeof background === 'object') {\n    var styles = [];\n\n    if (background.image) {\n      var color;\n\n      if (background.dark === false) {\n        color = (0, _colors.normalizeColor)(textColor.light || textColor, theme);\n      } else if (background.dark) {\n        color = (0, _colors.normalizeColor)(textColor.dark || textColor, theme);\n      } else if (!textColorArg) {\n        color = 'inherit';\n      }\n\n      styles.push((0, _styledComponents.css)([\"background-image:\", \";background-repeat:\", \";background-position:\", \";background-size:\", \";color:\", \";\"], background.image, background.repeat || 'no-repeat', background.position || 'center center', background.size || 'cover', color));\n    }\n\n    if (background.color) {\n      var _color2 = (0, _colors.normalizeColor)(background.color, theme);\n\n      var backgroundColor = (0, _colors.getRGBA)(_color2, background.opacity === true ? theme.global.opacity.medium : theme.global.opacity[background.opacity] || background.opacity) || _color2;\n\n      styles.push((0, _styledComponents.css)([\"background-color:\", \";\", \"\"], backgroundColor, (!background.opacity || background.opacity !== 'weak') && \"color: \" + (0, _colors.normalizeColor)(textColor[background.dark || (0, _colors.colorIsDark)(backgroundColor) ? 'dark' : 'light'] || textColor, theme) + \";\"));\n    }\n\n    if (background.dark === false) {\n      styles.push((0, _styledComponents.css)([\"color:\", \";\"], textColor.light || textColor));\n    } else if (background.dark) {\n      styles.push((0, _styledComponents.css)([\"color:\", \";\"], textColor.dark || textColor));\n    }\n\n    return styles;\n  }\n\n  if (background) {\n    if (background.lastIndexOf('url', 0) === 0) {\n      return (0, _styledComponents.css)([\"background:\", \" no-repeat center center;background-size:cover;\"], background);\n    }\n\n    var _backgroundColor = (0, _colors.normalizeColor)(background, theme);\n\n    if (_backgroundColor) {\n      var backgroundDark = (0, _colors.colorIsDark)(_backgroundColor);\n      return (0, _styledComponents.css)([\"background:\", \";color:\", \";\"], _backgroundColor, (0, _colors.normalizeColor)(textColor[backgroundDark || backgroundDark === undefined && theme.dark ? 'dark' : 'light'] || textColor, theme));\n    }\n  }\n\n  return undefined;\n};\n\nexports.backgroundStyle = backgroundStyle;\nvar activeStyle = (0, _styledComponents.css)([\"\", \"\"], function (props) {\n  return backgroundStyle((0, _colors.normalizeColor)(props.theme.global.active.background, props.theme), props.theme, props.theme.global.active.color);\n});\nexports.activeStyle = activeStyle;\nvar selectedStyle = (0, _styledComponents.css)([\"\", \"\"], function (props) {\n  return backgroundStyle((0, _colors.normalizeColor)(props.theme.global.selected.background, props.theme), props.theme, props.theme.global.selected.color);\n});\nexports.selectedStyle = selectedStyle;\n\nvar getHoverIndicatorStyle = function getHoverIndicatorStyle(hoverIndicator, theme) {\n  var background;\n\n  if (hoverIndicator === true || hoverIndicator === 'background') {\n    background = theme.global.hover.background;\n  } else {\n    background = hoverIndicator;\n  }\n\n  return (0, _styledComponents.css)([\"\", \"\"], backgroundStyle(background, theme, theme.global.hover.color));\n};\n\nexports.getHoverIndicatorStyle = getHoverIndicatorStyle;","map":null,"metadata":{},"sourceType":"script"}