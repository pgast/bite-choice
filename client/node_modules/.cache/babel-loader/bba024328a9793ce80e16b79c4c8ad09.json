{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useMemo } from 'react';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Text } from '../Text';\nimport { Swatch } from './Swatch';\n\nvar Legend = function Legend(_ref) {\n  var activeProperty = _ref.activeProperty,\n      seriesProp = _ref.series,\n      seriesStyles = _ref.seriesStyles,\n      setActiveProperty = _ref.setActiveProperty;\n  var series = useMemo(function () {\n    return seriesProp.filter(function (s) {\n      return seriesStyles[s.property];\n    });\n  }, [seriesProp, seriesStyles]);\n  var interactive = useMemo( // filter out properties that are used in point chart aspects\n  function () {\n    return series.filter(function (_ref2) {\n      var property = _ref2.property;\n      return !seriesStyles[property].aspect;\n    }).length > 1;\n  }, [series, seriesStyles]);\n  return /*#__PURE__*/React.createElement(Box, {\n    margin: {\n      top: 'small'\n    },\n    direction: \"row\",\n    wrap: true,\n    gap: \"small\"\n  }, series.map(function (_ref3) {\n    var property = _ref3.property,\n        label = _ref3.label;\n    var isActive = property === activeProperty;\n    var swatchProps = {};\n    var textProps = {};\n\n    if (activeProperty !== undefined) {\n      if (!isActive) {\n        // swatchProps.color = 'status-disabled';\n        textProps.color = 'text-xweak';\n      } else {\n        textProps.color = 'text-strong';\n      }\n    }\n\n    var content = /*#__PURE__*/React.createElement(Box, {\n      key: property,\n      direction: \"row\",\n      align: \"center\",\n      pad: {\n        horizontal: 'small',\n        vertical: 'xsmall'\n      },\n      gap: \"xsmall\"\n    }, /*#__PURE__*/React.createElement(Swatch, _extends({}, seriesStyles[property], swatchProps)), /*#__PURE__*/React.createElement(Text, textProps, label || property));\n\n    if (interactive) {\n      content = /*#__PURE__*/React.createElement(Button, {\n        key: property,\n        active: isActive,\n        onClick: function onClick() {\n          return setActiveProperty(isActive ? undefined : property);\n        },\n        hoverIndicator: true\n      }, content);\n    }\n\n    return content;\n  }));\n};\n\nexport { Legend };","map":null,"metadata":{},"sourceType":"module"}