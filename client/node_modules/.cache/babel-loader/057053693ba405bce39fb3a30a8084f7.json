{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useEffect, useState } from 'react';\nimport { Analog } from './Analog';\nimport { Digital } from './Digital';\nvar TIME_REGEXP = /T([0-9]{2}):([0-9]{2})(?::([0-9.,]{2,}))?/;\nvar DURATION_REGEXP = /^(-|\\+)?P.*T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?$/;\n\nvar parseTime = function parseTime(time, hourLimit) {\n  var result = {};\n\n  if (time) {\n    var match = DURATION_REGEXP.exec(time);\n\n    if (match) {\n      result.hours = parseFloat(match[2]);\n\n      if (hourLimit === 12) {\n        result.hours12 = result.hours > 12 ? result.hours - 12 : result.hours;\n      }\n\n      result.minutes = parseFloat(match[3]) || 0;\n      result.seconds = parseFloat(match[4]) || 0;\n      result.duration = true;\n    } else {\n      match = TIME_REGEXP.exec(time);\n\n      if (match) {\n        result.hours = parseFloat(match[1]);\n\n        if (hourLimit === 12) {\n          result.hours12 = result.hours > 12 ? result.hours - 12 : result.hours;\n        }\n\n        result.minutes = parseFloat(match[2]) || 0;\n        result.seconds = parseFloat(match[3]) || 0;\n      } else {\n        console.error(\"Grommet Clock cannot parse '\" + time + \"'\");\n      }\n    }\n  } else {\n    var date = new Date();\n    result.hours = date.getHours();\n    result.minutes = date.getMinutes();\n    result.seconds = date.getSeconds();\n  }\n\n  return result;\n};\n\nvar Clock = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var _ref$hourLimit = _ref.hourLimit,\n      hourLimit = _ref$hourLimit === void 0 ? 24 : _ref$hourLimit,\n      onChange = _ref.onChange,\n      _ref$precision = _ref.precision,\n      precision = _ref$precision === void 0 ? 'seconds' : _ref$precision,\n      _ref$run = _ref.run,\n      run = _ref$run === void 0 ? 'forward' : _ref$run,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 'medium' : _ref$size,\n      time = _ref.time,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'analog' : _ref$type,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"hourLimit\", \"onChange\", \"precision\", \"run\", \"size\", \"time\", \"type\"]);\n\n  var _useState = useState(parseTime(time, hourLimit)),\n      elements = _useState[0],\n      setElements = _useState[1];\n\n  useEffect(function () {\n    return setElements(parseTime(time, hourLimit));\n  }, [hourLimit, time]);\n  useEffect(function () {\n    var atDurationEnd = run === 'backward' && elements.duration && !elements.hours && !elements.minutes && !elements.seconds;\n\n    if (run && !atDurationEnd) {\n      // set the interval time based on the precision\n      var interval = 1000;\n      var increment = 'seconds';\n\n      if (precision !== 'seconds' && elements.seconds === 0) {\n        interval *= 60;\n        increment = 'minutes';\n\n        if (precision !== 'minutes' && elements.minutes === 0) {\n          interval *= 60;\n          increment = 'hours';\n        }\n      }\n\n      var timer = setInterval(function () {\n        var nextElements = _extends({}, elements); // adjust time based on precision\n\n\n        if (increment === 'seconds') {\n          if (run === 'backward') {\n            nextElements.seconds -= 1;\n          } else {\n            nextElements.seconds += 1;\n          }\n        } else if (increment === 'minutes') {\n          if (run === 'backward') {\n            nextElements.minutes -= 1;\n          } else {\n            nextElements.minutes += 1;\n          }\n        } else if (increment === 'hours') {\n          if (run === 'backward') {\n            nextElements.hours -= 1;\n          } else {\n            nextElements.hours += 1;\n          }\n        } // deal with overflows\n\n\n        if (nextElements.seconds >= 60) {\n          nextElements.minutes += Math.floor(nextElements.seconds / 60);\n          nextElements.seconds = 0;\n        } else if (nextElements.seconds < 0) {\n          nextElements.minutes += Math.floor(nextElements.seconds / 60);\n          nextElements.seconds = 59;\n        }\n\n        if (nextElements.minutes >= 60) {\n          nextElements.hours += Math.floor(nextElements.minutes / 60);\n          nextElements.minutes = 0;\n        } else if (nextElements.minutes < 0) {\n          nextElements.hours += Math.floor(nextElements.minutes / 60);\n          nextElements.minutes = 59;\n        }\n\n        if (nextElements.hours >= 24 || nextElements.hours < 0) {\n          nextElements.hours = 0;\n        }\n\n        if (hourLimit === 12) {\n          nextElements.hours12 = nextElements.hours > 12 ? nextElements.hours - 12 : nextElements.hours;\n        }\n\n        setElements(nextElements);\n\n        if (onChange) {\n          var e = nextElements;\n\n          if (e.duration) {\n            onChange(\"P\" + e.hours + \"H\" + e.minutes + \"M\" + e.seconds + \"S\");\n          } else {\n            onChange(\"T\" + e.hours + \":\" + e.minutes + \":\" + e.seconds);\n          }\n        }\n      }, interval);\n      return function () {\n        return clearInterval(timer);\n      };\n    }\n\n    return undefined;\n  }, [elements, hourLimit, onChange, precision, run]);\n  var content;\n\n  if (type === 'analog') {\n    content = /*#__PURE__*/React.createElement(Analog, _extends({\n      ref: ref,\n      elements: elements,\n      precision: precision,\n      size: size\n    }, rest));\n  } else if (type === 'digital') {\n    content = /*#__PURE__*/React.createElement(Digital, _extends({\n      ref: ref,\n      elements: elements,\n      precision: precision,\n      run: run,\n      size: size\n    }, rest));\n  }\n\n  return content;\n});\nClock.displayName = 'Clock';\nvar ClockDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  ClockDoc = require('./doc').doc(Clock); // eslint-disable-line global-require\n}\n\nvar ClockWrapper = ClockDoc || Clock;\nexport { ClockWrapper as Clock };","map":null,"metadata":{},"sourceType":"module"}