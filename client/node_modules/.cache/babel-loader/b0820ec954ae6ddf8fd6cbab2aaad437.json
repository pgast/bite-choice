{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/RandomView.js\";\nimport React, { Component } from 'react';\nimport Results from './Results';\nimport ListItem from './ListItem'; // LOGIC COMPONENT THAT FETCHES DATA IN RANDOM MODE AND PASSES DATA TO RESULT VIEW\n\nvar RandomView =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RandomView, _Component);\n\n  function RandomView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, RandomView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(RandomView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: [],\n      randomPicks: []\n    };\n\n    _this.getIndeces = function (businesses) {\n      var indeces = []; // HANDLE IF DATA RETURNED IS LESS THAN 3\n\n      if (businesses.length < 3) {\n        indeces.push(0, 1);\n      } else {\n        while (indeces.length < 3) {\n          var number = Math.floor(Math.random() * Math.floor(businesses.length));\n\n          if (!indeces.includes(number)) {\n            indeces.push(number);\n          }\n        }\n\n        ;\n      }\n\n      return indeces;\n    };\n\n    _this.randomPicks = function () {\n      var results = _this.getIndeces(_this.state.data).map(function (el) {\n        return _this.state.data[el];\n      });\n\n      return results;\n    };\n\n    _this.getBusinesses =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, businesses;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('/getRandom');\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              businesses = _context.sent;\n\n              _this.setState({\n                data: businesses.businesses\n              });\n\n              _this.setState({\n                randomPicks: _this.randomPicks()\n              });\n\n              console.log(_this.state);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _this;\n  }\n\n  _createClass(RandomView, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.getBusinesses();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Results, {\n        location: this.props.location,\n        custom: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return RandomView;\n}(Component);\n\n;\nexport default RandomView;","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/RandomView.js"],"names":["React","Component","Results","ListItem","RandomView","state","data","randomPicks","getIndeces","businesses","indeces","length","push","number","Math","floor","random","includes","results","map","el","getBusinesses","fetch","response","json","setState","console","log","props","location"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAEA;;IAEMC,U;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,WAAW,EAAE;AAFP,K;;UAMRC,U,GAAa,UAACC,UAAD,EAAgB;AAC3B,UAAIC,OAAO,GAAG,EAAd,CAD2B,CAG3B;;AACA,UAAID,UAAU,CAACE,MAAX,GAAoB,CAAxB,EAA2B;AACzBD,QAAAA,OAAO,CAACE,IAAR,CAAa,CAAb,EAAgB,CAAhB;AACD,OAFD,MAEO;AAEL,eAAOF,OAAO,CAACC,MAAR,GAAiB,CAAxB,EAA2B;AACzB,cAAIE,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAWN,UAAU,CAACE,MAAtB,CAA3B,CAAb;;AAEA,cAAI,CAACD,OAAO,CAACO,QAAR,CAAiBJ,MAAjB,CAAL,EAA+B;AAC7BH,YAAAA,OAAO,CAACE,IAAR,CAAaC,MAAb;AACD;AACF;;AAAA;AAEF;;AAED,aAAOH,OAAP;AACD,K;;UAGDH,W,GAAc,YAAM;AAClB,UAAIW,OAAO,GAAG,MAAKV,UAAL,CAAgB,MAAKH,KAAL,CAAWC,IAA3B,EAAiCa,GAAjC,CAAqC,UAAAC,EAAE,EAAI;AACvD,eAAO,MAAKf,KAAL,CAAWC,IAAX,CAAgBc,EAAhB,CAAP;AACD,OAFa,CAAd;;AAIA,aAAOF,OAAP;AACD,K;;UAGDG,a;;;;6BAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACSC,KAAK,CAAC,YAAD,CADd;;AAAA;AACRC,cAAAA,QADQ;AAAA;AAAA,qBAEWA,QAAQ,CAACC,IAAT,EAFX;;AAAA;AAERf,cAAAA,UAFQ;;AAGd,oBAAKgB,QAAL,CAAc;AAAEnB,gBAAAA,IAAI,EAAEG,UAAU,CAACA;AAAnB,eAAd;;AACA,oBAAKgB,QAAL,CAAc;AAAElB,gBAAAA,WAAW,EAAE,MAAKA,WAAL;AAAf,eAAd;;AAEAmB,cAAAA,OAAO,CAACC,GAAR,CAAY,MAAKtB,KAAjB;;AANc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;yCASM;AACpB,WAAKgB,aAAL;AACD;;;6BAEQ;AACP,aAAO,oBAAC,OAAD;AAAS,QAAA,QAAQ,EAAE,KAAKO,KAAL,CAAWC,QAA9B;AAAwC,QAAA,MAAM,EAAE,KAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;;EArDsB5B,S;;AAsDxB;AAED,eAAeG,UAAf","sourcesContent":["import React, { Component } from 'react';\nimport Results from './Results';\nimport ListItem from './ListItem';\n\n// LOGIC COMPONENT THAT FETCHES DATA IN RANDOM MODE AND PASSES DATA TO RESULT VIEW\n\nclass RandomView extends Component {\n  state = {\n    data: [],\n    randomPicks: []\n  };\n\n  // FUNCTION THAT CREATES 3 RANDOM NUMBERS WITH DATA ARRAY LENGTH\n  getIndeces = (businesses) => {\n    let indeces = [];\n\n    // HANDLE IF DATA RETURNED IS LESS THAN 3\n    if (businesses.length < 3) {\n      indeces.push(0, 1);\n    } else {\n\n      while (indeces.length < 3) {\n        let number = Math.floor(Math.random() * Math.floor(businesses.length));\n  \n        if (!indeces.includes(number)) {\n          indeces.push(number);\n        }\n      };\n\n    }\n\n    return indeces;\n  };\n\n  // SETS 3 RANDOM PICKS AND ADDS THEM TO STATE\n  randomPicks = () => {\n    let results = this.getIndeces(this.state.data).map(el => {\n      return this.state.data[el];\n    });\n\n    return results;\n  };\n\n  // API GET REQUEST FETCHES 3 RANDOM LOCAL BUSINESSES FROM COORDINATES\n  getBusinesses = async () => {\n    const response = await fetch('/getRandom');\n    const businesses = await response.json();\n    this.setState({ data: businesses.businesses });\n    this.setState({ randomPicks: this.randomPicks() });\n\n    console.log(this.state);\n  };\n\n  componentWillMount () {\n    this.getBusinesses();\n  };\n\n  render() {\n    return <Results location={this.props.location} custom={false} />\n  }; \n};\n\nexport default RandomView;\n\n\n"]},"metadata":{},"sourceType":"module"}