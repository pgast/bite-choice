{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Pablo/Documents/React/bitechoice/v7/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Pablo/Documents/React/bitechoice/v7/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v7/client/src/components/RandomView.js\";\nimport React, { useContext, useEffect } from 'react';\nimport ResultView from './ResultView';\nimport { Store } from '../Store';\n\nvar randomView = function randomView(_ref) {\n  var location = _ref.location,\n      toggleUi = _ref.toggleUi,\n      data = _ref.data,\n      locationInput = _ref.locationInput;\n\n  var _useContext = useContext(Store),\n      dispatch = _useContext.dispatch; //useEffect(() => fetchRandomData(), []);\n  //const fetchRandomData = () => dispatch ({ type: 'FETCH_RANDOM_DATA', payload: locationInput });\n\n\n  var coordinates = {\n    lat: '',\n    lon: ''\n  };\n\n  var fetchRandomData = function fetchRandomData() {\n    return dispatch({\n      type: 'FETCH_RANDOM_DATA',\n      payload: {\n        locationInput: locationInput,\n        coordinates: coordinates\n      }\n    });\n  };\n\n  var geoFindMe =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var success, error;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              error = function _ref4() {\n                return \"error\";\n              };\n\n              success =\n              /*#__PURE__*/\n              function () {\n                var _ref3 = _asyncToGenerator(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee(position) {\n                  var lat, lon;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return position.coords.latitude;\n\n                        case 2:\n                          lat = _context.sent;\n                          _context.next = 5;\n                          return position.coords.longitude;\n\n                        case 5:\n                          lon = _context.sent;\n                          return _context.abrupt(\"return\", {\n                            lat: lat,\n                            lon: lon\n                          });\n\n                        case 7:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function success(_x) {\n                  return _ref3.apply(this, arguments);\n                };\n              }();\n\n              if (navigator.geolocation) {\n                _context2.next = 6;\n                break;\n              }\n\n              error();\n              _context2.next = 8;\n              break;\n\n            case 6:\n              _context2.next = 8;\n              return navigator.geolocation.getCurrentPosition(success, error);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function geoFindMe() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (!locationInput) {\n      coordinates = geoFindMe();\n    }\n\n    fetchRandomData();\n  }, []);\n  return React.createElement(ResultView, {\n    location: location,\n    toggleUi: toggleUi,\n    isCustom: false,\n    randomSorting: true,\n    data: data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  });\n};\n\nexport default randomView;","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v7/client/src/components/RandomView.js"],"names":["React","useContext","useEffect","ResultView","Store","randomView","location","toggleUi","data","locationInput","dispatch","coordinates","lat","lon","fetchRandomData","type","payload","geoFindMe","error","success","position","coords","latitude","longitude","navigator","geolocation","getCurrentPosition"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,KAAT,QAAsB,UAAtB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAiD;AAAA,MAA9CC,QAA8C,QAA9CA,QAA8C;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;AAAA,MAA1BC,IAA0B,QAA1BA,IAA0B;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;;AAAA,oBAC7CR,UAAU,CAACG,KAAD,CADmC;AAAA,MAC1DM,QAD0D,eAC1DA,QAD0D,EAElE;AACA;;;AAEA,MAAIC,WAAW,GAAG;AAAEC,IAAAA,GAAG,EAAE,EAAP;AAAWC,IAAAA,GAAG,EAAE;AAAhB,GAAlB;;AACA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,WAAMJ,QAAQ,CAAE;AAAEK,MAAAA,IAAI,EAAE,mBAAR;AAA6BC,MAAAA,OAAO,EAAE;AAAEP,QAAAA,aAAa,EAAbA,aAAF;AAAiBE,QAAAA,WAAW,EAAXA;AAAjB;AAAtC,KAAF,CAAd;AAAA,GAAxB;;AAEA,MAAMM,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAG;AAAA,mBAOPC,KAPO;AAAA;AAAA;AAAA;AAAA;AAOPA,cAAAA,KAPO,oBAOC;AACf,uBAAO,OAAP;AACD,eATe;;AACVC,cAAAA,OADU;AAAA;AAAA;AAAA;AAAA;AAAA,yCACA,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACIA,QAAQ,CAACC,MAAT,CAAgBC,QADpB;;AAAA;AACRV,0BAAAA,GADQ;AAAA;AAAA,iCAEIQ,QAAQ,CAACC,MAAT,CAAgBE,SAFpB;;AAAA;AAERV,0BAAAA,GAFQ;AAAA,2DAGP;AAAED,4BAAAA,GAAG,EAAHA,GAAF;AAAOC,4BAAAA,GAAG,EAAHA;AAAP,2BAHO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADA;;AAAA,gCACVM,OADU;AAAA;AAAA;AAAA;;AAAA,kBAWXK,SAAS,CAACC,WAXC;AAAA;AAAA;AAAA;;AAYdP,cAAAA,KAAK;AAZS;AAAA;;AAAA;AAAA;AAAA,qBAcRM,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCP,OAAzC,EAAkDD,KAAlD,CAdQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATD,SAAS;AAAA;AAAA;AAAA,KAAf;;AAmBAf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAG,CAACO,aAAJ,EAAmB;AACjBE,MAAAA,WAAW,GAAGM,SAAS,EAAvB;AACD;;AACDH,IAAAA,eAAe;AAChB,GALQ,EAKN,EALM,CAAT;AAOA,SACE,oBAAC,UAAD;AACE,IAAA,QAAQ,EAAER,QADZ;AAEE,IAAA,QAAQ,EAAEC,QAFZ;AAGE,IAAA,QAAQ,EAAE,KAHZ;AAIE,IAAA,aAAa,MAJf;AAKE,IAAA,IAAI,EAAEC,IALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CA3CD;;AA6CA,eAAeH,UAAf","sourcesContent":["import React, { useContext, useEffect } from 'react';\n\nimport ResultView from './ResultView';\nimport { Store } from '../Store';\n\nconst randomView = ({ location, toggleUi, data, locationInput }) => {\n  const { dispatch } = useContext(Store);\n  //useEffect(() => fetchRandomData(), []);\n  //const fetchRandomData = () => dispatch ({ type: 'FETCH_RANDOM_DATA', payload: locationInput });\n\n  let coordinates = { lat: '', lon: '' };\n  const fetchRandomData = () => dispatch ({ type: 'FETCH_RANDOM_DATA', payload: { locationInput, coordinates } })\n\n  const geoFindMe = async () => {\n    const success = async (position) => {\n      const lat = await position.coords.latitude;\n      const lon = await position.coords.longitude;\n      return { lat, lon };\n    }\n  \n    function error() {\n      return \"error\";\n    }\n  \n    if (!navigator.geolocation) {\n      error();\n    } else {\n      await navigator.geolocation.getCurrentPosition(success, error);\n    }\n  }\n\n\n  useEffect(() => {\n    if(!locationInput) {\n      coordinates = geoFindMe();\n    }\n    fetchRandomData();\n  }, []);\n\n  return (\n    <ResultView \n      location={location} \n      toggleUi={toggleUi}\n      isCustom={false} \n      randomSorting\n      data={data} \n    />\n  );\n};\n\nexport default randomView;"]},"metadata":{},"sourceType":"module"}