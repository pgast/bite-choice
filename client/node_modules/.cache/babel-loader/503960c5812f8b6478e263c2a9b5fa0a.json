{"ast":null,"code":"import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils';\nexport var doc = function doc(DateInput) {\n  var DocumentedDateInput = describe(DateInput).availableAt(getAvailableAtBadge('DateInput', 'Input')).description('A control to input a single date or a date range.').usage(\"import { DateInput } from 'grommet';\\n<DateInput id='item' name='item' />\").intrinsicElement('div');\n  DocumentedDateInput.propTypes = {\n    buttonProps: PropTypes.shape({}).description(\"Any properties to pass on to the underlying DropButton\\n      when not inline and no format.\"),\n    calendarProps: PropTypes.shape({}).description('Any properties to pass on to the underlying Calendar.'),\n    defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).description('The default date or date range value in ISO8601 format.'),\n    dropProps: PropTypes.shape({}).description('Any properties to pass on to the underlying Drop when not inline.').defaultValue({\n      align: {\n        top: 'bottom',\n        left: 'left'\n      }\n    }),\n    format: PropTypes.string.description(\"The date format to use. If not specified, the date value will not\\n      be displayed as a text string and the user will not be able to enter\\n      a date by typing. For example: 'mm/dd/yyyy', or for a range:\\n      'mm/dd/yyyy-mm/dd/yyyy'. This property should be used when in a Form.\"),\n    id: PropTypes.string.description('The id of the input.'),\n    inline: PropTypes.bool.description(\"Whether the calendar should always be shown or via a Drop when\\n      interacting with the input.\").defaultValue(false),\n    inputProps: PropTypes.shape({}).description(\"Any properties to pass on to the underlying MaskedInput\\n      when there is a format.\"),\n    name: PropTypes.string.description(\"The name of the input.\\n      This property is required when used within FormField.\"),\n    onChange: PropTypes.func.description(\"Function that will be called when the user types or selects a date.\\n      The updated value will be available via 'event.value'.\"),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).description('The date or date range value(s) in ISO8601 format.')\n  };\n  return DocumentedDateInput;\n};\nexport var themeDoc = {\n  'dateInput.icon.size': {\n    description: \"The size of the Calendar icon\",\n    type: 'string',\n    defaultValue: '24px'\n  }\n};","map":null,"metadata":{},"sourceType":"module"}