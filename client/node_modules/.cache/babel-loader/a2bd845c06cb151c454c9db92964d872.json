{"ast":null,"code":"import _toConsumableArray from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/CustomView.js\";\nimport React, { Component } from 'react'; // TODAS LAS OPCIONES DAR LOS PRIMEROS 3 DEL ARRAY\n// EN OPCION RANDOM SI SE DAN 3 RANDOM DE LA LISTA EN ACOMODO RANDOM\n\nvar CustomView =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CustomView, _Component);\n\n  function CustomView() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CustomView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CustomView)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: [],\n      searchTerms: [],\n      currentTerm: '',\n      sortBy: 'best_match'\n    };\n\n    _this.searchTerm =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(el) {\n        var response, businesses;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch('/search', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    term: el,\n                    sort_by: _this.state.sortBy === 'random' ? _this.randomSorting() : _this.state.sortBy\n                  })\n                });\n\n              case 2:\n                response = _context.sent;\n                _context.next = 5;\n                return response.json();\n\n              case 5:\n                businesses = _context.sent;\n                console.log(businesses.businesses);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    _this.fetchData = function (e) {\n      e.preventDefault(); //let data = [];\n      // if search terms is empty\n\n      if (_this.state.searchTerms.length === 0) {\n        // CONDUCT FETCHING OF DATA AS ALWAYS\n        //let info = this.searchTerm('');\n        //data.push(info.businesses);\n        _this.searchTerm('');\n      } else {\n        // ELSE = TERMS ARRAY IS NOT EMPTY\n        // LOOP THROUGH SEARCH TERMS ARRAY AND PERFORM FETCHING FOR EACH ELEMENT\n        // GUARDAR DATOS DE CADA FETCHING NESTED EN ARRAYS [[], [], []];\n        _this.state.searchTerms.forEach(function (el) {\n          //let info = await this.searchTerm(el);\n          //data.push(info.businesses);\n          _this.searchTerm(el);\n        });\n      }\n    };\n\n    _this.handleInputChange = function (e) {\n      var target = e.target;\n      var name = target.name;\n\n      if (target.type === 'number') {\n        _this.setState(_defineProperty({}, name, parseInt(target.value)));\n      } else {\n        _this.setState(_defineProperty({}, name, target.value));\n      }\n    };\n\n    _this.randomSorting = function () {\n      var criteria = ['best_match', 'rating', 'review_count', 'distance'];\n      var index = Math.floor(Math.random() * Math.floor(criteria.length));\n      return criteria[index];\n    };\n\n    _this.addTerm = function (e) {\n      e.preventDefault();\n\n      if (_this.state.currentTerm !== '') {\n        if (_this.state.searchTerms.length < 3) {\n          var newTerms = _toConsumableArray(_this.state.searchTerms);\n\n          newTerms.push(_this.state.currentTerm);\n\n          _this.setState({\n            searchTerms: newTerms\n          });\n\n          _this.setState({\n            currentTerm: ''\n          });\n        }\n\n        ;\n      }\n\n      ;\n    };\n\n    _this.removeTerm = function (inputIndex) {\n      var newSearchTerms = _toConsumableArray(_this.state.searchTerms).filter(function (el, inx) {\n        return inx !== inputIndex;\n      });\n\n      _this.setState({\n        searchTerms: newSearchTerms\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(CustomView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Custom View\"), React.createElement(\"form\", {\n        onSubmit: this.fetchData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Name:\", React.createElement(\"input\", {\n        type: \"text\",\n        name: \"currentTerm\",\n        value: this.state.currentTerm,\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.addTerm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Add term\")), this.state.searchTerms.map(function (el, index) {\n        return React.createElement(\"p\", {\n          key: index,\n          onClick: function onClick() {\n            return _this2.removeTerm(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, el);\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"Sort by:\", React.createElement(\"select\", {\n        name: \"sortBy\",\n        value: this.state.sortBy,\n        onChange: this.handleInputChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"best_match\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Best Match\"), React.createElement(\"option\", {\n        value: \"rating\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"Rating\"), React.createElement(\"option\", {\n        value: \"review_count\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Review Count\"), React.createElement(\"option\", {\n        value: \"distance\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"Distance\"), React.createElement(\"option\", {\n        value: \"random\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Random\"))), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return console.log(_this2.state);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, \"Get state\"));\n    }\n  }]);\n\n  return CustomView;\n}(Component);\n\n;\nexport default CustomView;","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/CustomView.js"],"names":["React","Component","CustomView","state","data","searchTerms","currentTerm","sortBy","searchTerm","el","fetch","method","headers","body","JSON","stringify","term","sort_by","randomSorting","response","json","businesses","console","log","fetchData","e","preventDefault","length","forEach","handleInputChange","target","name","type","setState","parseInt","value","criteria","index","Math","floor","random","addTerm","newTerms","push","removeTerm","inputIndex","newSearchTerms","filter","inx","map"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;AACA;;IAEMC,U;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,WAAW,EAAE,EAFP;AAGNC,MAAAA,WAAW,EAAE,EAHP;AAINC,MAAAA,MAAM,EAAC;AAJD,K;;UAwBRC,U;;;;;+BAAa,iBAAMC,EAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACYC,KAAK,CAAC,SAAD,EAAY;AACtCC,kBAAAA,MAAM,EAAE,MAD8B;AAEtCC,kBAAAA,OAAO,EAAE;AAAE,oCAAgB;AAAlB,mBAF6B;AAGtCC,kBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,oBAAAA,IAAI,EAAEP,EADa;AAEnBQ,oBAAAA,OAAO,EAAE,MAAKd,KAAL,CAAWI,MAAX,KAAsB,QAAtB,GAAiC,MAAKW,aAAL,EAAjC,GAAwD,MAAKf,KAAL,CAAWI;AAFzD,mBAAf;AAHgC,iBAAZ,CADjB;;AAAA;AACLY,gBAAAA,QADK;AAAA;AAAA,uBAScA,QAAQ,CAACC,IAAT,EATd;;AAAA;AASLC,gBAAAA,UATK;AAUXC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,UAAU,CAACA,UAAvB;;AAVW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;UAgBbG,S,GAAY,UAAAC,CAAC,EAAI;AACfA,MAAAA,CAAC,CAACC,cAAF,GADe,CAEf;AAGA;;AACA,UAAI,MAAKvB,KAAL,CAAWE,WAAX,CAAuBsB,MAAvB,KAAkC,CAAtC,EAAyC;AACvC;AACA;AACA;AACA,cAAKnB,UAAL,CAAgB,EAAhB;AAED,OAND,MAMO;AACL;AACA;AACA;AAEA,cAAKL,KAAL,CAAWE,WAAX,CAAuBuB,OAAvB,CAA+B,UAAAnB,EAAE,EAAI;AACnC;AACA;AACA,gBAAKD,UAAL,CAAgBC,EAAhB;AACD,SAJD;AAKD;AAGF,K;;UAWDoB,iB,GAAoB,UAAAJ,CAAC,EAAI;AACvB,UAAMK,MAAM,GAAGL,CAAC,CAACK,MAAjB;AACA,UAAMC,IAAI,GAAGD,MAAM,CAACC,IAApB;;AAEA,UAAID,MAAM,CAACE,IAAP,KAAgB,QAApB,EAA8B;AAC5B,cAAKC,QAAL,qBAAiBF,IAAjB,EAAwBG,QAAQ,CAACJ,MAAM,CAACK,KAAR,CAAhC;AACD,OAFD,MAEO;AACL,cAAKF,QAAL,qBAAiBF,IAAjB,EAAwBD,MAAM,CAACK,KAA/B;AACD;AACF,K;;UAGDjB,a,GAAgB,YAAM;AACpB,UAAIkB,QAAQ,GAAG,CAAC,YAAD,EAAe,QAAf,EAAyB,cAAzB,EAAyC,UAAzC,CAAf;AACA,UAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAACT,MAApB,CAA3B,CAAZ;AACA,aAAOS,QAAQ,CAACC,KAAD,CAAf;AACD,K;;UAGDI,O,GAAU,UAAAhB,CAAC,EAAI;AACbA,MAAAA,CAAC,CAACC,cAAF;;AACA,UAAI,MAAKvB,KAAL,CAAWG,WAAX,KAA2B,EAA/B,EAAmC;AACjC,YAAI,MAAKH,KAAL,CAAWE,WAAX,CAAuBsB,MAAvB,GAAgC,CAApC,EAAuC;AACrC,cAAIe,QAAQ,sBAAO,MAAKvC,KAAL,CAAWE,WAAlB,CAAZ;;AACAqC,UAAAA,QAAQ,CAACC,IAAT,CAAc,MAAKxC,KAAL,CAAWG,WAAzB;;AAEA,gBAAK2B,QAAL,CAAc;AAAE5B,YAAAA,WAAW,EAAEqC;AAAf,WAAd;;AACA,gBAAKT,QAAL,CAAc;AAAE3B,YAAAA,WAAW,EAAE;AAAf,WAAd;AACD;;AAAA;AACF;;AAAA;AACF,K;;UAGDsC,U,GAAa,UAAAC,UAAU,EAAI;AACzB,UAAIC,cAAc,GAAG,mBAAI,MAAK3C,KAAL,CAAWE,WAAf,EAA4B0C,MAA5B,CAAmC,UAACtC,EAAD,EAAKuC,GAAL;AAAA,eAAaA,GAAG,KAAKH,UAArB;AAAA,OAAnC,CAArB;;AACA,YAAKZ,QAAL,CAAc;AAAE5B,QAAAA,WAAW,EAAEyC;AAAf,OAAd;AACD,K;;;;;;;6BAEQ;AAAA;;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAIE;AAAM,QAAA,QAAQ,EAAE,KAAKtB,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,IAAI,EAAC,aAFP;AAGE,QAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWG,WAHpB;AAIE,QAAA,QAAQ,EAAE,KAAKuB,iBAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,EAQE;AAAQ,QAAA,OAAO,EAAE,KAAKY,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARF,CADF,EAaI,KAAKtC,KAAL,CAAWE,WAAX,CAAuB4C,GAAvB,CAA2B,UAACxC,EAAD,EAAK4B,KAAL,EAAe;AACxC,eAAO;AAAG,UAAA,GAAG,EAAEA,KAAR;AAAe,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACO,UAAL,CAAgBP,KAAhB,CAAN;AAAA,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAwD5B,EAAxD,CAAP;AACD,OAFD,CAbJ,EAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,KAAK,EAAE,KAAKN,KAAL,CAAWI,MAAxC;AAAgD,QAAA,QAAQ,EAAE,KAAKsB,iBAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGE;AAAQ,QAAA,KAAK,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHF,EAIE;AAAQ,QAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,EAKE;AAAQ,QAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,CAFF,CAlBF,EA6BE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA7BF,CAJF,EAqDE;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAMP,OAAO,CAACC,GAAR,CAAY,MAAI,CAACpB,KAAjB,CAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBArDF,CADF;AAyDD;;;;EA7KsBF,S;;AA8KxB;AAED,eAAeC,UAAf","sourcesContent":["import React, { Component } from 'react';\n\n// TODAS LAS OPCIONES DAR LOS PRIMEROS 3 DEL ARRAY\n// EN OPCION RANDOM SI SE DAN 3 RANDOM DE LA LISTA EN ACOMODO RANDOM\n\nclass CustomView extends Component {\n  state = {\n    data: [],\n    searchTerms: [],\n    currentTerm: '',\n    sortBy:'best_match',\n  };\n\n  //////// FUNCION QUE USABA Y QUE FUNCIONABA PARA UN SOLO TERMINO ///////\n  // GET REQUEST WITH TERM\n  // searchTerm = async e => {\n  //   e.preventDefault();\n  //   const response = await fetch('/search', {\n  //     method: 'POST',\n  //     headers: { 'Content-Type': 'application/json' },\n  //     body: JSON.stringify({ \n  //       term: this.state.searchTerms,\n  //       sort_by: this.state.sortBy === 'random' ? this.randomSorting() : this.state.sortBy\n  //     })\n  //   });\n  //   const businesses = await response.json();\n  //   this.setState({ data: businesses.businesses });    \n  //   this.setState({ randomPicks: this.randomPicks() });\n  // };\n\n  searchTerm = async el => {\n    const response = await fetch('/search', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ \n        term: el,\n        sort_by: this.state.sortBy === 'random' ? this.randomSorting() : this.state.sortBy\n      })\n    });\n    const businesses = await response.json();\n    console.log(businesses.businesses);\n  };\n\n\n\n\n  fetchData = e => {\n    e.preventDefault();\n    //let data = [];\n\n\n    // if search terms is empty\n    if (this.state.searchTerms.length === 0) {\n      // CONDUCT FETCHING OF DATA AS ALWAYS\n      //let info = this.searchTerm('');\n      //data.push(info.businesses);\n      this.searchTerm('');\n\n    } else {\n      // ELSE = TERMS ARRAY IS NOT EMPTY\n      // LOOP THROUGH SEARCH TERMS ARRAY AND PERFORM FETCHING FOR EACH ELEMENT\n      // GUARDAR DATOS DE CADA FETCHING NESTED EN ARRAYS [[], [], []];\n      \n      this.state.searchTerms.forEach(el => {\n        //let info = await this.searchTerm(el);\n        //data.push(info.businesses);\n        this.searchTerm(el);\n      });\n    }\n\n\n  };\n\n\n\n\n\n\n\n\n\n  // UPDATE STATE WITH USER FORM INPUTS\n  handleInputChange = e => {\n    const target = e.target;\n    const name = target.name;\n\n    if (target.type === 'number') {\n      this.setState({ [name]: parseInt(target.value) });\n    } else {\n      this.setState({ [name]: target.value });\n    }\n  };\n\n  // RETURNS A RANDOM SEARCH CRITERIA WHEN USER SELECTS RANDOM\n  randomSorting = () => {\n    let criteria = ['best_match', 'rating', 'review_count', 'distance'];\n    let index = Math.floor(Math.random() * Math.floor(criteria.length));\n    return criteria[index];\n  };\n\n  // ADDS TERM TO STATE\n  addTerm = e => {\n    e.preventDefault();\n    if (this.state.currentTerm !== '') {\n      if (this.state.searchTerms.length < 3) {\n        let newTerms = [...this.state.searchTerms];\n        newTerms.push(this.state.currentTerm);\n  \n        this.setState({ searchTerms: newTerms });\n        this.setState({ currentTerm: '' });\n      };\n    }; \n  };\n\n  // REMOVES TERM FROM STATE\n  removeTerm = inputIndex => {\n    let newSearchTerms = [...this.state.searchTerms].filter((el, inx) => inx !== inputIndex);    \n    this.setState({ searchTerms: newSearchTerms });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Custom View</h1>\n\n\n        <form onSubmit={this.fetchData}>\n          <label>\n            Name:\n            <input \n              type=\"text\" \n              name=\"currentTerm\" \n              value={this.state.currentTerm} \n              onChange={this.handleInputChange} \n            />\n            <button onClick={this.addTerm}>Add term</button>\n          </label>\n\n          {\n            this.state.searchTerms.map((el, index) => {\n              return <p key={index} onClick={() => this.removeTerm(index)} >{el}</p>\n            })\n          }\n\n          <label>\n            Sort by:\n            <select name=\"sortBy\" value={this.state.sortBy} onChange={this.handleInputChange} >\n              <option value=\"best_match\">Best Match</option>\n              <option value=\"rating\">Rating</option>\n              <option value=\"review_count\">Review Count</option>\n              <option value=\"distance\">Distance</option>\n              <option value=\"random\">Random</option>\n            </select>\n          </label>\n\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n\n        {\n\n          // IF SORT BY ESTA EN RANDOM => RETURN 3 RANDOM PICKS\n\n          // this.state.randomPicks.map((el, index) => {\n          //   return <ListItem key={index} item={el} />\n          // })\n\n          // SI NO, DAR LOS 3 PRIMEROS DEL ARRAY REGRESADO\n\n          // this.state.data.forEach(el => {\n          //   el.map((element, index) => {\n          //     return <ListItem key={index} item={element} />\n          //   });\n          // })\n        }\n\n        <button onClick={() => console.log(this.state)}>Get state</button>\n      </div>\n    );\n  };\n};\n\nexport default CustomView;"]},"metadata":{},"sourceType":"module"}