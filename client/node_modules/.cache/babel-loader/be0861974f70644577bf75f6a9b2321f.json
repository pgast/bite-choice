{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext, useMemo } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { parseMetricToNum } from '../../utils';\nimport { defaultProps } from '../../default-props';\nimport { StyledAnalog, StyledHour, StyledMinute, StyledSecond } from './StyledClock'; // this will serve both minutes and hours (360 / 6)\n\nvar ANGLE_UNIT = 6; // 360 / 12\n\nvar HOUR_ANGLE_UNIT = 30;\n\nvar getClockDimensions = function getClockDimensions(theme) {\n  return {\n    size: parseMetricToNum(theme.clock.analog.size.medium),\n    secondSize: parseMetricToNum(theme.clock.analog.second.size),\n    minuteSize: parseMetricToNum(theme.clock.analog.minute.size),\n    hourSize: parseMetricToNum(theme.clock.analog.hour.size)\n  };\n};\n\nvar getClockState = function getClockState(_ref) {\n  var hours = _ref.hours,\n      minutes = _ref.minutes,\n      seconds = _ref.seconds;\n  var hour12 = hours > 12 ? hours - 12 : hours;\n  var minuteAngle = minutes * ANGLE_UNIT;\n  return {\n    // offset hour angle by half of the minute angle so that it gets closer\n    // to the next hour\n    hourAngle: hour12 * HOUR_ANGLE_UNIT + minutes / 2,\n    minuteAngle: minuteAngle,\n    secondAngle: seconds * ANGLE_UNIT\n  };\n};\n\nvar Analog = /*#__PURE__*/forwardRef(function (_ref2, ref) {\n  var elements = _ref2.elements,\n      precision = _ref2.precision,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"elements\", \"precision\"]);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var _useMemo = useMemo(function () {\n    return getClockState(elements);\n  }, [elements]),\n      hourAngle = _useMemo.hourAngle,\n      minuteAngle = _useMemo.minuteAngle,\n      secondAngle = _useMemo.secondAngle;\n\n  var _useMemo2 = useMemo(function () {\n    return getClockDimensions(theme);\n  }, [theme]),\n      size = _useMemo2.size,\n      secondSize = _useMemo2.secondSize,\n      minuteSize = _useMemo2.minuteSize,\n      hourSize = _useMemo2.hourSize;\n\n  var halfSize = size / 2;\n  var secondHand;\n\n  if (precision === 'seconds') {\n    secondHand = /*#__PURE__*/React.createElement(StyledSecond, {\n      x1: halfSize,\n      y1: halfSize,\n      x2: halfSize,\n      y2: secondSize,\n      stroke: \"#000000\",\n      strokeLinecap: theme.clock.analog.second.shape,\n      style: {\n        transform: \"rotate(\" + secondAngle + \"deg)\",\n        transformOrigin: halfSize + \"px \" + halfSize + \"px\"\n      }\n    });\n  }\n\n  var minuteHand;\n\n  if (precision === 'seconds' || precision === 'minutes') {\n    minuteHand = /*#__PURE__*/React.createElement(StyledMinute, {\n      x1: halfSize,\n      y1: halfSize,\n      x2: halfSize,\n      y2: minuteSize,\n      stroke: \"#000000\",\n      strokeLinecap: theme.clock.analog.minute.shape,\n      style: {\n        transform: \"rotate(\" + minuteAngle + \"deg)\",\n        transformOrigin: halfSize + \"px \" + halfSize + \"px\"\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(StyledAnalog, _extends({\n    ref: ref,\n    version: \"1.1\",\n    width: size,\n    height: size,\n    preserveAspectRatio: \"xMidYMid meet\",\n    viewBox: \"0 0 \" + size + \" \" + size\n  }, rest), secondHand, minuteHand, /*#__PURE__*/React.createElement(StyledHour, {\n    x1: halfSize,\n    y1: halfSize,\n    x2: halfSize,\n    y2: hourSize,\n    stroke: \"#000000\",\n    strokeLinecap: theme.clock.analog.hour.shape,\n    style: {\n      transform: \"rotate(\" + hourAngle + \"deg)\",\n      transformOrigin: halfSize + \"px \" + halfSize + \"px\"\n    }\n  }));\n});\nAnalog.displayName = 'Analog';\nexport { Analog };","map":null,"metadata":{},"sourceType":"module"}