{"ast":null,"code":"import _classCallCheck from \"/Users/Pablo/Documents/React/bitechoice/v5/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Pablo/Documents/React/bitechoice/v5/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Pablo/Documents/React/bitechoice/v5/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Pablo/Documents/React/bitechoice/v5/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Pablo/Documents/React/bitechoice/v5/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v5/client/src/App.js\";\nimport React, { Component } from 'react';\nimport { Grommet, Box } from 'grommet';\nimport Request from 'request';\nimport MainView from './components/MainView';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      coordinates: {\n        lat: '',\n        lon: ''\n      },\n      fetchSuccess: '',\n      location: ''\n    };\n\n    _this.geoFindMe = function () {\n      function success(position) {\n        return {\n          lat: position.coords.latitude,\n          lon: position.coords.longitude\n        };\n      }\n\n      function error() {\n        return \"fetchError\";\n      }\n\n      if (!navigator.geolocation) {\n        return \"fetchError\";\n      } else {\n        navigator.geolocation.getCurrentPosition(success, error);\n      }\n    };\n\n    _this.fetchLocation = function () {\n      Request.get({\n        \"url\": \"http://ip-api.com/jsn/\"\n      }, function (error, response, body) {\n        if (error || JSON.parse(body).status === \"fail\") {\n          _this.setState({\n            fetchSuccess: false\n          });\n        }\n\n        return JSON.parse(body).city;\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var location = this.fetchLocation();\n\n      if (this.state.fetchSuccess) {\n        this.setState({\n          coordinates: this.geoFindMe(),\n          fetchSuccess: true,\n          location: location\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    // componentWillMount() {\n    //   Request.get({ \"url\": \"http://ip-api.com/jsn/\" }, (error, response, body) => {\n    //       if (error) {\n    //         this.setState({ fetchSuccess: false }); \n    //         this.setState({ fetchSucces: false }); \n    //         return console.dir(error);    \n    //       }\n    //       if (JSON.parse(body).status === \"fail\") {\n    //         this.setState({ fetchSuccess: false });\n    //       } else {\n    //         const location = JSON.parse(body).city;\n    //         const lat = JSON.parse(body).lat;\n    //         const lon = JSON.parse(body).lon;\n    //         this.setState({ \n    //           location, \n    //           fetchSuccess: true,\n    //           coordinates: { lat, lon } \n    //         });\n    //       }\n    //   });\n    // };\n    value: function render() {\n      return React.createElement(Grommet, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(Box, {\n        width: \"100vw\",\n        height: \"100vh\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(MainView, {\n        fetchSuccess: this.state.fetchSuccess,\n        coordinates: this.state.coordinates,\n        location: this.state.location,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v5/client/src/App.js"],"names":["React","Component","Grommet","Box","Request","MainView","App","state","coordinates","lat","lon","fetchSuccess","location","geoFindMe","success","position","coords","latitude","longitude","error","navigator","geolocation","getCurrentPosition","fetchLocation","get","response","body","JSON","parse","status","setState","city"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,EAAkBC,GAAlB,QAA6B,SAA7B;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,OAAOC,QAAP,MAAqB,uBAArB;;IAEMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,WAAW,EAAE;AAAEC,QAAAA,GAAG,EAAE,EAAP;AAAWC,QAAAA,GAAG,EAAE;AAAhB,OADP;AAENC,MAAAA,YAAY,EAAE,EAFR;AAGNC,MAAAA,QAAQ,EAAE;AAHJ,K;;UAMRC,S,GAAY,YAAM;AAChB,eAASC,OAAT,CAAiBC,QAAjB,EAA2B;AACzB,eAAO;AACLN,UAAAA,GAAG,EAAEM,QAAQ,CAACC,MAAT,CAAgBC,QADhB;AAELP,UAAAA,GAAG,EAAEK,QAAQ,CAACC,MAAT,CAAgBE;AAFhB,SAAP;AAID;;AAED,eAASC,KAAT,GAAiB;AACf,eAAO,YAAP;AACD;;AAED,UAAI,CAACC,SAAS,CAACC,WAAf,EAA4B;AAC1B,eAAO,YAAP;AACD,OAFD,MAEO;AACLD,QAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCR,OAAzC,EAAkDK,KAAlD;AACD;AACF,K;;UAEDI,a,GAAgB,YAAM;AACpBnB,MAAAA,OAAO,CAACoB,GAAR,CAAY;AAAE,eAAO;AAAT,OAAZ,EAAiD,UAACL,KAAD,EAAQM,QAAR,EAAkBC,IAAlB,EAA2B;AAC1E,YAAIP,KAAK,IAAIQ,IAAI,CAACC,KAAL,CAAWF,IAAX,EAAiBG,MAAjB,KAA4B,MAAzC,EAAiD;AAC/C,gBAAKC,QAAL,CAAc;AAAEnB,YAAAA,YAAY,EAAE;AAAhB,WAAd;AACD;;AACC,eAAOgB,IAAI,CAACC,KAAL,CAAWF,IAAX,EAAiBK,IAAxB;AACH,OALD;AAMD,K;;;;;;;yCAGoB;AACnB,UAAInB,QAAQ,GAAG,KAAKW,aAAL,EAAf;;AAEA,UAAG,KAAKhB,KAAL,CAAWI,YAAd,EAA4B;AAC1B,aAAKmB,QAAL,CAAc;AACZtB,UAAAA,WAAW,EAAE,KAAKK,SAAL,EADD;AAEZF,UAAAA,YAAY,EAAE,IAFF;AAGZC,UAAAA,QAAQ,EAARA;AAHY,SAAd;AAKD;AAEF;;;AAKD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;6BAES;AACP,aACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,KAAK,EAAC,OAAX;AAAmB,QAAA,MAAM,EAAC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AACE,QAAA,YAAY,EAAE,KAAKL,KAAL,CAAWI,YAD3B;AAEE,QAAA,WAAW,EAAE,KAAKJ,KAAL,CAAWC,WAF1B;AAGE,QAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWK,QAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADF;AAWD;;;;EAvFeX,S;;AAyFlB,eAAeK,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Grommet, Box } from 'grommet';\nimport Request from 'request';\n\nimport MainView from './components/MainView';\n\nclass App extends Component {\n  state = {\n    coordinates: { lat: '', lon: '' },\n    fetchSuccess: '',\n    location: ''\n  };\n\n  geoFindMe = () => {\n    function success(position) {\n      return {\n        lat: position.coords.latitude,\n        lon: position.coords.longitude\n      };\n    }\n  \n    function error() {\n      return \"fetchError\";\n    }\n  \n    if (!navigator.geolocation) {\n      return \"fetchError\";\n    } else {\n      navigator.geolocation.getCurrentPosition(success, error);\n    }\n  }\n\n  fetchLocation = () => {\n    Request.get({ \"url\": \"http://ip-api.com/jsn/\" }, (error, response, body) => {\n      if (error || JSON.parse(body).status === \"fail\") {\n        this.setState({ fetchSuccess: false });\n      }\n        return JSON.parse(body).city;\n    });\n  }\n  \n\n  componentWillMount() {\n    let location = this.fetchLocation();\n\n    if(this.state.fetchSuccess) {\n      this.setState({\n        coordinates: this.geoFindMe(),\n        fetchSuccess: true,\n        location\n      })\n    }\n\n  };\n\n  \n\n\n  // componentWillMount() {\n  //   Request.get({ \"url\": \"http://ip-api.com/jsn/\" }, (error, response, body) => {\n  //       if (error) {\n  //         this.setState({ fetchSuccess: false }); \n  //         this.setState({ fetchSucces: false }); \n  //         return console.dir(error);    \n  //       }\n  //       if (JSON.parse(body).status === \"fail\") {\n  //         this.setState({ fetchSuccess: false });\n  //       } else {\n  //         const location = JSON.parse(body).city;\n  //         const lat = JSON.parse(body).lat;\n  //         const lon = JSON.parse(body).lon;\n  //         this.setState({ \n  //           location, \n  //           fetchSuccess: true,\n  //           coordinates: { lat, lon } \n  //         });\n  //       }\n  //   });\n\n  // };\n\n  render() {\n    return (\n      <Grommet>\n        <Box width=\"100vw\" height=\"100vh\">\n          <MainView \n            fetchSuccess={this.state.fetchSuccess}\n            coordinates={this.state.coordinates}\n            location={this.state.location} \n          />\n        </Box>\n      </Grommet>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}