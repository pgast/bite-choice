{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nimport { themeDocUtils } from '../../utils/themeDocUtils';\nexport var doc = function doc(MaskedInput) {\n  var DocumentedMaskedInput = describe(MaskedInput).availableAt(getAvailableAtBadge('MaskedInput', 'Input')).description('An input field with formalized syntax.').usage(\"import { MaskedInput } from 'grommet';\\n<MaskedInput id='item' name='item' />\").intrinsicElement('input');\n  DocumentedMaskedInput.propTypes = {\n    a11yTitle: PropTypes.string.description('Custom title to be used by screen readers.'),\n    dropHeight: PropTypes.oneOfType([PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('The height of the drop container.'),\n    dropProps: PropTypes.object.description('Any valid Drop prop.'),\n    icon: PropTypes.element.description(\"An optional icon to show. This could be used to provide an\\n      indication of what kind of input is expected, like an email icon,\\n      or what the input will be used for, like a search icon.\"),\n    id: PropTypes.string.description('The id attribute of the input.'),\n    name: PropTypes.string.description('The name attribute of the input.'),\n    onChange: PropTypes.func.description(\"Function that will be called when the user types or pastes text.\"),\n    onBlur: PropTypes.func.description(\"Function that will be called when the user leaves the field.\"),\n    mask: PropTypes.arrayOf(PropTypes.shape({\n      length: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.number)]),\n      fixed: PropTypes.string,\n      options: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),\n      regexp: PropTypes.shape({}) // RegExp\n\n    })).description(\"Describes the structure of the mask. If a regexp is provided, it should\\n      allow both the final full string element as well as partial strings\\n      as the user types characters one by one. When using regexp to match number\\n      values make sure that the option values are numbers as well.\"),\n    reverse: PropTypes.bool.description(\"Whether an icon should be reversed so that the icon is at the\\n      end of the input.\"),\n    size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'medium', 'large', 'xlarge']), PropTypes.string]).description('The size of the text.'),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).description(\"What text to put in the input. The caller should ensure that it\\n      is initially valid with respect to the mask.\")\n  };\n  return DocumentedMaskedInput;\n};\nexport var themeDoc = _extends({\n  'global.hover.background': {\n    description: 'The background style when hovering.',\n    type: 'string | { color: string, opacity: string }',\n    defaultValue: \"{ color: 'active', opacity: 'medium' }\"\n  },\n  'global.hover.color': {\n    description: 'The text color when hovering.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: \"{ dark: 'white', light: 'black' }\"\n  },\n  'maskedInput.extend': {\n    description: 'Any additional style for MaskedInput.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'maskedInput.container.extend': {\n    description: \"Any additional style for the container surrounding the input \\n    and, if present, icon.\",\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'text.medium': {\n    description: 'The size of the text for MaskedInput.',\n    type: 'string',\n    defaultValue: '18px'\n  },\n  'maskedInput.disabled.opacity': {\n    description: 'The opacity when the MaskedInput is disabled.',\n    type: 'number | string',\n    defaultValue: undefined\n  }\n}, themeDocUtils.disabledStyle, themeDocUtils.focusStyle, themeDocUtils.placeholderStyle, themeDocUtils.inputStyle);","map":null,"metadata":{},"sourceType":"module"}