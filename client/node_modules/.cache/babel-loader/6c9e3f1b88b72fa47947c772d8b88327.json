{"ast":null,"code":"import _slicedToArray from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v1/client/src/Store.js\";\nimport React, { useReducer, createContext } from \"react\";\nvar initialState = {\n  customView: {\n    resultsMode: false,\n    searchTerms: [],\n    sortBy: 'best_match'\n  },\n  data: []\n};\n\nvar randomSorting = function randomSorting() {\n  var criteria = ['best_match', 'rating', 'review_count', 'distance'];\n  var index = Math.floor(Math.random() * Math.floor(criteria.length));\n  return criteria[index];\n};\n\nvar searchTerm =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(term, sort_by) {\n    var response, businesses;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('/search', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                term: term,\n                sort_by: sort_by\n              })\n            });\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            businesses = _context.sent;\n            return _context.abrupt(\"return\", businesses.businesses);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function searchTerm(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar fetchData =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(searchInputs) {\n    var sorting, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            sorting = searchInputs.sortBy === 'random' ? randomSorting() : searchInputs.sortBy;\n            _context2.next = 3;\n            return [];\n\n          case 3:\n            data = _context2.sent;\n\n            if (searchInputs.searchTerms.length === 0) {\n              searchTerm(null, sorting).then(function (response) {\n                data.push(response);\n              });\n            } else {\n              searchInputs.searchTerms.forEach(function (el) {\n                searchTerm(el, sorting).then(function (response) {\n                  data.push(response);\n                });\n              });\n            }\n\n            return _context2.abrupt(\"return\", data);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function fetchData(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar fetchRandomData =\n/*#__PURE__*/\nfunction () {\n  var _ref3 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    var response, businesses;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return fetch('/getRandom');\n\n          case 2:\n            response = _context3.sent;\n            _context3.next = 5;\n            return response.json();\n\n          case 5:\n            businesses = _context3.sent;\n            return _context3.abrupt(\"return\", businesses.businesses);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function fetchRandomData() {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nfunction reducer(state, action) {\n  var customViewCopy = _objectSpread({}, state.customView);\n\n  switch (action.type) {\n    case 'TOGGLE':\n      customViewCopy.resultsMode = !customViewCopy.resultsMode;\n      return _objectSpread({}, state, {\n        customView: customViewCopy\n      });\n\n    case 'SUBMIT_SEARCH':\n      // UPDATE SEARCH TERMS IN STATE\n      customViewCopy.searchTerms = action.payload.searchTerms;\n      customViewCopy.sortBy = action.payload.sortBy;\n      customViewCopy.resultsMode = true;\n      return _objectSpread({}, state, {\n        customView: customViewCopy,\n        data: fetchData(action.payload)\n      });\n\n    case 'FETCH_RANDOM_DATA':\n      return _objectSpread({}, state, {\n        data: fetchRandomData()\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport function StoreProvider(props) {\n  var _useReducer = useReducer(reducer, initialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var value = {\n    state: state,\n    dispatch: dispatch\n  };\n  return React.createElement(Store.Provider, {\n    value: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, props.children);\n}\nexport var Store = createContext();","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v1/client/src/Store.js"],"names":["React","useReducer","createContext","initialState","customView","resultsMode","searchTerms","sortBy","data","randomSorting","criteria","index","Math","floor","random","length","searchTerm","term","sort_by","fetch","method","headers","body","JSON","stringify","response","json","businesses","fetchData","searchInputs","sorting","then","push","forEach","el","fetchRandomData","reducer","state","action","customViewCopy","type","payload","StoreProvider","props","dispatch","value","children","Store"],"mappings":"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","sourcesContent":["import React, { useReducer, createContext } from \"react\";\n\nconst initialState = {\n  customView: {\n    resultsMode: false,\n    searchTerms: [],\n    sortBy: 'best_match'\n  },\n  data: []\n}\n\n\n\nconst randomSorting = () => {\n  let criteria = ['best_match', 'rating', 'review_count', 'distance'];\n  let index = Math.floor(Math.random() * Math.floor(criteria.length));\n  return criteria[index];\n};\n\n\nconst searchTerm = async (term, sort_by) => {\n  const response = await fetch('/search', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ \n      term,\n      sort_by\n    })\n  });\n  const businesses = await response.json();\n  return businesses.businesses;\n};\n\n\n  const fetchData = async (searchInputs) => {\n    let sorting = searchInputs.sortBy === 'random' ? randomSorting() : searchInputs.sortBy\n    let data = await [];\n    if (searchInputs.searchTerms.length === 0) {\n      searchTerm(null, sorting).then(response => {\n        data.push(response);\n      });\n    } else {      \n      searchInputs.searchTerms.forEach(el => {\n        searchTerm(el, sorting).then(response => {\n          data.push(response);\n        });\n      });\n    }\n    return data;\n  };\n\n\n  const fetchRandomData = async () => {\n    const response = await fetch('/getRandom');\n    const businesses = await response.json();\n    return businesses.businesses;\n  };\n\n\n\nfunction reducer(state, action) {\n  let customViewCopy = {...state.customView};\n\n  switch(action.type) {\n    case 'TOGGLE':\n      customViewCopy.resultsMode = !customViewCopy.resultsMode;\n      return { ...state, customView: customViewCopy};\n\n    case 'SUBMIT_SEARCH':\n      // UPDATE SEARCH TERMS IN STATE\n      customViewCopy.searchTerms = action.payload.searchTerms; \n      customViewCopy.sortBy = action.payload.sortBy;\n      customViewCopy.resultsMode = true;\n\n      return {...state, customView: customViewCopy, data: fetchData(action.payload)};\n\n    case 'FETCH_RANDOM_DATA':\n      return {...state, data: fetchRandomData()};\n      \n    default:\n      return state;\n  }\n}\n\nexport function StoreProvider(props) {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const value = {state, dispatch}\n  return <Store.Provider value={value}>{props.children}</Store.Provider>\n}\n\nexport const Store = createContext();"]},"metadata":{},"sourceType":"module"}