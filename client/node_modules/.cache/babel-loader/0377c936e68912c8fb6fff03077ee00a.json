{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/CustomView.js\";\n\nimport React, { useContext } from 'react';\nimport { Store } from '../Store';\nimport ResultView from './ResultView';\nimport CustomForm from './CustomForm';\nimport { prependOnceListener } from 'cluster';\n\nvar customView = function customView(_ref) {\n  var location = _ref.location;\n\n  var _useContext = useContext(Store),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch; // TEST FUNCTION NOT IN PRODUCTION\n\n\n  var changeMode = function changeMode(e) {\n    e.preventDefault();\n    return dispatch({\n      type: 'TOGGLE',\n      payload: 'toggle'\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Custom View\"), state.customView.resultsMode ? React.createElement(ResultView, {\n    location: _this.props.location,\n    data: state.data,\n    isCustom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }) : React.createElement(CustomForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: function onClick(e) {\n      return changeMode(e);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Toggle Results Mode\"), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return console.log(state);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"GeT results\"));\n};\n\nexport default customView;","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/CustomView.js"],"names":["React","useContext","Store","ResultView","CustomForm","prependOnceListener","customView","location","state","dispatch","changeMode","e","preventDefault","type","payload","resultsMode","props","data","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,mBAAT,QAAoC,SAApC;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,oBACPN,UAAU,CAACC,KAAD,CADH;AAAA,MAC3BM,KAD2B,eAC3BA,KAD2B;AAAA,MACpBC,QADoB,eACpBA,QADoB,EAGnC;;;AACA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,CAAD,EAAO;AACxBA,IAAAA,CAAC,CAACC,cAAF;AACA,WAAOH,QAAQ,CAAC;AACdI,MAAAA,IAAI,EAAE,QADQ;AAEdC,MAAAA,OAAO,EAAE;AAFK,KAAD,CAAf;AAID,GAND;;AAQE,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAGGN,KAAK,CAACF,UAAN,CAAiBS,WAAjB,GACG,oBAAC,UAAD;AACA,IAAA,QAAQ,EAAE,KAAI,CAACC,KAAL,CAAWT,QADrB;AAEA,IAAA,IAAI,EAAEC,KAAK,CAACS,IAFZ;AAGA,IAAA,QAAQ,EAAE,IAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,GAKG,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARN,EAUE;AAAQ,IAAA,OAAO,EAAE,iBAACN,CAAD;AAAA,aAAOD,UAAU,CAACC,CAAD,CAAjB;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAVF,EAWE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMO,OAAO,CAACC,GAAR,CAAYX,KAAZ,CAAN;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAXF,CADF;AAeH,CA3BD;;AA6BA,eAAeF,UAAf","sourcesContent":["import React, { useContext } from 'react';\nimport { Store } from '../Store';\nimport ResultView from './ResultView';\nimport CustomForm from './CustomForm';\nimport { prependOnceListener } from 'cluster';\n\nconst customView = ({ location }) => {\n  const { state, dispatch } = useContext(Store);\n\n  // TEST FUNCTION NOT IN PRODUCTION\n  const changeMode = (e) => {\n    e.preventDefault()\n    return dispatch({\n      type: 'TOGGLE',\n      payload: 'toggle'\n    })\n  }\n\n    return (\n      <div>\n        <h1>Custom View</h1>\n\n        {state.customView.resultsMode \n          ? <ResultView \n            location={this.props.location}\n            data={state.data}\n            isCustom={true}/> \n          : <CustomForm />}\n\n        <button onClick={(e) => changeMode(e)}>Toggle Results Mode</button>\n        <button onClick={() => console.log(state)}>GeT results</button>\n      </div>\n    );\n};\n\nexport default customView;"]},"metadata":{},"sourceType":"module"}