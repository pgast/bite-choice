{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.TextInput = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _styledComponents = _interopRequireWildcard(require(\"styled-components\"));\n\nvar _defaultProps = require(\"../../default-props\");\n\nvar _Box = require(\"../Box\");\n\nvar _Button = require(\"../Button\");\n\nvar _Drop = require(\"../Drop\");\n\nvar _InfiniteScroll = require(\"../InfiniteScroll\");\n\nvar _Keyboard = require(\"../Keyboard\");\n\nvar _FormContext = require(\"../Form/FormContext\");\n\nvar _contexts = require(\"../../contexts\");\n\nvar _utils = require(\"../../utils\");\n\nvar _StyledTextInput = require(\"./StyledTextInput\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar renderLabel = function renderLabel(suggestion) {\n  if (suggestion && typeof suggestion === 'object') {\n    return suggestion.label || suggestion.value;\n  }\n\n  return suggestion;\n};\n\nvar stringLabel = function stringLabel(suggestion) {\n  if (suggestion && typeof suggestion === 'object') {\n    if (suggestion.label && typeof suggestion.label === 'string') {\n      return suggestion.label;\n    }\n\n    return suggestion.value;\n  }\n\n  return suggestion;\n};\n\nvar ContainerBox = (0, _styledComponents[\"default\"])(_Box.Box).withConfig({\n  displayName: \"TextInput__ContainerBox\",\n  componentId: \"sc-1ai0c08-0\"\n})([\"\", \";@media screen and (-ms-high-contrast:active),(-ms-high-contrast:none){width:100%;}\"], function (props) {\n  return props.dropHeight ? (0, _utils.sizeStyle)('max-height', props.dropHeight, props.theme) : 'max-height: inherit;';\n});\nvar defaultDropAlign = {\n  top: 'bottom',\n  left: 'left'\n};\nvar defaultMessages = {\n  enterSelect: '(Press Enter to Select)',\n  suggestionsCount: 'suggestions available',\n  suggestionsExist: 'This input has suggestions use arrow keys to navigate',\n  suggestionIsOpen: 'Suggestions drop is open, continue to use arrow keys to navigate'\n};\nvar TextInput = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {\n  var a11yTitle = _ref.a11yTitle,\n      defaultSuggestion = _ref.defaultSuggestion,\n      defaultValue = _ref.defaultValue,\n      _ref$dropAlign = _ref.dropAlign,\n      dropAlign = _ref$dropAlign === void 0 ? defaultDropAlign : _ref$dropAlign,\n      dropHeight = _ref.dropHeight,\n      dropTarget = _ref.dropTarget,\n      dropProps = _ref.dropProps,\n      icon = _ref.icon,\n      id = _ref.id,\n      _ref$messages = _ref.messages,\n      messages = _ref$messages === void 0 ? defaultMessages : _ref$messages,\n      name = _ref.name,\n      _onBlur = _ref.onBlur,\n      onChange = _ref.onChange,\n      _onFocus = _ref.onFocus,\n      onKeyDown = _ref.onKeyDown,\n      onSelect = _ref.onSelect,\n      onSuggestionSelect = _ref.onSuggestionSelect,\n      onSuggestionsClose = _ref.onSuggestionsClose,\n      onSuggestionsOpen = _ref.onSuggestionsOpen,\n      placeholder = _ref.placeholder,\n      plain = _ref.plain,\n      readOnly = _ref.readOnly,\n      reverse = _ref.reverse,\n      suggestions = _ref.suggestions,\n      textAlign = _ref.textAlign,\n      valueProp = _ref.value,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"a11yTitle\", \"defaultSuggestion\", \"defaultValue\", \"dropAlign\", \"dropHeight\", \"dropTarget\", \"dropProps\", \"icon\", \"id\", \"messages\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"onKeyDown\", \"onSelect\", \"onSuggestionSelect\", \"onSuggestionsClose\", \"onSuggestionsOpen\", \"placeholder\", \"plain\", \"readOnly\", \"reverse\", \"suggestions\", \"textAlign\", \"value\"]);\n\n  var theme = (0, _react.useContext)(_styledComponents.ThemeContext) || _defaultProps.defaultProps.theme;\n\n  var announce = (0, _react.useContext)(_contexts.AnnounceContext);\n  var formContext = (0, _react.useContext)(_FormContext.FormContext);\n  var inputRef = (0, _utils.useForwardedRef)(ref);\n  var dropRef = (0, _react.useRef)();\n  var suggestionsRef = (0, _react.useRef)(); // if this is a readOnly property, don't set a name with the form context\n  // this allows Select to control the form context for the name.\n\n  var _formContext$useFormI = formContext.useFormInput(readOnly ? undefined : name, valueProp),\n      value = _formContext$useFormI[0],\n      setValue = _formContext$useFormI[1];\n\n  var _useState = (0, _react.useState)(),\n      focus = _useState[0],\n      setFocus = _useState[1];\n\n  var _useState2 = (0, _react.useState)(false),\n      showDrop = _useState2[0],\n      setShowDrop = _useState2[1];\n\n  var handleSuggestionSelect = (0, _react.useMemo)(function () {\n    return onSelect && !onSuggestionSelect ? onSelect : onSuggestionSelect;\n  }, [onSelect, onSuggestionSelect]);\n  var handleTextSelect = (0, _react.useMemo)(function () {\n    return onSelect && onSuggestionSelect ? onSelect : undefined;\n  }, [onSelect, onSuggestionSelect]);\n\n  var _useState3 = (0, _react.useState)(),\n      suggestionsAtClose = _useState3[0],\n      setSuggestionsAtClose = _useState3[1];\n\n  var openDrop = (0, _react.useCallback)(function () {\n    setShowDrop(true);\n    announce(messages.suggestionIsOpen);\n    announce(suggestions.length + \" \" + messages.suggestionsCount);\n    if (onSuggestionsOpen) onSuggestionsOpen();\n  }, [announce, messages.suggestionsCount, messages.suggestionIsOpen, onSuggestionsOpen, suggestions]);\n  var closeDrop = (0, _react.useCallback)(function () {\n    setSuggestionsAtClose(suggestions); // must be before closing drop\n\n    setShowDrop(false);\n    if (messages.onSuggestionsClose) onSuggestionsClose();\n    if (onSuggestionsClose) onSuggestionsClose();\n  }, [messages.onSuggestionsClose, onSuggestionsClose, suggestions]); // Handle scenarios where we have focus, the drop isn't showing,\n  // and the suggestions change. We don't want to open the drop if\n  // the drop has been closed by onEsc and the suggestions haven't\n  // changed. So, we remember the suggestions we are showing when\n  // the drop was closed and only re-open it when the suggestions\n  // subsequently change.\n\n  (0, _react.useEffect)(function () {\n    if (focus && !showDrop && suggestions && suggestions.length && (!suggestionsAtClose || suggestionsAtClose.length !== suggestions.length)) {\n      openDrop();\n    }\n  }, [focus, openDrop, showDrop, suggestions, suggestionsAtClose]); // if we have no suggestions, close drop if it's open\n\n  (0, _react.useEffect)(function () {\n    if (showDrop && (!suggestions || !suggestions.length)) closeDrop();\n  }, [closeDrop, showDrop, suggestions]);\n  var valueSuggestionIndex = (0, _react.useMemo)(function () {\n    return suggestions ? suggestions.map(function (suggestion) {\n      return typeof suggestion === 'object' ? suggestion.value : suggestion;\n    }).indexOf(value) : -1;\n  }, [suggestions, value]); // choose the best suggestion, either the explicit default or the one\n  // that matches the current value\n\n  var resetSuggestionIndex = (0, _react.useMemo)(function () {\n    if (valueSuggestionIndex === -1 && typeof defaultSuggestion === 'number') {\n      return defaultSuggestion;\n    }\n\n    return valueSuggestionIndex;\n  }, [defaultSuggestion, valueSuggestionIndex]); // activeSuggestionIndex unifies mouse and keyboard interaction of\n  // the suggestions\n\n  var _useState4 = (0, _react.useState)(resetSuggestionIndex),\n      activeSuggestionIndex = _useState4[0],\n      setActiveSuggestionIndex = _useState4[1]; // Only update active suggestion index when the mouse actually moves,\n  // not when suggestions are moving under the mouse.\n\n\n  var _useState5 = (0, _react.useState)(),\n      mouseMovedSinceLastKey = _useState5[0],\n      setMouseMovedSinceLastKey = _useState5[1]; // set activeSuggestionIndex when value changes\n\n\n  (0, _react.useEffect)(function () {\n    return setActiveSuggestionIndex(valueSuggestionIndex);\n  }, [valueSuggestionIndex]); // reset activeSuggestionIndex when the drop is closed\n\n  (0, _react.useEffect)(function () {\n    if (!showDrop) setActiveSuggestionIndex(resetSuggestionIndex);\n  }, [resetSuggestionIndex, showDrop]); // announce active suggestion\n\n  (0, _react.useEffect)(function () {\n    if (activeSuggestionIndex >= 0) {\n      var label = stringLabel(suggestions[activeSuggestionIndex]);\n      announce(label + \" \" + messages.enterSelect);\n    }\n  }, [activeSuggestionIndex, announce, messages, suggestions]); // make sure activeSuggestion is visible in scroll\n\n  (0, _react.useEffect)(function () {\n    var timer = setTimeout(function () {\n      var list = suggestionsRef.current;\n\n      if (showDrop && activeSuggestionIndex !== -1 && list) {\n        var container = list.parentNode;\n        var item = list.children[activeSuggestionIndex];\n\n        if (container.scrollTo) {\n          if ((0, _utils.isNodeAfterScroll)(item, container)) container.scrollTo(0, item.offsetTop - (container.getBoundingClientRect().height - item.getBoundingClientRect().height));else if ((0, _utils.isNodeBeforeScroll)(item, container)) container.scrollTo(0, item.offsetTop);\n        }\n      }\n    }, 50); // delay to allow Drop to animate in\n\n    return function () {\n      return clearTimeout(timer);\n    };\n  }, [activeSuggestionIndex, showDrop]);\n\n  var setValueFromSuggestion = function setValueFromSuggestion(event, suggestion) {\n    // if we stole the focus in the drop, perhaps by interacting with\n    // a suggestion button or the scrollbar, give it back\n    inputRef.current.focus();\n    inputRef.current.value = suggestion; // needed for uncontrolled cases\n\n    closeDrop();\n\n    if (handleSuggestionSelect) {\n      if (event.persist) event.persist();\n      var adjustedEvent = event;\n      adjustedEvent.suggestion = suggestion;\n      handleSuggestionSelect(adjustedEvent);\n    }\n\n    setValue(suggestion);\n  };\n\n  var onNextSuggestion = (0, _react.useCallback)(function (event) {\n    event.preventDefault();\n    var nextActiveIndex = Math.min(activeSuggestionIndex + 1, suggestions.length - 1);\n    setActiveSuggestionIndex(nextActiveIndex);\n    setMouseMovedSinceLastKey(false);\n  }, [activeSuggestionIndex, suggestions]);\n  var onPreviousSuggestion = (0, _react.useCallback)(function (event) {\n    event.preventDefault();\n    var nextActiveIndex = Math.max(activeSuggestionIndex - 1, 0);\n    setActiveSuggestionIndex(nextActiveIndex);\n    setMouseMovedSinceLastKey(false);\n  }, [activeSuggestionIndex]);\n\n  var _useState6 = (0, _react.useState)(placeholder && typeof placeholder !== 'string' && !(inputRef.current && inputRef.current.value) && !value),\n      showStyledPlaceholder = _useState6[0],\n      setShowStyledPlaceholder = _useState6[1];\n\n  var drop;\n  var extraProps = {\n    onSelect: handleTextSelect\n  };\n\n  if (showDrop) {\n    drop = /*#__PURE__*/_react[\"default\"].createElement(_Drop.Drop, _extends({\n      ref: dropRef,\n      id: id ? \"text-input-drop__\" + id : undefined,\n      align: dropAlign,\n      responsive: false,\n      target: dropTarget || inputRef.current,\n      onClickOutside: closeDrop,\n      onEsc: closeDrop\n    }, dropProps), /*#__PURE__*/_react[\"default\"].createElement(ContainerBox, {\n      overflow: \"auto\",\n      dropHeight: dropHeight,\n      onMouseMove: function onMouseMove() {\n        return setMouseMovedSinceLastKey(true);\n      }\n    }, /*#__PURE__*/_react[\"default\"].createElement(_StyledTextInput.StyledSuggestions, {\n      ref: suggestionsRef\n    }, /*#__PURE__*/_react[\"default\"].createElement(_InfiniteScroll.InfiniteScroll, {\n      items: suggestions,\n      step: theme.select.step,\n      show: activeSuggestionIndex !== -1 ? activeSuggestionIndex : undefined\n    }, function (suggestion, index, itemRef) {\n      // Determine whether the label is done as a child or\n      // as an option Button kind property.\n      var renderedLabel = renderLabel(suggestion);\n      var child;\n      if (typeof renderedLabel !== 'string') // must be an element rendered by suggestions.label\n        child = renderedLabel;else if (!theme.button.option) // don't have theme support, need to layout here\n        child = /*#__PURE__*/_react[\"default\"].createElement(_Box.Box, {\n          align: \"start\",\n          pad: \"small\"\n        }, renderedLabel); // if we have a child, turn on plain\n\n      return /*#__PURE__*/_react[\"default\"].createElement(\"li\", {\n        key: stringLabel(suggestion) + \"-\" + index,\n        ref: itemRef\n      }, /*#__PURE__*/_react[\"default\"].createElement(_Button.Button, {\n        active: activeSuggestionIndex === index,\n        fill: true,\n        plain: !child ? undefined : true,\n        align: \"start\",\n        kind: !child ? 'option' : undefined,\n        label: !child ? renderedLabel : undefined,\n        onClick: function onClick(event) {\n          return setValueFromSuggestion(event, suggestion);\n        },\n        onMouseMove: mouseMovedSinceLastKey && activeSuggestionIndex !== index ? function () {\n          return setActiveSuggestionIndex(index);\n        } : undefined\n      }, child));\n    }))));\n  }\n\n  var keyboardProps = {\n    onKeyDown: onKeyDown\n  };\n\n  if (showDrop) {\n    keyboardProps.onEnter = function (event) {\n      // prevent submitting forms via Enter when the drop is open\n      event.preventDefault();\n      if (activeSuggestionIndex >= 0) setValueFromSuggestion(event, suggestions[activeSuggestionIndex]);else closeDrop();\n    };\n\n    if (activeSuggestionIndex > 0) keyboardProps.onUp = onPreviousSuggestion;\n    if (activeSuggestionIndex < suggestions.length - 1) keyboardProps.onDown = onNextSuggestion;\n    keyboardProps.onTab = closeDrop;\n  } else if (suggestions && suggestions.length > 0) {\n    keyboardProps.onDown = openDrop;\n  } // For the Keyboard target below, if we have focus,\n  // either on the input element or within the drop,\n  // then we set the target to the document,\n  // otherwise we only listen to onDown on the input element itself,\n  // primarily for tests.\n\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_StyledTextInput.StyledTextInputContainer, {\n    plain: plain\n  }, showStyledPlaceholder && /*#__PURE__*/_react[\"default\"].createElement(_StyledTextInput.StyledPlaceholder, null, placeholder), icon && /*#__PURE__*/_react[\"default\"].createElement(_StyledTextInput.StyledIcon, {\n    reverse: reverse,\n    theme: theme\n  }, icon), /*#__PURE__*/_react[\"default\"].createElement(_Keyboard.Keyboard, _extends({\n    target: focus ? 'document' : undefined\n  }, keyboardProps), /*#__PURE__*/_react[\"default\"].createElement(_StyledTextInput.StyledTextInput, _extends({\n    \"aria-label\": a11yTitle,\n    ref: inputRef,\n    id: id,\n    name: name,\n    autoComplete: \"off\",\n    plain: plain,\n    placeholder: typeof placeholder === 'string' ? placeholder : undefined,\n    icon: icon,\n    reverse: reverse,\n    focus: focus,\n    textAlign: textAlign\n  }, rest, extraProps, {\n    defaultValue: renderLabel(defaultValue),\n    value: renderLabel(value),\n    readOnly: readOnly,\n    onFocus: function onFocus(event) {\n      // Don't do anything if we are acting like we already have\n      // focus. This can happen when this input loses focus temporarily\n      // to our drop, see onBlur() handler below.\n      if (!focus) {\n        setFocus(true);\n\n        if (suggestions && suggestions.length > 0) {\n          announce(messages.suggestionsExist);\n          openDrop();\n        }\n\n        if (_onFocus) _onFocus(event);\n      }\n    },\n    onBlur: function onBlur(event) {\n      // Only treat it as a blur if the element receiving focus\n      // isn't in our drop. The relatedTarget will be our drop\n      // when the user clicks on a suggestion or interacts with the\n      // scrollbar in the drop.\n      if (!event.relatedTarget || event.relatedTarget !== dropRef.current) {\n        setFocus(false);\n        if (_onBlur) _onBlur(event);\n      }\n    },\n    onChange: readOnly ? undefined : function (event) {\n      // when TextInput is not contained in a Form, no re-render\n      // will come from this onChange and remove the placeholder\n      // so we need to update state to ensure the styled\n      // placeholder only appears when there is no value\n      setShowStyledPlaceholder(placeholder && typeof placeholder !== 'string' && !event.target.value);\n      setValue(event.target.value);\n      setActiveSuggestionIndex(-1);\n      if (onChange) onChange(event);\n    }\n  }))), drop);\n});\nTextInput.displayName = 'TextInput';\nvar TextInputDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  TextInputDoc = require('./doc').doc(TextInput);\n}\n\nvar TextInputWrapper = TextInputDoc || TextInput;\nexports.TextInput = TextInputWrapper;","map":null,"metadata":{},"sourceType":"script"}