{"ast":null,"code":"import { css } from 'styled-components';\nimport { colorIsDark, getRGBA, normalizeColor } from './colors'; // evalStyle() converts a styled-components item into a string\n\nvar evalStyle = function evalStyle(arg, theme) {\n  if (arg && Array.isArray(arg) && typeof arg[0] === 'function') {\n    return arg[0]({\n      theme: theme\n    });\n  }\n\n  return arg;\n};\n\nexport var normalizeBackground = function normalizeBackground(background, theme) {\n  // If the background has a light or dark object, use that\n  var result = background;\n\n  if (background) {\n    if (theme.dark && background.dark && typeof background.dark !== 'boolean') {\n      result = background.dark;\n    } else if (!theme.dark && background.light && typeof background.light !== 'boolean') {\n      result = background.light;\n    }\n\n    result = evalStyle(result, theme);\n  }\n\n  return result;\n};\nexport var backgroundIsDark = function backgroundIsDark(backgroundArg, theme) {\n  var background = normalizeBackground(backgroundArg, theme);\n  var result;\n\n  if (background) {\n    if (typeof background === 'object') {\n      var color = background.color,\n          dark = background.dark,\n          opacity = background.opacity;\n\n      if (typeof dark === 'boolean') {\n        result = dark;\n      } else if (color && ( // weak opacity means we keep the existing darkness\n      !opacity || opacity !== 'weak')) {\n        var backgroundColor = normalizeColor(background.color, theme);\n\n        if (backgroundColor) {\n          result = colorIsDark(backgroundColor);\n        }\n      }\n    } else {\n      var _color = normalizeColor(background, theme);\n\n      if (_color) {\n        result = colorIsDark(_color);\n      }\n    }\n  }\n\n  return result;\n};\n\nvar darkContext = function darkContext(backgroundColor) {\n  var isDark = colorIsDark(backgroundColor);\n  if (isDark === undefined) return undefined;\n  return isDark ? 'dark' : 'light';\n}; // Returns an array of two CSS colors: [background, color]\n// Either could be undefined.\n// background could be a CSS gradient, like \"linear-gradient(...)\"\n\n\nexport var backgroundAndTextColors = function backgroundAndTextColors(backgroundArg, textArg, theme) {\n  if (!backgroundArg) return [undefined, textArg];\n  var global = theme.global;\n  var background = normalizeBackground(backgroundArg, theme);\n  var text = textArg || global.colors.text;\n  var backgroundColor;\n  var textColor;\n\n  if (typeof background === 'object') {\n    if (background.dark === false) {\n      textColor = text.light || text;\n    } else if (background.dark) {\n      textColor = text.dark || text;\n    }\n\n    if (background.color) {\n      var color = normalizeColor(background.color, theme, background.dark);\n      var opacity = background.opacity === true ? global.opacity.medium : global.opacity[background.opacity] || background.opacity;\n      backgroundColor = getRGBA(color, opacity) || color; // If we don't have a textColor already, and we aren't too translucent,\n      // set the textColor to have the best contrast against the background\n      // color.\n\n      if (!textColor && (opacity === undefined || opacity > 0.3)) {\n        var shade = darkContext(backgroundColor, theme);\n        textColor = normalizeColor(shade && text[shade] || text, theme);\n      }\n    }\n  } else {\n    backgroundColor = normalizeColor(background, theme);\n\n    var _shade = darkContext(backgroundColor, theme);\n\n    if (_shade) {\n      textColor = normalizeColor(text[_shade] || text, theme, _shade === 'dark');\n    } else {\n      // If we can't determine the shade, we assume this isn't a simple color.\n      // It could be a gradient. backgroundStyle() will take care of that case.\n      if (backgroundColor !== 'transparent') backgroundColor = undefined;\n      if (text) textColor = normalizeColor(text, theme);\n    }\n  } // if textArg is false, we don't want the textColor, used for Button hover\n\n\n  if (textArg === false) textColor = undefined;\n  return [backgroundColor, textColor];\n};\nexport var backgroundStyle = function backgroundStyle(backgroundArg, theme, textColorArg) {\n  // for Grommet component, if the background isn't defined, don't set it\n  if (backgroundArg === undefined) return undefined;\n  var background = normalizeBackground(backgroundArg, theme);\n\n  if (typeof background === 'string' && background.lastIndexOf('url', 0) === 0) {\n    return css([\"background:\", \" no-repeat center center;background-size:cover;\"], background);\n  }\n\n  var _backgroundAndTextCol = backgroundAndTextColors(background, textColorArg, theme),\n      backgroundColor = _backgroundAndTextCol[0],\n      textColor = _backgroundAndTextCol[1];\n\n  if (background.image) {\n    var backgroundStyles = \"\\n      \" + (backgroundColor ? \"background-color: \" + backgroundColor + \";\" : '') + \"\\n      background-image: \" + background.image + \";\\n      background-repeat: \" + (background.repeat || 'no-repeat') + \";\\n      background-position: \" + (background.position || 'center center') + \";\\n      background-size: \" + (background.size || 'cover') + \";\\n    \"; // allow both background color and image, in case the image doesn't fill\n    // when image and opacity are used together, we need to use pseudo :before\n    // to ensure that only image and background color are affected by opacity\n    // but not the container contents\n\n    return css([\"\", \" \", \"\"], textColor ? \"color: \" + textColor + \";\" : '', !background.opacity ? backgroundStyles : \"position: relative;\\n        z-index: 0;\\n        &:before {\\n          content: '';\\n          position: absolute;\\n          top: 0;\\n          right: 0;\\n          left: 0;\\n          bottom: 0;\\n          z-index: -1;\\n          \" + backgroundStyles + \"\\n          opacity: \" + (background.opacity === true ? theme.global.opacity.medium : theme.global.opacity[background.opacity] || background.opacity) + \";\\n        }\");\n  }\n\n  if (backgroundColor) {\n    return css([\"background-color:\", \";\", \"\"], backgroundColor, textColor ? \"color: \" + textColor + \";\" : '');\n  }\n\n  if (typeof background === 'string') // This case takes care of gradients\n    // or theme colors that use CSS names like 'crimson' that we don't parse\n    return css([\"background:\", \";\"], normalizeColor(background, theme));\n  return undefined;\n};\nexport var activeStyle = css([\"\", \"\"], function (props) {\n  return backgroundStyle(normalizeColor(props.theme.global.active.background, props.theme), props.theme, props.theme.global.active.color);\n});\nexport var selectedStyle = css([\"\", \"\"], function (props) {\n  return backgroundStyle(normalizeColor(props.theme.global.selected.background, props.theme), props.theme, props.theme.global.selected.color);\n});\nexport var getHoverIndicatorStyle = function getHoverIndicatorStyle(hoverIndicator, theme) {\n  var background;\n\n  if (hoverIndicator === true || hoverIndicator === 'background') {\n    background = theme.global.hover.background;\n  } else {\n    background = hoverIndicator;\n  }\n\n  return css([\"\", \"\"], backgroundStyle(background, theme, theme.global.hover.color));\n};","map":null,"metadata":{},"sourceType":"module"}