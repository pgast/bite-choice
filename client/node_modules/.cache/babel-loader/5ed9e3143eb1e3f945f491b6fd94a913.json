{"ast":null,"code":"import React, { forwardRef, useContext } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { Box } from '../Box';\nimport { round } from '../Chart';\nimport { doublePad } from './utils';\nvar YAxis = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var chartProps = _ref.chartProps,\n      pad = _ref.pad,\n      renderValue = _ref.renderValue,\n      _ref$serie = _ref.serie,\n      serie = _ref$serie === void 0 ? {} : _ref$serie;\n  var theme = useContext(ThemeContext);\n  var render = serie.render,\n      suffix = serie.suffix; // pull the x-axis values from the first chart, all should have the same\n\n  var _axis = (Array.isArray(chartProps[0]) ? chartProps[0][0] : chartProps[0]).axis,\n      axisValues = _axis[1];\n  var divideBy;\n  var unit;\n\n  if (!render && !suffix) {\n    // figure out how many digits to show\n    var maxValue = Math.max.apply(Math, axisValues.map(function (v) {\n      return Math.abs(v);\n    }));\n\n    if (maxValue > 10000000) {\n      divideBy = 1000000;\n      unit = 'M';\n    } else if (maxValue > 10000) {\n      divideBy = 1000;\n      unit = 'K';\n    }\n  } // Set basis to match double the vertical pad, so we can align the\n  // text with the guides\n\n\n  var edgeSize = doublePad[pad.vertical || pad];\n  var basis = theme.global.edgeSize[edgeSize] || edgeSize;\n  return /*#__PURE__*/React.createElement(Box, {\n    ref: ref,\n    gridArea: \"yAxis\",\n    justify: \"between\",\n    flex: true\n  }, axisValues.map(function (axisValue, i) {\n    var content = renderValue(serie, undefined, axisValue);\n\n    if (content === axisValue) {\n      if (divideBy) content = round(content / divideBy, 0);\n      if (unit) content = \"\" + content + unit;\n    }\n\n    return /*#__PURE__*/React.createElement(Box // eslint-disable-next-line react/no-array-index-key\n    , {\n      key: i,\n      align: \"end\",\n      basis: basis,\n      flex: \"shrink\",\n      justify: basis ? 'center' : undefined\n    }, content);\n  }));\n});\nexport { YAxis };","map":null,"metadata":{},"sourceType":"module"}