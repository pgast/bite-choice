{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.StyledButtonKind = void 0;\n\nvar _styledComponents = _interopRequireWildcard(require(\"styled-components\"));\n\nvar _utils = require(\"../../utils\");\n\nvar _defaultProps = require(\"../../default-props\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar radiusStyle = function radiusStyle(props) {\n  var size = props.sizeProp;\n  if (size && props.theme.button.size && props.theme.button.size[size]) return (0, _styledComponents.css)([\"border-radius:\", \";\"], props.theme.button.size[size].border.radius);\n  if (props.theme.button.border && props.theme.button.border.radius) return (0, _styledComponents.css)([\"border-radius:\", \";\"], props.theme.button.border.radius);\n  return '';\n};\n\nvar fontStyle = function fontStyle(props) {\n  var size = props.sizeProp || 'medium';\n  var data = props.theme.text[size];\n  return (0, _styledComponents.css)([\"font-size:\", \";line-height:\", \";\"], data.size, data.height);\n};\n\nvar padFromTheme = function padFromTheme(size, theme) {\n  if (size && theme.button.size && theme.button.size[size] && theme.button.size[size].pad) {\n    return {\n      vertical: theme.button.size[size].pad.vertical,\n      horizontal: theme.button.size[size].pad.horizontal\n    };\n  }\n\n  if (theme.button.padding) {\n    return {\n      vertical: theme.global.edgeSize[theme.button.padding.vertical] || theme.button.padding.vertical,\n      horizontal: theme.global.edgeSize[theme.button.padding.horizontal] || theme.button.padding.horizontal\n    };\n  }\n\n  return undefined;\n};\n\nvar padStyle = function padStyle(_ref) {\n  var size = _ref.sizeProp,\n      theme = _ref.theme;\n  var pad = padFromTheme(size, theme);\n  return pad ? (0, _styledComponents.css)([\"padding:\", \" \", \";\"], pad.vertical, pad.horizontal) : '';\n}; // The > svg rule is to ensure Buttons with just an icon don't add additional\n// vertical height internally.\n\n\nvar basicStyle = function basicStyle(props) {\n  return (0, _styledComponents.css)([\"border:none;\", \";\", \" \", \" > svg{vertical-align:bottom;}\"], radiusStyle(props), padStyle(props), fontStyle(props));\n};\n\nvar getPath = function getPath(theme, path) {\n  var obj;\n\n  if (path) {\n    obj = theme;\n    var parts = path.split('.');\n\n    while (obj && parts.length) {\n      obj = obj[parts.shift()];\n    }\n  }\n\n  return obj;\n};\n\nvar adjustPadStyle = function adjustPadStyle(pad, width) {\n  var offset = (0, _utils.parseMetricToNum)(width);\n  return (0, _styledComponents.css)([\"padding:\", \"px \", \"px;\"], (0, _utils.parseMetricToNum)(pad.vertical) - offset, (0, _utils.parseMetricToNum)(pad.horizontal) - offset);\n}; // build up CSS from basic to specific based on the supplied sub-object paths\n\n\nvar kindStyle = function kindStyle(_ref2) {\n  var colorValue = _ref2.colorValue,\n      size = _ref2.sizeProp,\n      themePaths = _ref2.themePaths,\n      theme = _ref2.theme;\n  var styles = [];\n  var pad = padFromTheme(size, theme);\n  themePaths.base.forEach(function (themePath) {\n    var obj = getPath(theme, \"button.\" + themePath);\n\n    if (obj) {\n      styles.push((0, _utils.kindPartStyles)(obj, theme, colorValue));\n\n      if (obj.border && obj.border.width && pad && !obj.padding) {\n        // Adjust padding from the button.size or just top button.padding\n        // to deal with the kind's border width. But don't override any\n        // padding in the kind itself for backward compatibility\n        styles.push(adjustPadStyle(pad, obj.border.width));\n      }\n    }\n  });\n  themePaths.hover.forEach(function (themePath) {\n    var obj = getPath(theme, \"button.\" + themePath);\n\n    if (obj) {\n      var partStyles = (0, _utils.kindPartStyles)(obj, theme);\n      var adjPadStyles = '';\n\n      if (obj.border && obj.border.width && pad && !obj.padding) {\n        // Adjust padding from the button.size or just top button.padding\n        // to deal with the hover's border width. But don't override any\n        // padding in the hover or hover.kind itself for backward compatibility\n        adjPadStyles = adjustPadStyle(pad, obj.border.width);\n      }\n\n      if (partStyles.length > 0) {\n        styles.push((0, _styledComponents.css)([\"&:hover{\", \" \", \"}\"], partStyles, adjPadStyles));\n      }\n    }\n  });\n  return styles;\n};\n\nvar hoverIndicatorStyle = function hoverIndicatorStyle(_ref3) {\n  var hoverIndicator = _ref3.hoverIndicator,\n      theme = _ref3.theme;\n  var themishObj = {};\n  if (hoverIndicator === true || hoverIndicator === 'background') themishObj.background = theme.global.hover.background;else themishObj.background = hoverIndicator;\n  var styles = (0, _utils.kindPartStyles)(themishObj, theme);\n  if (styles.length > 0) return (0, _styledComponents.css)([\"&:hover{\", \"}\"], styles);\n  return '';\n};\n\nvar fillStyle = function fillStyle(fillContainer) {\n  if (fillContainer === 'horizontal') {\n    return 'width: 100%;';\n  }\n\n  if (fillContainer === 'vertical') {\n    return 'height: 100%;';\n  }\n\n  if (fillContainer) {\n    return \"\\n      width: 100%;\\n      height: 100%;\\n      max-width: none;\\n      flex: 1 0 auto;\\n    \";\n  }\n\n  return undefined;\n}; // The > svg rule is to ensure Buttons with just an icon don't add additional\n// vertical height internally.\n\n\nvar plainStyle = function plainStyle() {\n  return (0, _styledComponents.css)([\"outline:none;border:none;padding:0;text-align:inherit;color:inherit;> svg{vertical-align:bottom;}\"]);\n};\n\nvar StyledButtonKind = _styledComponents[\"default\"].button.attrs(function () {\n  return {\n    // don't let kind attribute leak to DOM\n    kind: undefined\n  };\n}).withConfig({\n  displayName: \"StyledButtonKind\",\n  componentId: \"sc-1vhfpnt-0\"\n})([\"display:inline-block;box-sizing:border-box;cursor:pointer;font:inherit;text-decoration:none;margin:0;background:transparent;overflow:visible;text-transform:none;\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" &:focus{\", \"}\", \" \", \" \", \"\"], _utils.genericStyles, function (props) {\n  return props.plain && plainStyle(props);\n}, function (props) {\n  return !props.disabled && props.active && _utils.activeStyle;\n}, function (props) {\n  return !props.plain && basicStyle(props);\n}, function (props) {\n  return !props.plain && kindStyle(props);\n}, function (props) {\n  return !props.plain && props.align && \"\\n    text-align: \" + props.align + \";\\n    \";\n}, function (props) {\n  return !props.disabled && props.hoverIndicator && hoverIndicatorStyle(props);\n}, function (props) {\n  return props.disabled && (0, _utils.disabledStyle)(props.theme.button.disabled.opacity);\n}, function (props) {\n  return (!props.plain || props.focusIndicator) && (0, _utils.focusStyle)();\n}, function (props) {\n  return !props.plain && props.theme.button.transition && \"\\n    transition-property: \" + props.theme.button.transition.properties.join(',') + \";\\n    transition-duration: \" + props.theme.button.transition.duration + \"s;\\n    transition-timing-function: \" + props.theme.button.transition.timing + \";\\n  \";\n}, function (props) {\n  return props.fillContainer && fillStyle(props.fillContainer);\n}, function (props) {\n  return props.theme.button && props.theme.button.extend;\n});\n\nexports.StyledButtonKind = StyledButtonKind;\nStyledButtonKind.defaultProps = {};\nObject.setPrototypeOf(StyledButtonKind.defaultProps, _defaultProps.defaultProps);","map":null,"metadata":{},"sourceType":"script"}