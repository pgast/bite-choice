{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.themeDoc = exports.doc = void 0;\n\nvar _reactDesc = require(\"react-desc\");\n\nvar _propTypes = require(\"../../utils/prop-types\");\n\nvar _mixins = require(\"../../utils/mixins\");\n\nvar _themeDocUtils = require(\"../../utils/themeDocUtils\");\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar doc = function doc(Text) {\n  var DocumentedText = (0, _reactDesc.describe)(Text).availableAt((0, _mixins.getAvailableAtBadge)('Text', 'Type')).description('Arbitrary text.').usage(\"import { Text } from 'grommet';\\n<Text />\").intrinsicElement('span');\n  DocumentedText.propTypes = _extends({}, _propTypes.genericProps, {\n    color: _propTypes.colorPropType.description('A color identifier to use for the text color.'),\n    margin: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.oneOf(['none'].concat(_propTypes.MARGIN_SIZES)), _reactDesc.PropTypes.shape({\n      bottom: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.oneOf(_propTypes.MARGIN_SIZES), _reactDesc.PropTypes.string]),\n      end: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.oneOf(_propTypes.MARGIN_SIZES), _reactDesc.PropTypes.string]),\n      horizontal: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.oneOf(_propTypes.MARGIN_SIZES), _reactDesc.PropTypes.string]),\n      left: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.oneOf(_propTypes.MARGIN_SIZES), _reactDesc.PropTypes.string]),\n      right: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.oneOf(_propTypes.MARGIN_SIZES), _reactDesc.PropTypes.string]),\n      start: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.oneOf(_propTypes.MARGIN_SIZES), _reactDesc.PropTypes.string]),\n      top: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.oneOf(_propTypes.MARGIN_SIZES), _reactDesc.PropTypes.string]),\n      vertical: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.oneOf(_propTypes.MARGIN_SIZES), _reactDesc.PropTypes.string])\n    }), _reactDesc.PropTypes.string]).description(\"The amount of margin around the component. An object can be \\n    specified to distinguish horizontal margin, vertical margin, and margin on \\n    a particular side. For vertical margin to be applied, Text needs to be \\n    contained within a layout component (such as Box or a generic div) or \\n    behave as a div (by applying as=\\\"div\\\" or a display style of \\n    inline-block).\"),\n    size: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'xxlarge', '2xl', '3xl', '4xl', '5xl', '6xl']), _reactDesc.PropTypes.string]).description(\"The font size and line space height of the text.\").defaultValue('medium'),\n    tag: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.string, _reactDesc.PropTypes.func]).description(\"The DOM tag to use for the element. NOTE: This is deprecated in favor\\n         of indicating the DOM tag via the 'as' property.\"),\n    as: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.string, _reactDesc.PropTypes.func, _reactDesc.PropTypes.element]).description(\"The DOM tag or react component to use for the element.\").defaultValue('span'),\n    textAlign: _reactDesc.PropTypes.oneOf(['start', 'center', 'end']).description('How to align the text inside the component.').defaultValue('start'),\n    truncate: _reactDesc.PropTypes.bool.description(\"Restrict the text to a single line and truncate with ellipsis if it\\nis too long to all fit. For truncate to be applied, Text needs to be \\ncontained within a layout component (such as Box or a generic div).\").defaultValue(false),\n    weight: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.oneOf(['normal', 'bold']), _reactDesc.PropTypes.number]).description('Font weight'),\n    wordBreak: _reactDesc.PropTypes.oneOf(['normal', 'break-all', 'keep-all', 'break-word']).description('Whether words should break when reaching the end of a line.').defaultValue('normal')\n  });\n  return DocumentedText;\n};\n\nexports.doc = doc;\n\nvar themeDoc = _extends({\n  'global.colors.text': {\n    description: \"The text color used for Text. In order for this to take \\n    effect, global.colors.background needs to be defined.\",\n    type: 'object | { dark: string, light: string }',\n    defaultValue: \"{ dark: '#f8f8f8', light: '#444444' }\"\n  },\n  'text.font.family': {\n    description: 'The font family to use for Text.',\n    type: 'string',\n    defaultValue: undefined\n  },\n  text: {\n    description: \"The possible sizes of the text in terms of its font-size and \\nline-height.\",\n    type: 'object',\n    defaultValue: \"{\\n      xsmall: {\\n        size: '12px',\\n        height: '18px',\\n       },\\n      small: {\\n        size: '14px',\\n        height: '20px',\\n       },\\n      medium: {\\n        size: '18px',\\n        height: '24px',\\n      },\\n      large: {\\n        size: '22px',\\n        height: '28px',\\n      },\\n      xlarge: {\\n        size: '26px',\\n        height: '32px',\\n      },\\n      xxlarge: {\\n        size: '34px',\\n        height: '40px',\\n      },\\n    }\"\n  },\n  'text.extend': {\n    description: 'Any additional style for Text.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  }\n}, _themeDocUtils.themeDocUtils.edgeStyle('The possible sizes for margin.'));\n\nexports.themeDoc = themeDoc;","map":null,"metadata":{},"sourceType":"script"}