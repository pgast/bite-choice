{"ast":null,"code":"import _readOnlyError from \"/Users/Pablo/Documents/React/bitechoice/v7/client/node_modules/@babel/runtime/helpers/esm/readOnlyError\";\nvar _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v7/client/src/components/RandomView.js\";\nimport React, { useContext, useEffect } from 'react';\nimport ResultView from './ResultView';\nimport { Store } from '../Store';\n\nvar randomView = function randomView(_ref) {\n  var location = _ref.location,\n      toggleUi = _ref.toggleUi,\n      data = _ref.data,\n      locationInput = _ref.locationInput;\n\n  var _useContext = useContext(Store),\n      dispatch = _useContext.dispatch; //useEffect(() => fetchRandomData(), []);\n  //const fetchRandomData = () => dispatch ({ type: 'FETCH_RANDOM_DATA', payload: locationInput });\n\n\n  var coordinates = {\n    lat: '',\n    lon: ''\n  };\n\n  var fetchRandomData = function fetchRandomData() {\n    return dispatch({\n      type: 'FETCH_RANDOM_DATA',\n      payload: {\n        locationInput: locationInput,\n        coordinates: coordinates\n      }\n    });\n  };\n\n  var geoFindMe = function geoFindMe() {\n    function success(position) {\n      var lat = position.coords.latitude;\n      var lon = position.coords.longitude;\n      return {\n        lat: lat,\n        lon: lon\n      };\n    }\n\n    function error() {\n      return \"error\";\n    }\n\n    if (!navigator.geolocation) {\n      error();\n    } else {\n      navigator.geolocation.getCurrentPosition(success, error);\n    }\n  };\n\n  useEffect(function () {\n    if (!locationInput) {\n      coordinates = (_readOnlyError(\"coordinates\"), geoFindMe());\n    }\n\n    console.log(coordinates);\n    fetchRandomData();\n  }, []);\n  return React.createElement(ResultView, {\n    location: location,\n    toggleUi: toggleUi,\n    isCustom: false,\n    randomSorting: true,\n    data: data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  });\n};\n\nexport default randomView;","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v7/client/src/components/RandomView.js"],"names":["React","useContext","useEffect","ResultView","Store","randomView","location","toggleUi","data","locationInput","dispatch","coordinates","lat","lon","fetchRandomData","type","payload","geoFindMe","success","position","coords","latitude","longitude","error","navigator","geolocation","getCurrentPosition","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,KAAT,QAAsB,UAAtB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAiD;AAAA,MAA9CC,QAA8C,QAA9CA,QAA8C;AAAA,MAApCC,QAAoC,QAApCA,QAAoC;AAAA,MAA1BC,IAA0B,QAA1BA,IAA0B;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;;AAAA,oBAC7CR,UAAU,CAACG,KAAD,CADmC;AAAA,MAC1DM,QAD0D,eAC1DA,QAD0D,EAElE;AACA;;;AAEA,MAAMC,WAAW,GAAG;AAAEC,IAAAA,GAAG,EAAE,EAAP;AAAWC,IAAAA,GAAG,EAAE;AAAhB,GAApB;;AACA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,WAAMJ,QAAQ,CAAE;AAAEK,MAAAA,IAAI,EAAE,mBAAR;AAA6BC,MAAAA,OAAO,EAAE;AAAEP,QAAAA,aAAa,EAAbA,aAAF;AAAiBE,QAAAA,WAAW,EAAXA;AAAjB;AAAtC,KAAF,CAAd;AAAA,GAAxB;;AAEA,MAAMM,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtB,aAASC,OAAT,CAAiBC,QAAjB,EAA2B;AACzB,UAAMP,GAAG,GAAGO,QAAQ,CAACC,MAAT,CAAgBC,QAA5B;AACA,UAAMR,GAAG,GAAGM,QAAQ,CAACC,MAAT,CAAgBE,SAA5B;AACA,aAAO;AAAEV,QAAAA,GAAG,EAAHA,GAAF;AAAOC,QAAAA,GAAG,EAAHA;AAAP,OAAP;AACD;;AAED,aAASU,KAAT,GAAiB;AACf,aAAO,OAAP;AACD;;AAED,QAAI,CAACC,SAAS,CAACC,WAAf,EAA4B;AAC1BF,MAAAA,KAAK;AACN,KAFD,MAEO;AACLC,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCR,OAAzC,EAAkDK,KAAlD;AACD;AACF,GAhBD;;AAmBArB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAG,CAACO,aAAJ,EAAmB;AACjBE,MAAAA,WAAW,mCAAGM,SAAS,EAAZ,CAAX;AACD;;AACDU,IAAAA,OAAO,CAACC,GAAR,CAAYjB,WAAZ;AACAG,IAAAA,eAAe;AAChB,GANQ,EAMN,EANM,CAAT;AAQA,SACE,oBAAC,UAAD;AACE,IAAA,QAAQ,EAAER,QADZ;AAEE,IAAA,QAAQ,EAAEC,QAFZ;AAGE,IAAA,QAAQ,EAAE,KAHZ;AAIE,IAAA,aAAa,MAJf;AAKE,IAAA,IAAI,EAAEC,IALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CA5CD;;AA8CA,eAAeH,UAAf","sourcesContent":["import React, { useContext, useEffect } from 'react';\n\nimport ResultView from './ResultView';\nimport { Store } from '../Store';\n\nconst randomView = ({ location, toggleUi, data, locationInput }) => {\n  const { dispatch } = useContext(Store);\n  //useEffect(() => fetchRandomData(), []);\n  //const fetchRandomData = () => dispatch ({ type: 'FETCH_RANDOM_DATA', payload: locationInput });\n\n  const coordinates = { lat: '', lon: '' };\n  const fetchRandomData = () => dispatch ({ type: 'FETCH_RANDOM_DATA', payload: { locationInput, coordinates } })\n\n  const geoFindMe = () => {\n    function success(position) {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n      return { lat, lon };\n    }\n  \n    function error() {\n      return \"error\";\n    }\n  \n    if (!navigator.geolocation) {\n      error();\n    } else {\n      navigator.geolocation.getCurrentPosition(success, error);\n    }\n  }\n\n\n  useEffect(() => {\n    if(!locationInput) {\n      coordinates = geoFindMe();\n    }\n    console.log(coordinates);\n    fetchRandomData();\n  }, []);\n\n  return (\n    <ResultView \n      location={location} \n      toggleUi={toggleUi}\n      isCustom={false} \n      randomSorting\n      data={data} \n    />\n  );\n};\n\nexport default randomView;"]},"metadata":{},"sourceType":"module"}