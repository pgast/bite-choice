{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.RadioButtonGroup = exports.CheckBoxGroup = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _styledComponents = require(\"styled-components\");\n\nvar _CheckBox = require(\"../CheckBox\");\n\nvar _FormContext = require(\"../Form/FormContext\");\n\nvar _StyledCheckBoxGroup = require(\"./StyledCheckBoxGroup\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar CheckBoxGroup = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {\n  var valueProp = _ref.value,\n      disabledProp = _ref.disabled,\n      gap = _ref.gap,\n      labelKey = _ref.labelKey,\n      valueKey = _ref.valueKey,\n      onChange = _ref.onChange,\n      optionsProp = _ref.options,\n      name = _ref.name,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"value\", \"disabled\", \"gap\", \"labelKey\", \"valueKey\", \"onChange\", \"options\", \"name\"]);\n\n  var formContext = (0, _react.useContext)(_FormContext.FormContext);\n  var theme = (0, _react.useContext)(_styledComponents.ThemeContext) || defaultProps.theme; // In case option is a string, normalize it to be an object\n\n  var options = (0, _react.useMemo)(function () {\n    return optionsProp.map(function (option) {\n      return typeof option === 'string' ? {\n        disabled: disabledProp,\n        value: option,\n        label: option\n      } : option;\n    });\n  }, [optionsProp, disabledProp]); // 'value' is an array of checked valueKeys\n\n  var _formContext$useFormI = formContext.useFormInput(name, valueProp, []),\n      value = _formContext$useFormI[0],\n      setValue = _formContext$useFormI[1]; // Logic is necessary to maintain a proper data structure for Form logic\n\n\n  var onCheckBoxChange = function onCheckBoxChange(event, optionValue, option) {\n    // deep copy of value\n    var nextValue = JSON.parse(JSON.stringify(value)) || [];\n    var optionIndex = nextValue.indexOf(optionValue); // If the value option isn't in the array, add it.\n    // Otherwise, remove it.\n\n    if (optionIndex < 0) nextValue.push(optionValue);else nextValue.splice(optionIndex, 1);\n    setValue(nextValue); // Similar functionality to Select onChange()\n\n    if (onChange) {\n      event.persist(); // extract from React synthetic event pool\n\n      var adjustedEvent = event;\n      adjustedEvent.value = nextValue;\n      adjustedEvent.option = option;\n      onChange(adjustedEvent);\n    }\n  };\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_StyledCheckBoxGroup.StyledCheckBoxGroup, _extends({\n    ref: ref\n  }, theme.checkBoxGroup.container, {\n    gap: gap || (theme.checkBoxGroup.container && theme.checkBoxGroup.container.gap ? theme.checkBoxGroup.container.gap : 'small') // consistent with RadioButtonGroup default\n\n  }, rest), options.map(function (option) {\n    var optionValue = option.value;\n    var label = labelKey ? option[labelKey] : option.label;\n    var valueOption = valueKey ? option[valueKey] : optionValue;\n    var checked = value.indexOf(valueOption) >= 0;\n    var disabled = disabledProp || option.disabled;\n    var key = label + \"-\" + valueOption;\n    if (option.checked) console.warn( // eslint-disable-next-line max-len\n    \"'checked' prop of an individual CheckBox shouldn't be used in a CheckBoxGroup component. Use the CheckBoxGroup 'value' prop instead.\"); // value shouldn't propagate the input field and the onChange option\n\n    var omit = option.value,\n        optionRest = _objectWithoutPropertiesLoose(option, [\"value\"]);\n\n    var optionProps = _extends({}, optionRest, {\n      label: label,\n      disabled: disabled\n    });\n\n    return /*#__PURE__*/_react[\"default\"].createElement(_CheckBox.CheckBox, _extends({\n      key: key\n    }, optionProps, {\n      disabled: disabled,\n      checked: checked,\n      label: label,\n      onChange: function onChange(event) {\n        return onCheckBoxChange(event, valueOption, optionProps);\n      }\n    }));\n  }));\n});\nexports.CheckBoxGroup = CheckBoxGroup;\nCheckBoxGroup.displayName = 'CheckBoxGroup';\nvar CheckBoxGroupDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  CheckBoxGroupDoc = require('./doc').doc(CheckBoxGroup);\n}\n\nvar RadioButtonGroupWrapper = CheckBoxGroupDoc || CheckBoxGroup;\nexports.RadioButtonGroup = RadioButtonGroupWrapper;","map":null,"metadata":{},"sourceType":"script"}