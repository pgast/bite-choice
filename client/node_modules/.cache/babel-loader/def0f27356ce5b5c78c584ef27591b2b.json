{"ast":null,"code":"var _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/CustomView.js\";\nimport React, { useContext } from 'react';\nimport { Store } from '../Store';\nimport ResultView from './ResultView';\nimport CustomForm from './CustomForm';\n\nvar customView = function customView() {\n  var _useContext = useContext(Store),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var changeMode = function changeMode(e) {\n    e.preventDefault();\n    return dispatch({\n      type: 'TOGGLE',\n      payload: 'toggle'\n    });\n  }; // searchTerm = async term => {\n  //   const response = await fetch('/search', {\n  //     method: 'POST',\n  //     headers: { 'Content-Type': 'application/json' },\n  //     body: JSON.stringify({ \n  //       term,\n  //       sort_by: this.state.sortBy === 'random' ? this.randomSorting() : this.state.sortBy\n  //     })\n  //   });\n  //   const businesses = await response.json();\n  //   return businesses.businesses;\n  // };\n  // fetchData = e => {\n  //   e.preventDefault();\n  //   let data = [];\n  //   if (this.state.searchTerms.length === 0) {\n  //     this.searchTerm().then(response => {\n  //       data.push(response);\n  //     });\n  //   } else {      \n  //     this.state.searchTerms.forEach(el => {\n  //       this.searchTerm(el).then(response => {\n  //         data.push(response);\n  //       });\n  //     });\n  //   }\n  //   this.setState({ data });\n  // };\n  // // UPDATE STATE WITH USER FORM INPUTS\n  // handleInputChange = e => {\n  //   const target = e.target;\n  //   const name = target.name;\n  //   if (target.type === 'number') {\n  //     this.setState({ [name]: parseInt(target.value) });\n  //   } else {\n  //     this.setState({ [name]: target.value });\n  //   }\n  // };\n  // // RETURNS A RANDOM SEARCH CRITERIA WHEN USER SELECTS RANDOM\n  // randomSorting = () => {\n  //   let criteria = ['best_match', 'rating', 'review_count', 'distance'];\n  //   let index = Math.floor(Math.random() * Math.floor(criteria.length));\n  //   return criteria[index];\n  // };\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Custom View\"), state.customView.resultsMode ? React.createElement(ResultView, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }) : React.createElement(CustomForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: function onClick(e) {\n      return changeMode(e);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Toggle Results Mode\"), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return console.log(state);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"GeT results\"));\n};\n\nexport default customView;","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/CustomView.js"],"names":["React","useContext","Store","ResultView","CustomForm","customView","state","dispatch","changeMode","e","preventDefault","type","payload","resultsMode","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA,oBACKJ,UAAU,CAACC,KAAD,CADf;AAAA,MACfI,KADe,eACfA,KADe;AAAA,MACRC,QADQ,eACRA,QADQ;;AAGvB,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,CAAD,EAAO;AACxBA,IAAAA,CAAC,CAACC,cAAF;AACA,WAAOH,QAAQ,CAAC;AACdI,MAAAA,IAAI,EAAE,QADQ;AAEdC,MAAAA,OAAO,EAAE;AAFK,KAAD,CAAf;AAID,GAND,CAHuB,CAcvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEE,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAGGN,KAAK,CAACD,UAAN,CAAiBQ,WAAjB,GAA+B,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA/B,GAAgD,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHnD,EAKE;AAAQ,IAAA,OAAO,EAAE,iBAACJ,CAAD;AAAA,aAAOD,UAAU,CAACC,CAAD,CAAjB;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BALF,EAME;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMK,OAAO,CAACC,GAAR,CAAYT,KAAZ,CAAN;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBANF,CADF;AAqCH,CAtGD;;AAwGA,eAAeD,UAAf","sourcesContent":["import React, { useContext } from 'react';\nimport { Store } from '../Store';\nimport ResultView from './ResultView';\nimport CustomForm from './CustomForm';\n\nconst customView = () => {\n  const { state, dispatch } = useContext(Store);\n\n  const changeMode = (e) => {\n    e.preventDefault()\n    return dispatch({\n      type: 'TOGGLE',\n      payload: 'toggle'\n    })\n  }\n\n \n\n\n  // searchTerm = async term => {\n  //   const response = await fetch('/search', {\n  //     method: 'POST',\n  //     headers: { 'Content-Type': 'application/json' },\n  //     body: JSON.stringify({ \n  //       term,\n  //       sort_by: this.state.sortBy === 'random' ? this.randomSorting() : this.state.sortBy\n  //     })\n  //   });\n  //   const businesses = await response.json();\n  //   return businesses.businesses;\n  // };\n\n\n  // fetchData = e => {\n  //   e.preventDefault();\n  //   let data = [];\n  //   if (this.state.searchTerms.length === 0) {\n  //     this.searchTerm().then(response => {\n  //       data.push(response);\n  //     });\n  //   } else {      \n  //     this.state.searchTerms.forEach(el => {\n  //       this.searchTerm(el).then(response => {\n  //         data.push(response);\n  //       });\n  //     });\n  //   }\n  //   this.setState({ data });\n  // };\n\n\n  // // UPDATE STATE WITH USER FORM INPUTS\n  // handleInputChange = e => {\n  //   const target = e.target;\n  //   const name = target.name;\n\n  //   if (target.type === 'number') {\n  //     this.setState({ [name]: parseInt(target.value) });\n  //   } else {\n  //     this.setState({ [name]: target.value });\n  //   }\n  // };\n\n  // // RETURNS A RANDOM SEARCH CRITERIA WHEN USER SELECTS RANDOM\n  // randomSorting = () => {\n  //   let criteria = ['best_match', 'rating', 'review_count', 'distance'];\n  //   let index = Math.floor(Math.random() * Math.floor(criteria.length));\n  //   return criteria[index];\n  // };\n  \n    return (\n      <div>\n        <h1>Custom View</h1>\n\n        {state.customView.resultsMode ? <ResultView /> : <CustomForm />}\n\n        <button onClick={(e) => changeMode(e)}>Toggle Results Mode</button>\n        <button onClick={() => console.log(state)}>GeT results</button>\n\n        \n\n        {\n\n          // IF SORT BY ESTA EN RANDOM => RETURN 3 RANDOM PICKS\n\n          // this.state.randomPicks.map((el, index) => {\n          //   return <ListItem key={index} item={el} />\n          // })\n\n          // SI NO, DAR LOS 3 PRIMEROS DEL ARRAY REGRESADO\n\n          // this.state.data.forEach(el => {\n          //   el.map((element, index) => {\n          //     return <ListItem key={index} item={element} />\n          //   });\n          // })\n        }\n\n        {/* <ResultView \n          location={this.props.location} \n          data={this.state.data} \n          isCustom={true}\n        /> */}\n\n        {/* <button onClick={() => console.log(this.state)}>Get state</button> */}\n      </div>\n    );\n};\n\nexport default customView;"]},"metadata":{},"sourceType":"module"}