{"ast":null,"code":"import _slicedToArray from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/ResultList.js\";\n\nimport React, { useState, useEffect } from 'react'; // FIRST GET INPUT DATA 3 DISPLAY ITEMS AND EVERYTHING ELSE AS DATA\n// IF IS RANDOM MODE GET 3 \n// NO TERM && cualquier criterio menos random\n// RETURN LOS PRIMEROS 3 DE ARRAY DE RESPUESTA\n// NO TERM && random\n// RETURN RANDOM 3 ITEMS\n// 1 TERM && cualquier criterio menos random\n// RETURN LOS PRIMERO 3 DE ARRAY DE RESPUESTA\n// 1 TERM && random\n// RETURN RANDOM 3 ITEMS\n// 2 TERM && cualquier criterio menos random\n// RETURN EL PRIMERO DE 1 Y LOS PRIMEROS 2 DE OTRO (cual tiene 1 y cual 2 luego se define)\n// 2 TERM && random\n// RETURN RANDOM 1 DE 1 Y 2 RANDOM DE OTRO\n// 3 TERM && cualquier criterio menos random\n// RETURN el primero de cada term\n// 3 TERM && random \n// RETURN y \n\nvar resultList = function resultList(_ref) {\n  var data = _ref.data;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      businesses = _useState2[0],\n      setBusinesses = _useState2[1]; // => data from props is received as [[1,2,3,4,5]]\n  //useEffect(() => setBusinesses(data), []);\n  // useEffect(() => {\n  //   console.log(`component mounted`);\n  //   console.log(data);\n  // });\n\n\n  useEffect(function () {\n    setBusinesses(data);\n    console.log(businesses);\n  }, [1]); // state = {\n  //   data: [],\n  //   displayItems: []\n  // }\n\n  var setStateRandom = function setStateRandom(inputData) {\n    var displayItems = [];\n    var data = [];\n\n    if (inputData.length <= 3) {\n      displayItems = inputData;\n    } else {\n      displayItems = _this.randomPicks(inputData);\n      data = inputData.filter(function (el) {\n        return displayItems.includes(el) === false;\n      });\n    }\n\n    _this.setState({\n      data: data\n    });\n\n    _this.setState({\n      displayItems: displayItems\n    });\n\n    console.log(inputData);\n  };\n\n  var setStateCustom = function setStateCustom(inputData) {\n    console.log(inputData);\n  }; // if (this.props.isCustom) {\n  //   this.setStateCustom(this.props.data);\n  // } else {\n  //   this.setStateRandom(this.props.data);\n  // }\n  //this.setState({ data: this.props.data });\n  // returns 3 random indeces depending on input array length\n\n\n  var getIndeces = function getIndeces(businesses) {\n    var indeces = [];\n\n    if (businesses.length < 3) {\n      indeces.push(0, 1);\n    } else {\n      while (indeces.length < 3) {\n        var number = Math.floor(Math.random() * Math.floor(businesses.length));\n\n        if (!indeces.includes(number)) {\n          indeces.push(number);\n        }\n      }\n\n      ;\n    }\n\n    return indeces;\n  }; // returns 3 random array items using get indeces function\n\n\n  var randomPicks = function randomPicks(array) {\n    var results = _this.getIndeces(array).map(function (el) {\n      return array[el];\n    });\n\n    return results;\n  }; // setInitialStates(inputData) {\n  //   let displayItems = [];\n  //   let data = [];\n  //   if (this.props.data.length < 3) {\n  //     displayItems = inputData;\n  //   } else {\n  //     if(this.props.randomSorting) {\n  //       displayItems = this.randomPicks();\n  //     } else {\n  //       for (let i=0; i<3; i++) {\n  //         displayItems.push(inputData[i]);\n  //       }\n  //     }\n  //     data = inputData.filter(el => displayItems.includes(el) === false);\n  //   }\n  //   displayItems = inputData;\n  //   console.log('SETTING INITIAL STATES')\n  //   //this.setState({ data });\n  //   this.setState({ displayItems }); \n  // }\n  // removeItem = (passedIndex) => {\n  //   // update display items by deleting clicked item\n  //   let newDisplayItems = this.state.displayItems.filter((el, index) => passedIndex !== index);\n  //   // copy state\n  //   let newState = [...this.state.data];\n  //   let newItem;\n  //   // if random mode is selected\n  //   if (this.props.randomSorting) {\n  //     // select random item from new state and save it to new item\n  //     newItem = newState[this.getIndeces(newState)[0]];\n  //     // update new state, filtering out the new item\n  //     newState = newState.filter(el => newItem.name !== el.name);\n  //   } else {\n  //     // save value of removed item from array with shift\n  //     newItem = newState.shift();\n  //   }\n  //   if (newItem !== undefined) {\n  //     newDisplayItems.push(newItem);\n  //   }\n  //   this.setState({ data: newState });\n  //   this.setState({ displayItems: newDisplayItems });\n  // }\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: function onClick() {\n      return console.log(data);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"GET STATE FROM RESULT LIST\"), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return console.log(data[0]);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, \"STATE FROM INSIDE IN RESULT LIST\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }));\n};\n\nexport default resultList;","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/ResultList.js"],"names":["React","useState","useEffect","resultList","data","businesses","setBusinesses","console","log","setStateRandom","inputData","displayItems","length","randomPicks","filter","el","includes","setState","setStateCustom","getIndeces","indeces","push","number","Math","floor","random","array","results","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\n// FIRST GET INPUT DATA 3 DISPLAY ITEMS AND EVERYTHING ELSE AS DATA\n  // IF IS RANDOM MODE GET 3 \n\n\n\n// NO TERM && cualquier criterio menos random\n// RETURN LOS PRIMEROS 3 DE ARRAY DE RESPUESTA\n\n// NO TERM && random\n// RETURN RANDOM 3 ITEMS\n\n// 1 TERM && cualquier criterio menos random\n// RETURN LOS PRIMERO 3 DE ARRAY DE RESPUESTA\n\n// 1 TERM && random\n// RETURN RANDOM 3 ITEMS\n\n// 2 TERM && cualquier criterio menos random\n// RETURN EL PRIMERO DE 1 Y LOS PRIMEROS 2 DE OTRO (cual tiene 1 y cual 2 luego se define)\n\n// 2 TERM && random\n// RETURN RANDOM 1 DE 1 Y 2 RANDOM DE OTRO\n\n// 3 TERM && cualquier criterio menos random\n// RETURN el primero de cada term\n\n// 3 TERM && random \n// RETURN y \n\nconst resultList = ({ data }) => {\n  const [businesses, setBusinesses] = useState([]);\n\n  // => data from props is received as [[1,2,3,4,5]]\n\n  //useEffect(() => setBusinesses(data), []);\n  // useEffect(() => {\n  //   console.log(`component mounted`);\n  //   console.log(data);\n  // });\n\n\n  useEffect(() => {\n    setBusinesses(data);\n    console.log(businesses);\n  }, [1])\n\n\n  // state = {\n  //   data: [],\n  //   displayItems: []\n  // }\n\n  const setStateRandom = (inputData) => {\n    let displayItems = [];\n    let data = [];\n\n    if (inputData.length <= 3) {\n      displayItems = inputData;\n    } else {\n      displayItems = this.randomPicks(inputData);\n      data = inputData.filter(el => displayItems.includes(el) === false);\n    }\n\n    this.setState({ data });\n    this.setState({ displayItems });\n    console.log(inputData);\n  }\n\n  const setStateCustom = (inputData) => {\n    console.log(inputData);\n  }\n\n  \n    // if (this.props.isCustom) {\n    //   this.setStateCustom(this.props.data);\n    // } else {\n    //   this.setStateRandom(this.props.data);\n    // }\n    //this.setState({ data: this.props.data });\n\n\n\n\n\n\n\n\n\n  \n\n  // returns 3 random indeces depending on input array length\n  const getIndeces = (businesses) => {\n    let indeces = [];\n    if (businesses.length < 3) {\n      indeces.push(0, 1);\n    } else {\n      while (indeces.length < 3) {\n        let number = Math.floor(Math.random() * Math.floor(businesses.length));\n        if (!indeces.includes(number)) {\n          indeces.push(number);\n        }\n      };\n    }\n    return indeces;\n  }\n\n  // returns 3 random array items using get indeces function\n  const randomPicks = (array) => {\n    let results = this.getIndeces(array).map(el => {\n      return array[el];\n    })\n    return results;\n  }\n\n  // setInitialStates(inputData) {\n  //   let displayItems = [];\n  //   let data = [];\n\n  //   if (this.props.data.length < 3) {\n  //     displayItems = inputData;\n  //   } else {\n\n  //     if(this.props.randomSorting) {\n  //       displayItems = this.randomPicks();\n  //     } else {\n  //       for (let i=0; i<3; i++) {\n  //         displayItems.push(inputData[i]);\n  //       }\n  //     }\n  //     data = inputData.filter(el => displayItems.includes(el) === false);\n  //   }\n\n  //   displayItems = inputData;\n  //   console.log('SETTING INITIAL STATES')\n  //   //this.setState({ data });\n  //   this.setState({ displayItems }); \n  // }\n\n\n  // removeItem = (passedIndex) => {\n  //   // update display items by deleting clicked item\n  //   let newDisplayItems = this.state.displayItems.filter((el, index) => passedIndex !== index);\n  //   // copy state\n  //   let newState = [...this.state.data];\n  //   let newItem;\n  //   // if random mode is selected\n  //   if (this.props.randomSorting) {\n  //     // select random item from new state and save it to new item\n  //     newItem = newState[this.getIndeces(newState)[0]];\n  //     // update new state, filtering out the new item\n  //     newState = newState.filter(el => newItem.name !== el.name);\n  //   } else {\n  //     // save value of removed item from array with shift\n  //     newItem = newState.shift();\n  //   }\n\n  //   if (newItem !== undefined) {\n  //     newDisplayItems.push(newItem);\n  //   }\n    \n  //   this.setState({ data: newState });\n  //   this.setState({ displayItems: newDisplayItems });\n  // }\n\n\n\n  return (\n    <div>\n      <button onClick={() => console.log(data)}>GET STATE FROM RESULT LIST</button>\n      <button onClick={() => console.log(data[0])}>STATE FROM INSIDE IN RESULT LIST</button>\n      \n        {/* {\n          businesses.length === 0 ?\n          // ADD NO BUSINESSES COMPONENT\n          <h1>There are no businesses</h1> :\n          // ELSE RETURN DISPLAY ITEMS\n          businesses.map((el, index) => {\n            // return <li key={index} onClick={() => this.removeItem(index)}>{el.name}</li>\n            return <li key={index}>{el.name}</li>\n          })\n        } */}\n\n        <ul>\n          {\n\n              // data[0].map((el, index) => {\n              //   return <li key={index}>{el.name}</li>\n              // })\n              \n          }\n        </ul>\n    </div>\n  );\n};\n\nexport default resultList;"]},"metadata":{},"sourceType":"module"}