{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nimport { themeDocUtils } from '../../utils/themeDocUtils';\nexport var doc = function doc(RangeInput) {\n  var DocumentedRangeInput = describe(RangeInput).availableAt(getAvailableAtBadge('RangeInput', 'Input')).description('A slider control to input a value within a fixed range.').usage(\"import { RangeInput } from 'grommet';\\n<RangeInput />\").intrinsicElement('input');\n  DocumentedRangeInput.propTypes = {\n    a11yTitle: PropTypes.string.description(\"Custom label to be used by screen readers.\\n      When provided, an aria-label will be added to the element.\"),\n    id: PropTypes.string.description('The id attribute of the range input.'),\n    min: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).description('The minimum value permitted.'),\n    max: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).description('The maximum value permitted.'),\n    name: PropTypes.string.description('The name attribute of the range input.'),\n    onChange: PropTypes.func.description(\"Function that will be called when the user changes the value. It will\\n      be passed an event object. The new input value will be available\\n      via 'event.target.value'.\"),\n    step: PropTypes.number.description('The step interval between values.'),\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).description('The current value.')\n  };\n  return DocumentedRangeInput;\n};\nexport var themeDoc = _extends({}, themeDocUtils.focusStyle, {\n  'global.colors.border': {\n    description: 'The color used for rangeInput.track.color.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: '{ dark: rgba(255, 255, 255, 0.33), light: rgba(0, 0, 0, 0.33) }'\n  },\n  'global.spacing': {\n    description: 'The height, width and border-radius of the range thumb.',\n    type: 'string',\n    defaultValue: '24px'\n  },\n  'rangeInput.extend': {\n    description: 'Any additional style for the RangeInput.',\n    type: \"string | (props) => `\\n      any CSS styling;\\n    `\",\n    defaultValue: undefined\n  },\n  'rangeInput.thumb.color': {\n    description: 'The color of the thumb.',\n    type: 'string | { dark: undefined, light: undefined }',\n    defaultValue: undefined\n  },\n  'rangeInput.thumb.extend': {\n    description: 'Any additional style for the thumb.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'rangeInput.track.color': {\n    description: 'The color of the track.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'border'\n  },\n  'rangeInput.track.opacity': {\n    description: 'The opacity of the track color.',\n    type: 'string | number',\n    defaultValue: undefined\n  },\n  'rangeInput.track.lower.color': {\n    description: 'The color of the lower bound track.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: undefined\n  },\n  'rangeInput.track.lower.opacity': {\n    description: 'The opacity on the lower bound track color.',\n    type: 'string | number',\n    defaultValue: undefined\n  },\n  'rangeInput.track.upper.color': {\n    description: 'The color of the upper track.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: undefined\n  },\n  'rangeInput.track.upper.opacity': {\n    description: 'The opacity on the upper track color.',\n    type: 'string | number',\n    defaultValue: undefined\n  },\n  'rangeInput.track.extend': {\n    description: 'Any additional style for the track.',\n    type: \"string | (props) => `\\n      any CSS styling;\\n    `\",\n    defaultValue: undefined\n  },\n  'rangeInput.track.height': {\n    description: 'The height of the track.',\n    type: 'string',\n    defaultValue: '4px'\n  }\n});","map":null,"metadata":{},"sourceType":"module"}