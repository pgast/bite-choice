{"ast":null,"code":"import _slicedToArray from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v1/client/src/Store.js\";\nimport React, { useReducer, createContext } from \"react\";\nvar initialState = {\n  customView: {\n    resultsMode: false,\n    searchTerms: [],\n    sortBy: 'best_match'\n  },\n  data: [],\n  ui: 'landing'\n};\n\nvar randomSorting = function randomSorting() {\n  var criteria = ['best_match', 'rating', 'review_count', 'distance'];\n  var index = Math.floor(Math.random() * 4);\n  return criteria[index];\n};\n\nvar searchTerm =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(term, sort_by) {\n    var response, businesses;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('/search', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                term: term,\n                sort_by: sort_by\n              })\n            });\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            businesses = _context.sent;\n            return _context.abrupt(\"return\", businesses.businesses);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function searchTerm(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}(); // pONER VARIABLE DATA EN SCOPE DE CADA BLOCK\n\n\nvar fetchData =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(searchInputs) {\n    var sorting, data, newData;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            sorting = searchInputs.sortBy === 'random' ? randomSorting() : searchInputs.sortBy; //let data = [];\n\n            if (!(searchInputs.searchTerms.length === 0)) {\n              _context3.next = 8;\n              break;\n            }\n\n            _context3.next = 4;\n            return searchTerm(null, sorting);\n\n          case 4:\n            data = _context3.sent;\n            return _context3.abrupt(\"return\", data);\n\n          case 8:\n            newData = [];\n            searchInputs.searchTerms.forEach(\n            /*#__PURE__*/\n            function () {\n              var _ref3 = _asyncToGenerator(\n              /*#__PURE__*/\n              _regeneratorRuntime.mark(function _callee2(item) {\n                var searchResult;\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.next = 2;\n                        return searchTerm(item, sorting);\n\n                      case 2:\n                        searchResult = _context2.sent;\n                        _context2.next = 5;\n                        return newData.push(searchResult);\n\n                      case 5:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n\n              return function (_x4) {\n                return _ref3.apply(this, arguments);\n              };\n            }()); // const fetchData = async () => {\n            //   let newData = await [];\n            //   searchInputs.searchTerms.forEach(async function(item) {\n            //     let searchResult = await searchTerm(item, sorting);\n            //     newData.push(searchResult);\n            //   });\n            //   return newData;\n            // }\n            //newData = data;\n\n            return _context3.abrupt(\"return\", newData);\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function fetchData(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar fetchRandomData =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4() {\n    var response, businesses;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return fetch('/getRandom');\n\n          case 2:\n            response = _context4.sent;\n            _context4.next = 5;\n            return response.json();\n\n          case 5:\n            businesses = _context4.sent;\n            return _context4.abrupt(\"return\", businesses.businesses);\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function fetchRandomData() {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nfunction reducer(state, action) {\n  var customViewCopy = _objectSpread({}, state.customView);\n\n  switch (action.type) {\n    case 'TOGGLE_CUSTOM_FORM':\n      customViewCopy.resultsMode = !customViewCopy.resultsMode;\n      return _objectSpread({}, state, {\n        customView: customViewCopy\n      });\n\n    case 'SUBMIT_SEARCH':\n      customViewCopy = {\n        searchTerms: action.payload.searchTerms,\n        sortBy: action.payload.sortBy,\n        resultsMode: true\n      };\n      return _objectSpread({}, state, {\n        customView: customViewCopy,\n        data: fetchData(action.payload)\n      });\n\n    case 'FETCH_RANDOM_DATA':\n      return _objectSpread({}, state, {\n        data: fetchRandomData()\n      });\n\n    case 'TOGGLE_UI':\n      customViewCopy = {\n        resultsMode: false,\n        searchTerms: [],\n        sortBy: 'best_match'\n      };\n      return _objectSpread({}, state, {\n        customView: customViewCopy,\n        data: [],\n        ui: action.payload\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport function StoreProvider(props) {\n  var _useReducer = useReducer(reducer, initialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var value = {\n    state: state,\n    dispatch: dispatch\n  };\n  return React.createElement(Store.Provider, {\n    value: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, props.children);\n}\nexport var Store = createContext();","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v1/client/src/Store.js"],"names":["React","useReducer","createContext","initialState","customView","resultsMode","searchTerms","sortBy","data","ui","randomSorting","criteria","index","Math","floor","random","searchTerm","term","sort_by","fetch","method","headers","body","JSON","stringify","response","json","businesses","fetchData","searchInputs","sorting","length","newData","forEach","item","searchResult","push","fetchRandomData","reducer","state","action","customViewCopy","type","payload","StoreProvider","props","dispatch","value","children","Store"],"mappings":"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","sourcesContent":["import React, { useReducer, createContext } from \"react\";\n\nconst initialState = {\n  customView: {\n    resultsMode: false,\n    searchTerms: [],\n    sortBy: 'best_match'\n  },\n  data: [],\n  ui: 'landing'\n}\n\n\n\nconst randomSorting = () => {\n  let criteria = ['best_match', 'rating', 'review_count', 'distance'];\n  let index = Math.floor(Math.random() * 4);\n  return criteria[index];\n};\n\nconst searchTerm = async (term, sort_by) => {\n  const response = await fetch('/search', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ \n      term,\n      sort_by\n    })\n  });\n  const businesses = await response.json();\n  return businesses.businesses;\n};\n\n\n// pONER VARIABLE DATA EN SCOPE DE CADA BLOCK\nconst fetchData = async (searchInputs) => {\n  let sorting = searchInputs.sortBy === 'random' ? randomSorting() : searchInputs.sortBy\n  //let data = [];\n\n  if (searchInputs.searchTerms.length === 0) {\n    let data = await searchTerm(null, sorting);\n    return data;\n  } else {  \n    let newData = [];\n\n    searchInputs.searchTerms.forEach(async function(item) {\n      let searchResult = await searchTerm(item, sorting);\n      await newData.push(searchResult);\n    });\n\n      // const fetchData = async () => {\n      //   let newData = await [];\n\n      //   searchInputs.searchTerms.forEach(async function(item) {\n      //     let searchResult = await searchTerm(item, sorting);\n      //     newData.push(searchResult);\n      //   });\n\n      //   return newData;\n      // }\n\n    //newData = data;\n    return newData;\n  }\n  // console.log(data);\n  // return data;\n};\n\n\nconst fetchRandomData = async () => {\n  const response = await fetch('/getRandom');\n  const businesses = await response.json();\n  return businesses.businesses;\n};\n\n\n\nfunction reducer(state, action) {\n  let customViewCopy = {...state.customView};\n\n  switch(action.type) {\n    case 'TOGGLE_CUSTOM_FORM':\n      customViewCopy.resultsMode = !customViewCopy.resultsMode;\n      return { ...state, customView: customViewCopy};\n\n    case 'SUBMIT_SEARCH':\n      customViewCopy = {\n        searchTerms: action.payload.searchTerms,\n        sortBy: action.payload.sortBy,\n        resultsMode: true\n      }\n\n      return {...state, customView: customViewCopy, data: fetchData(action.payload)};\n\n    case 'FETCH_RANDOM_DATA':\n      return {...state, data: fetchRandomData()};\n\n    case 'TOGGLE_UI':\n      customViewCopy = {\n        resultsMode: false,\n        searchTerms: [],\n        sortBy: 'best_match'\n      }\n\n      return {...state, customView: customViewCopy, data: [], ui: action.payload};\n      \n    default:\n      return state;\n  }\n}\n\nexport function StoreProvider(props) {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const value = {state, dispatch}\n  return <Store.Provider value={value}>{props.children}</Store.Provider>\n}\n\nexport const Store = createContext();"]},"metadata":{},"sourceType":"module"}