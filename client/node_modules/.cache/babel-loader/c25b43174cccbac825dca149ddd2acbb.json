{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React, { Children } from 'react';\nimport { StyledStack, StyledStackLayer } from './StyledStack';\n\nvar buildStyledChildren = function buildStyledChildren(_ref) {\n  var anchor = _ref.anchor,\n      fill = _ref.fill,\n      guidingIndex = _ref.guidingIndex,\n      interactiveChild = _ref.interactiveChild,\n      interactiveIndex = _ref.interactiveIndex;\n  return function (child, index) {\n    var interactive = interactiveChild === undefined || interactiveIndex === index;\n    var isGuidingIndex = index === guidingIndex;\n    var props = isGuidingIndex ? {\n      guiding: true,\n      fillContainer: fill\n    } : {\n      anchor: anchor\n    };\n    return /*#__PURE__*/React.createElement(StyledStackLayer, _extends({\n      key: index,\n      interactive: interactive\n    }, props), child);\n  };\n};\n\nvar Stack = function Stack(_ref2) {\n  var anchor = _ref2.anchor,\n      children = _ref2.children,\n      fill = _ref2.fill,\n      guidingChild = _ref2.guidingChild,\n      interactiveChild = _ref2.interactiveChild,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"anchor\", \"children\", \"fill\", \"guidingChild\", \"interactiveChild\"]);\n\n  var prunedChildren = Children.toArray(children).filter(function (c) {\n    return c;\n  });\n\n  var toChildIndex = function toChildIndex(child) {\n    var index = child;\n    if (index === 'first' || !index) index = 0;else if (index === 'last') index = prunedChildren.length - 1;\n    return index;\n  };\n\n  var guidingIndex = toChildIndex(guidingChild);\n  var interactiveIndex = interactiveChild && toChildIndex(interactiveChild);\n  var styledChildren = prunedChildren.map(buildStyledChildren({\n    anchor: anchor,\n    fill: fill,\n    guidingIndex: guidingIndex,\n    interactiveChild: interactiveChild,\n    interactiveIndex: interactiveIndex\n  }));\n  return /*#__PURE__*/React.createElement(StyledStack, _extends({\n    fillContainer: fill\n  }, rest), styledChildren);\n};\n\nvar StackDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  StackDoc = require('./doc').doc(Stack); // eslint-disable-line global-require\n}\n\nvar StackWrapper = StackDoc || Stack;\nexport { StackWrapper as Stack };","map":null,"metadata":{},"sourceType":"module"}