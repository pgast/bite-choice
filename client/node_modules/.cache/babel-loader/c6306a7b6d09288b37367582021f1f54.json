{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useState } from 'react';\nimport { StyledImage } from './StyledImage';\nvar Image = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var a11yTitle = _ref.a11yTitle,\n      fallback = _ref.fallback,\n      onError = _ref.onError,\n      opacity = _ref.opacity,\n      fill = _ref.fill,\n      src = _ref.src,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"a11yTitle\", \"fallback\", \"onError\", \"opacity\", \"fill\", \"src\"]);\n\n  var _useState = useState(false),\n      imageMissing = _useState[0],\n      setImageMissing = _useState[1];\n\n  var handleError = function handleError(event) {\n    if (onError) {\n      onError(event);\n    }\n\n    setImageMissing(true);\n  };\n\n  var extraProps = {\n    onError: (onError || fallback) && handleError\n  };\n  return /*#__PURE__*/React.createElement(StyledImage, _extends({\n    \"aria-label\": a11yTitle\n  }, rest, extraProps, {\n    ref: ref,\n    opacityProp: opacity,\n    fillProp: fill,\n    src: !imageMissing ? src : fallback\n  }));\n});\nImage.displayName = 'Image';\nvar ImageDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  ImageDoc = require('./doc').doc(Image); // eslint-disable-line global-require\n}\n\nvar ImageWrapper = ImageDoc || Image;\nexport { ImageWrapper as Image };","map":null,"metadata":{},"sourceType":"module"}