{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.borderStyle = exports.responsiveBorderStyle = void 0;\n\nvar _styledComponents = require(\"styled-components\");\n\nvar _colors = require(\"./colors\");\n\nvar _mixins = require(\"./mixins\");\n\nvar responsiveBorderStyle = function responsiveBorderStyle(data, theme) {\n  var color = (0, _colors.normalizeColor)(data.color || 'border', theme);\n  var borderSize = data.size || 'xsmall';\n  var style = data.style || 'solid';\n  var side = typeof data === 'string' ? data : data.side || 'all';\n  var breakpoint = theme.box.responsiveBreakpoint && theme.global.breakpoints[theme.box.responsiveBreakpoint];\n  if (!breakpoint.borderSize) breakpoint.borderSize = theme.global.borderSize;\n  var value = breakpoint && (breakpoint.borderSize[borderSize] || borderSize) && style + \" \" + (breakpoint.borderSize[borderSize] || borderSize) + \" \" + color;\n  if (!value) return undefined;\n  if (side === 'top' || side === 'bottom' || side === 'left' || side === 'right') return \"border-\" + side + \": \" + value + \";\";\n  if (side === 'end' || side === 'start') return \"border-inline-\" + side + \": \" + value + \";\";\n  if (side === 'vertical') return \"\\n      border-left: \" + value + \";\\n      border-right: \" + value + \";\\n    \";\n  if (side === 'horizontal') return \"\\n      border-top: \" + value + \";\\n      border-bottom: \" + value + \";\\n    \";\n  if (side === 'between') return undefined; // no-op\n\n  return \"border: \" + value + \";\";\n};\n\nexports.responsiveBorderStyle = responsiveBorderStyle;\n\nvar borderStyle = function borderStyle(data, responsive, theme) {\n  var styles = [];\n  var color = (0, _colors.normalizeColor)(data.color || 'border', theme);\n  var borderSize = data.size || 'xsmall';\n  var style = data.style || 'solid';\n  var side = typeof data === 'string' ? data : data.side || 'all';\n  var value = style + \" \" + (theme.global.borderSize[borderSize] || borderSize) + \" \" + color;\n  var responsiveStyle = responsive && responsiveBorderStyle(data, theme);\n  var breakpoint = responsiveStyle && theme.box.responsiveBreakpoint && theme.global.breakpoints[theme.box.responsiveBreakpoint];\n\n  if (side === 'top' || side === 'bottom' || side === 'left' || side === 'right') {\n    styles.push(\"border-\" + side + \": \" + value + \";\");\n\n    if (responsiveStyle) {\n      styles.push((0, _mixins.breakpointStyle)(breakpoint, responsiveStyle));\n    }\n  } else if (side === 'end' || side === 'start') {\n    styles.push((0, _styledComponents.css)([\"border-inline-\", \":\", \";\"], side, value));\n\n    if (responsiveStyle) {\n      styles.push((0, _mixins.breakpointStyle)(breakpoint, responsiveStyle));\n    }\n  } else if (side === 'vertical') {\n    styles.push((0, _styledComponents.css)([\"border-left:\", \";border-right:\", \";\"], value, value));\n\n    if (responsiveStyle) {\n      styles.push((0, _mixins.breakpointStyle)(breakpoint, responsiveStyle));\n    }\n  } else if (side === 'horizontal') {\n    styles.push((0, _styledComponents.css)([\"border-top:\", \";border-bottom:\", \";\"], value, value));\n\n    if (responsiveStyle) {\n      styles.push((0, _mixins.breakpointStyle)(breakpoint, responsiveStyle));\n    }\n  } else if (side === 'between') {// no-op\n  } else {\n    styles.push((0, _styledComponents.css)([\"border:\", \";\"], value));\n\n    if (responsiveStyle) {\n      styles.push((0, _mixins.breakpointStyle)(breakpoint, responsiveStyle));\n    }\n  }\n\n  return styles;\n};\n\nexports.borderStyle = borderStyle;","map":null,"metadata":{},"sourceType":"script"}