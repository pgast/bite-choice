{"ast":null,"code":"import { describe, PropTypes } from 'react-desc';\nimport { getAvailableAtBadge } from '../../utils/mixins';\nexport var doc = function doc(RadioButton) {\n  var DocumentedRadioButton = describe(RadioButton).availableAt(getAvailableAtBadge('RadioButton', 'Input')).description('A radio button control.').details(\"RadioButton should typically not be used directly.\\n      Instead, use RadioButtonGroup.\").usage(\"import { RadioButton } from 'grommet';\\n<RadioButton />\").intrinsicElement('input');\n  DocumentedRadioButton.propTypes = {\n    a11yTitle: PropTypes.string.description(\"Custom label to be used by screen readers.\\n      When provided, an aria-label will be added to the element.\"),\n    checked: PropTypes.bool.description('Same as React <input checked={} />'),\n    children: PropTypes.func.description(\"Function that will be called to render the visual representation.\\n      It will be passed an object indicating whether the button is checked. It\\n      should return a react element.\\n      For example:\\n      `children={({ checked }) => <Box ...>{...}</Box>}`\\n      \"),\n    disabled: PropTypes.bool.description(\"Same as React <input disabled={} />. Also adds a hidden input element\\nwith the same name so form submissions work.\"),\n    id: PropTypes.string.description('The DOM id attribute value to use for the underlying <input/> element.'),\n    label: PropTypes.node.description('Label text to place next to the control.'),\n    name: PropTypes.string.description(\"The DOM name attribute value to use for the underlying <input/>\\n       element.\").isRequired,\n    onChange: PropTypes.func.description(\"Function that will be called when the user clicks the radio button. It\\n      will be passed a React event object. The current state can be accessed\\n      via event.target.checked. Same as React <input onChange={} />.\")\n  };\n  return DocumentedRadioButton;\n};\nexport var themeDoc = {\n  'global.colors.control': {\n    description: \"The default color of the border surrounding \\n    the checked icon in RadioButton checked state.\",\n    type: 'string | { dark: string, light: string }',\n    defaultValue: \"{ dark: 'accent-1', light: 'brand'}\"\n  },\n  'radioButton.border.color': {\n    description: 'The color of the border of the Radio Button.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: \"{dark: 'rgba(255, 255, 255, 0.5), light: 'rgba(0, 0, 0, 0.15)}\"\n  },\n  'radioButton.border.width': {\n    description: 'The width size of the border of the RadioButton.',\n    type: 'string',\n    defaultValue: '2px'\n  },\n  'radioButton.check.background.color': {\n    description: 'The background color of the checked icon in the RadioButton.',\n    type: 'string | {dark: string, light: string}',\n    defaultValue: 'undefined'\n  },\n  'radioButton.check.color': {\n    description: 'The color of the checked icon in the RadioButton.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'undefined'\n  },\n  'radioButton.check.extend': {\n    description: 'Any additional style for the checked RadioButton.',\n    type: 'string | (props) => {}'\n  },\n  'radioButton.check.radius': {\n    description: 'The border-radius of the RadioButton.',\n    type: 'string',\n    defaultValue: '100%'\n  },\n  'radioButton.color': {\n    description: \"The color of the border surrounding the checked \\n    icon in RadioButton checked state.\",\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'undefined'\n  },\n  'radioButton.container.extend': {\n    description: \"Any additional style for the container around \\n    the radio button and its label.\",\n    type: 'string | (props) => {}',\n    defaultValue: 'undefined'\n  },\n  'radioButton.extend': {\n    description: 'Any additional style for the radio button itself.',\n    type: 'string | (props) => {}'\n  },\n  'radioButton.font.weight': {\n    description: 'The font weight of the label.',\n    type: 'number | string',\n    defaultValue: undefined\n  },\n  'radioButton.gap': {\n    description: 'The gap between the label and the RadioButton itself.',\n    type: 'string',\n    defaultValue: 'small'\n  },\n  'radioButton.hover.background.color': {\n    description: \"The background color of the Box surrounding the RadioButton\\n    when hovered over.\",\n    type: 'string | { dark: string, light: string }',\n    defaultValue: 'undefined'\n  },\n  'radioButton.hover.border.color': {\n    description: \"The color of the RadioButton border when hovered over.\",\n    type: 'string | { dark: string, light: string }',\n    defaultValue: '{dark: white, light: black}'\n  },\n  'radioButton.icon.extend': {\n    description: 'Any additional style for the RadioButton icon.',\n    type: 'string | (props) => {}'\n  },\n  'radioButton.icon.size': {\n    description: 'The size of the icon in the RadioButton.',\n    type: 'string'\n  },\n  'radioButton.icons.circle': {\n    description: 'The icon to replace the inner checked circle.',\n    type: 'React.Element',\n    defaultValue: undefined\n  },\n  'radioButton.size': {\n    description: 'The size of the RadioButton.',\n    type: 'string',\n    defaultValue: '24px'\n  }\n};","map":null,"metadata":{},"sourceType":"module"}