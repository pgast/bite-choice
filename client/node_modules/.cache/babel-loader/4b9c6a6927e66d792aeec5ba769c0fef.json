{"ast":null,"code":"import _classCallCheck from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/ResultList.js\";\nimport React, { Component } from 'react';\n\nvar ResultList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ResultList, _Component);\n\n  function ResultList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ResultList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ResultList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: [],\n      displayItems: [],\n      displayItemsRandom: []\n    };\n\n    _this.getIndeces = function (businesses) {\n      var indeces = [];\n\n      if (businesses.length < 3) {\n        indeces.push(0, 1);\n      } else {\n        while (indeces.length < 3) {\n          var number = Math.floor(Math.random() * Math.floor(businesses.length));\n\n          if (!indeces.includes(number)) {\n            indeces.push(number);\n          }\n        }\n\n        ;\n      }\n\n      return indeces;\n    };\n\n    _this.randomPicks = function () {\n      var results = _this.getIndeces(_this.props.data).map(function (el) {\n        return _this.props.data[el];\n      });\n\n      return results;\n    };\n\n    _this.removeItem = function (passedIndex) {\n      var newData = _this.state.data.filter(function (el, index) {\n        return passedIndex !== index;\n      });\n\n      _this.setState({\n        data: newData\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ResultList, [{\n    key: \"setInitialStates\",\n    value: function setInitialStates(inputData, isRandom) {\n      var displayItems = [];\n      var data = [];\n      var displayItemsRandom = [];\n\n      if (this.props.data.length < 3) {\n        displayItems = inputData;\n      } else {\n        // if(isRandom) {\n        //   displayItems = this.randomPicks();\n        // } else {\n        //   for (let i=0; i<3; i++) {\n        //     displayItems.push(inputData[i]);\n        //   }\n        // }\n        // data = inputData.filter(el => displayItems.includes(el) === false);\n        displayItemsRandom = this.randomPicks();\n\n        for (var i = 0; i < 3; i++) {\n          displayItems.push(inputData[i]);\n        }\n      }\n\n      this.setState({\n        data: data\n      });\n      this.setState({\n        displayItems: displayItems\n      });\n      this.setState({\n        displayItemsRandom: displayItemsRandom\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.data !== prevProps.data) {\n        this.setInitialStates(this.props.data, true);\n      }\n    } // when an item in display array is clicked\n    // delete from display array\n    // (depending on random or not) take item from data log and add to display array\n    // SETS 3 RANDOM PICKS AND ADDS THEM TO STATE\n    // TAKE FULL DATA [1,2,3,4,5,6]\n    // SELECT 3 ITEMS AND UPDATE DATA\n    // REFRESH DATA ARRAY EACH TIME ONE ITEM IS DELETED\n    // ONLY SHOW 3 RANDOM PICKS\n    // WHEN USER CLICKS IN ONE ITEM IT DELETES AND GIVES ANOTHER RANDOM FROM THE LIST\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return console.log(_this2.state);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, \"GET STATE\"), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, this.state.displayItems.map(function (el, index) {\n        return React.createElement(\"li\", {\n          key: index,\n          onClick: function onClick() {\n            return _this2.removeItem(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, el.name);\n      })));\n    }\n  }]);\n\n  return ResultList;\n}(Component);\n\n;\nexport default ResultList;","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/ResultList.js"],"names":["React","Component","ResultList","state","data","displayItems","displayItemsRandom","getIndeces","businesses","indeces","length","push","number","Math","floor","random","includes","randomPicks","results","props","map","el","removeItem","passedIndex","newData","filter","index","setState","inputData","isRandom","i","prevProps","setInitialStates","console","log","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass ResultList extends Component {\n  state = {\n    data: [],\n    displayItems: [],\n    displayItemsRandom: []\n  }\n\n  getIndeces = (businesses) => {\n    let indeces = [];\n    if (businesses.length < 3) {\n      indeces.push(0, 1);\n    } else {\n      while (indeces.length < 3) {\n        let number = Math.floor(Math.random() * Math.floor(businesses.length));\n        if (!indeces.includes(number)) {\n          indeces.push(number);\n        }\n      };\n    }\n    return indeces;\n  }\n\n\n  randomPicks = () => {\n    let results = this.getIndeces(this.props.data).map(el => {\n      return this.props.data[el];\n    })\n    return results;\n  }\n\n\n  setInitialStates(inputData, isRandom) {\n    let displayItems = [];\n    let data = [];\n    let displayItemsRandom=[];\n\n    if (this.props.data.length < 3) {\n      displayItems = inputData;\n    } else {\n      // if(isRandom) {\n      //   displayItems = this.randomPicks();\n      // } else {\n      //   for (let i=0; i<3; i++) {\n      //     displayItems.push(inputData[i]);\n      //   }\n      // }\n      // data = inputData.filter(el => displayItems.includes(el) === false);\n      displayItemsRandom = this.randomPicks();\n      for (let i=0; i<3; i++) {\n        displayItems.push(inputData[i]);\n      }\n\n    }\n    this.setState({ data });\n    this.setState({ displayItems }); \n    this.setState({ displayItemsRandom });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.data !== prevProps.data) {\n      this.setInitialStates(this.props.data, true);\n    }\n  }  \n  \n\n\n  // when an item in display array is clicked\n    // delete from display array\n    // (depending on random or not) take item from data log and add to display array\n\n\n\n   \n  \n    // SETS 3 RANDOM PICKS AND ADDS THEM TO STATE\n \n\n  // TAKE FULL DATA [1,2,3,4,5,6]\n  // SELECT 3 ITEMS AND UPDATE DATA\n  // REFRESH DATA ARRAY EACH TIME ONE ITEM IS DELETED\n\n  // ONLY SHOW 3 RANDOM PICKS\n  // WHEN USER CLICKS IN ONE ITEM IT DELETES AND GIVES ANOTHER RANDOM FROM THE LIST\n\n \n  \n\n  removeItem = (passedIndex) => {\n    let newData = this.state.data.filter((el, index) => passedIndex !== index);\n    this.setState({ data: newData });\n  }\n\n\n  render() {\n    return (\n      <div>\n        <button onClick={() => console.log(this.state)}>GET STATE</button>\n      <ul>\n        {\n          this.state.displayItems.map((el, index) => {\n            return <li key={index} onClick={() => this.removeItem(index)}>{el.name}</li>\n          })\n        }\n      </ul>\n      </div>\n    );\n  }\n};\n\nexport default ResultList;"]},"metadata":{},"sourceType":"module"}