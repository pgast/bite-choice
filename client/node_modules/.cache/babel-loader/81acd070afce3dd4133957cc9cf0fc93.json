{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.FocusedContainer = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar isNotAncestorOf = function isNotAncestorOf(child) {\n  return function (parent) {\n    return !parent.contains(child);\n  };\n};\n\nvar FocusedContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(FocusedContainer, _Component);\n\n  function FocusedContainer() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"ref\", _react.default.createRef());\n\n    _defineProperty(_assertThisInitialized(_this), \"removeTrap\", function () {\n      var restrictScroll = _this.props.restrictScroll;\n      var child = _this.ref.current;\n      (0, _utils.getBodyChildElements)().filter(isNotAncestorOf(child)).forEach(_utils.makeNodeFocusable);\n\n      if (restrictScroll) {\n        document.body.style.overflow = _this.bodyOverflowStyle;\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"trapFocus\", function () {\n      var restrictScroll = _this.props.restrictScroll;\n      var child = _this.ref.current;\n      (0, _utils.getBodyChildElements)().filter(isNotAncestorOf(child)).forEach(_utils.makeNodeUnfocusable);\n\n      if (restrictScroll) {\n        _this.bodyOverflowStyle = document.body.style.overflow;\n        document.body.style.overflow = 'hidden';\n      }\n    });\n\n    return _this;\n  }\n\n  var _proto = FocusedContainer.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var hidden = this.props.hidden; // making sure trap focus always execute\n    // after removeTrap for the case where two drops\n    // are open at the same time\n\n    setTimeout(function () {\n      if (!hidden) {\n        _this2.trapFocus();\n      }\n    }, 0);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    this.removeTrap();\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        hidden = _this$props.hidden,\n        rest = _objectWithoutPropertiesLoose(_this$props, [\"children\", \"hidden\"]);\n\n    delete rest.restrictScroll;\n    return _react.default.createElement(\"div\", _extends({\n      ref: this.ref,\n      \"aria-hidden\": hidden\n    }, rest), children);\n  };\n\n  return FocusedContainer;\n}(_react.Component);\n\nexports.FocusedContainer = FocusedContainer;\n\n_defineProperty(FocusedContainer, \"defaultProps\", {\n  hidden: false,\n  restrictScroll: false\n});\n\n_defineProperty(FocusedContainer, \"propTypes\", {\n  hidden: _propTypes.default.bool,\n  restrictScroll: _propTypes.default.bool\n});","map":null,"metadata":{},"sourceType":"script"}