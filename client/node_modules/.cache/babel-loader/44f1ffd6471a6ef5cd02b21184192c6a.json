{"ast":null,"code":"import _slicedToArray from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v1/client/src/Store.js\";\nimport React, { useReducer, createContext } from \"react\";\nvar initialState = {\n  customView: {\n    resultsMode: false,\n    searchTerms: [],\n    sortBy: 'best_match'\n  },\n  data: []\n};\n\nfunction reducer(state, action) {\n  var customViewCopy = _objectSpread({}, state.customView);\n\n  switch (action.type) {\n    case 'TOGGLE':\n      customViewCopy = state.customView;\n      customViewCopy.resultsMode = !customViewCopy.resultsMode;\n      return _objectSpread({}, state, {\n        customView: customViewCopy\n      });\n\n    case 'SUBMIT_SEARCH':\n      //getting search terms in array & sort by\n      customViewCopy = _objectSpread({}, state.customView);\n      customViewCopy.searchTerms = action.payload.searchTerms;\n      customViewCopy.sortBy = action.payload.sortBy;\n      return _objectSpread({}, state, {\n        customView: customViewCopy\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport function StoreProvider(props) {\n  var _useReducer = useReducer(reducer, initialState),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var value = {\n    state: state,\n    dispatch: dispatch\n  };\n  return React.createElement(Store.Provider, {\n    value: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, props.children);\n}\nexport var Store = createContext();","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v1/client/src/Store.js"],"names":["React","useReducer","createContext","initialState","customView","resultsMode","searchTerms","sortBy","data","reducer","state","action","customViewCopy","type","payload","StoreProvider","props","dispatch","value","children","Store"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,aAA5B,QAAiD,OAAjD;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,WAAW,EAAE,KADH;AAEVC,IAAAA,WAAW,EAAE,EAFH;AAGVC,IAAAA,MAAM,EAAE;AAHE,GADO;AAMnBC,EAAAA,IAAI,EAAE;AANa,CAArB;;AASA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,MAAIC,cAAc,qBAAOF,KAAK,CAACN,UAAb,CAAlB;;AAEA,UAAOO,MAAM,CAACE,IAAd;AACE,SAAK,QAAL;AAEED,MAAAA,cAAc,GAAGF,KAAK,CAACN,UAAvB;AACAQ,MAAAA,cAAc,CAACP,WAAf,GAA6B,CAACO,cAAc,CAACP,WAA7C;AACA,+BAAYK,KAAZ;AAAmBN,QAAAA,UAAU,EAAEQ;AAA/B;;AAEF,SAAK,eAAL;AAEE;AACAA,MAAAA,cAAc,qBAAOF,KAAK,CAACN,UAAb,CAAd;AACAQ,MAAAA,cAAc,CAACN,WAAf,GAA6BK,MAAM,CAACG,OAAP,CAAeR,WAA5C;AACAM,MAAAA,cAAc,CAACL,MAAf,GAAwBI,MAAM,CAACG,OAAP,CAAeP,MAAvC;AACA,+BAAWG,KAAX;AAAkBN,QAAAA,UAAU,EAAEQ;AAA9B;;AAEF;AACE,aAAOF,KAAP;AAhBJ;AAkBD;;AAED,OAAO,SAASK,aAAT,CAAuBC,KAAvB,EAA8B;AAAA,oBACTf,UAAU,CAACQ,OAAD,EAAUN,YAAV,CADD;AAAA;AAAA,MAC5BO,KAD4B;AAAA,MACrBO,QADqB;;AAEnC,MAAMC,KAAK,GAAG;AAACR,IAAAA,KAAK,EAALA,KAAD;AAAQO,IAAAA,QAAQ,EAARA;AAAR,GAAd;AACA,SAAO,oBAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,KAAK,EAAEC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+BF,KAAK,CAACG,QAArC,CAAP;AACD;AAED,OAAO,IAAMC,KAAK,GAAGlB,aAAa,EAA3B","sourcesContent":["import React, { useReducer, createContext } from \"react\";\n\nconst initialState = {\n  customView: {\n    resultsMode: false,\n    searchTerms: [],\n    sortBy: 'best_match'\n  },\n  data: []\n}\n\nfunction reducer(state, action) {\n  let customViewCopy = {...state.customView};\n\n  switch(action.type) {\n    case 'TOGGLE':\n\n      customViewCopy = state.customView\n      customViewCopy.resultsMode = !customViewCopy.resultsMode;\n      return { ...state, customView: customViewCopy};\n\n    case 'SUBMIT_SEARCH':\n\n      //getting search terms in array & sort by\n      customViewCopy = {...state.customView}\n      customViewCopy.searchTerms = action.payload.searchTerms; \n      customViewCopy.sortBy = action.payload.sortBy;\n      return {...state, customView: customViewCopy};\n\n    default:\n      return state;\n  }\n}\n\nexport function StoreProvider(props) {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const value = {state, dispatch}\n  return <Store.Provider value={value}>{props.children}</Store.Provider>\n}\n\nexport const Store = createContext();"]},"metadata":{},"sourceType":"module"}