{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/ResultList.js\";\nimport React, { useState, useEffect } from 'react'; // FIRST GET INPUT DATA 3 DISPLAY ITEMS AND EVERYTHING ELSE AS DATA\n// IF IS RANDOM MODE GET 3 \n// NO TERM && cualquier criterio menos random\n// RETURN LOS PRIMEROS 3 DE ARRAY DE RESPUESTA\n// NO TERM && random\n// RETURN RANDOM 3 ITEMS\n// 1 TERM && cualquier criterio menos random\n// RETURN LOS PRIMERO 3 DE ARRAY DE RESPUESTA\n// 1 TERM && random\n// RETURN RANDOM 3 ITEMS\n// 2 TERM && cualquier criterio menos random\n// RETURN EL PRIMERO DE 1 Y LOS PRIMEROS 2 DE OTRO (cual tiene 1 y cual 2 luego se define)\n// 2 TERM && random\n// RETURN RANDOM 1 DE 1 Y 2 RANDOM DE OTRO\n// 3 TERM && cualquier criterio menos random\n// RETURN el primero de cada term\n// 3 TERM && random \n// RETURN y \n\nvar resultList = function resultList(_ref) {\n  var data = _ref.data,\n      randomSorting = _ref.randomSorting,\n      isCustom = _ref.isCustom;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      businesses = _useState2[0],\n      setBusinesses = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      displayItems = _useState4[0],\n      setDisplayItems = _useState4[1]; ////////  WORKING SOLUTION IN RANDOM MODE /////////////\n  // useEffect(() => {\n  //   async function fetchData() {\n  //     let newData = await data;\n  //     setBusinesses(newData);\n  //   }\n  //   fetchData();\n  // }, [data, setBusinesses]);\n  // funciona random, custom no\n\n\n  useEffect(function () {\n    function fetchCustomData() {\n      return _fetchCustomData.apply(this, arguments);\n    }\n\n    function _fetchCustomData() {\n      _fetchCustomData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var resultArray, i;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                resultArray = [];\n                i = 0;\n\n              case 2:\n                if (!(i < data.length)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 5;\n                return [].concat(_toConsumableArray(resultArray), _toConsumableArray(data[i]));\n\n              case 5:\n                resultArray = _context.sent;\n\n              case 6:\n                i++;\n                _context.next = 2;\n                break;\n\n              case 9:\n                setBusinesses(resultArray);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _fetchCustomData.apply(this, arguments);\n    }\n\n    if (isCustom) {\n      fetchCustomData();\n    } else {\n      setStatesRandom(data);\n    }\n\n    console.log('USE EFFECT');\n  }, [data, setBusinesses]); // returns 3 random indeces depending on input array length\n\n  var getIndeces = function getIndeces(businesses) {\n    var indeces = [];\n\n    if (businesses.length < 3) {\n      indeces.push(0, 1);\n    } else if (businesses.length !== 0) {\n      while (indeces.length < 3) {\n        var number = Math.floor(Math.random() * Math.floor(businesses.length));\n\n        if (!indeces.includes(number)) {\n          indeces.push(number);\n        }\n      }\n\n      ;\n    }\n\n    return indeces;\n  }; // returns 3 random array items using get indeces function\n\n\n  var randomPicks = function randomPicks(array) {\n    var results = getIndeces(array).map(function (el) {\n      return array[el];\n    });\n    return results;\n  }; // IF IS IN CUSTOM MODE\n\n\n  var setStatesCustom = function setStatesCustom(inputData) {\n    // 1 array only\n    console.log('set states custom');\n  };\n\n  var setInitialStates = function setInitialStates(inputData) {\n    var displayItems = [];\n    var data = []; // loop through input data [ [1,2,3], [1,1,1], ['a','b','c'] ]\n\n    if (inputData.length < 3) {\n      displayItems = inputData;\n    } else {\n      if (randomSorting) {\n        displayItems = randomPicks(inputData);\n      } else {\n        for (var i = 0; i < 3; i++) {\n          displayItems.push(inputData[i]);\n        }\n      }\n\n      data = inputData.filter(function (el) {\n        return displayItems.includes(el) === false;\n      });\n    } //displayItems = inputData;\n\n\n    console.log('SETTING INITIAL STATES');\n    setBusinesses(data);\n    setDisplayItems(displayItems);\n  }; // IF IS RANDOM MODE\n\n\n  var setStatesRandom =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(inputData) {\n      var newData, newDisplayItems, data;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return inputData;\n\n            case 2:\n              newData = _context2.sent;\n              newDisplayItems = [];\n              data = [];\n\n              if (newData.length < 3 && newData.length !== 0) {\n                newDisplayItems = newData;\n              } else {\n                newDisplayItems = randomPicks(newData); // for (let i=0; i<newDisplayItems.length; i++) {\n                //   let item = newData.indexOf(newDisplayItems[i]);\n                //   if (item > -1) { newData.splice(item, 1) };\n                // }\n              }\n\n              setBusinesses(data);\n              setDisplayItems(newDisplayItems);\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function setStatesRandom(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); ///////// FUNCTION TO REMOVE ITEMS BY CLICKING EACH CARD AND UPDATE EACH STATE ///////////////////\n  // removeItem = (passedIndex) => {\n  //   // update display items by deleting clicked item\n  //   let newDisplayItems = this.state.displayItems.filter((el, index) => passedIndex !== index);\n  //   // copy state\n  //   let newState = [...this.state.data];\n  //   let newItem;\n  //   // if random mode is selected\n  //   if (this.props.randomSorting) {\n  //     // select random item from new state and save it to new item\n  //     newItem = newState[this.getIndeces(newState)[0]];\n  //     // update new state, filtering out the new item\n  //     newState = newState.filter(el => newItem.name !== el.name);\n  //   } else {\n  //     // save value of removed item from array with shift\n  //     newItem = newState.shift();\n  //   }\n  //   if (newItem !== undefined) {\n  //     newDisplayItems.push(newItem);\n  //   }\n  //   this.setState({ data: newState });\n  //   this.setState({ displayItems: newDisplayItems });\n  // }\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: function onClick() {\n      return console.log(businesses);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, \"GET BUSINESSES STATE\"), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return console.log(displayItems);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, \"GET DISPLAY ITEMS STATE\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, businesses.map(function (el, index) {\n    return React.createElement(\"li\", {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, el.name);\n  })));\n};\n\nexport default resultList;","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/ResultList.js"],"names":["React","useState","useEffect","resultList","data","randomSorting","isCustom","businesses","setBusinesses","displayItems","setDisplayItems","fetchCustomData","resultArray","i","length","setStatesRandom","console","log","getIndeces","indeces","push","number","Math","floor","random","includes","randomPicks","array","results","map","el","setStatesCustom","inputData","setInitialStates","filter","newData","newDisplayItems","index","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\n// FIRST GET INPUT DATA 3 DISPLAY ITEMS AND EVERYTHING ELSE AS DATA\n  // IF IS RANDOM MODE GET 3 \n\n// NO TERM && cualquier criterio menos random\n// RETURN LOS PRIMEROS 3 DE ARRAY DE RESPUESTA\n\n// NO TERM && random\n// RETURN RANDOM 3 ITEMS\n\n// 1 TERM && cualquier criterio menos random\n// RETURN LOS PRIMERO 3 DE ARRAY DE RESPUESTA\n\n// 1 TERM && random\n// RETURN RANDOM 3 ITEMS\n\n// 2 TERM && cualquier criterio menos random\n// RETURN EL PRIMERO DE 1 Y LOS PRIMEROS 2 DE OTRO (cual tiene 1 y cual 2 luego se define)\n\n// 2 TERM && random\n// RETURN RANDOM 1 DE 1 Y 2 RANDOM DE OTRO\n\n// 3 TERM && cualquier criterio menos random\n// RETURN el primero de cada term\n\n// 3 TERM && random \n// RETURN y \n\n\n\nconst resultList = ({ data, randomSorting, isCustom }) => {\n  const [businesses, setBusinesses] = useState([]);\n  const [displayItems, setDisplayItems] = useState([]);\n\n\n  ////////  WORKING SOLUTION IN RANDOM MODE /////////////\n  // useEffect(() => {\n  //   async function fetchData() {\n  //     let newData = await data;\n  //     setBusinesses(newData);\n  //   }\n\n  //   fetchData();\n  // }, [data, setBusinesses]);\n\n\n  \n\n \n\n\n  // funciona random, custom no\n  useEffect(() => {\n  \n\n    async function fetchCustomData() {\n      let resultArray = [];\n  \n      for (let i=0; i<data.length; i++) {\n        resultArray = await [...resultArray, ...data[i]];\n      }\n      setBusinesses(resultArray);\n    }\n\n\n    if (isCustom) {\n      fetchCustomData();\n    } else {\n      setStatesRandom(data);\n    }\n\n    console.log('USE EFFECT')\n\n  }, [data, setBusinesses]);\n\n\n\n\n\n\n\n\n  \n\n  // returns 3 random indeces depending on input array length\n  const getIndeces = (businesses) => {\n    let indeces = [];\n    if (businesses.length < 3) {\n      indeces.push(0, 1);\n    } else if (businesses.length !== 0) {\n      while (indeces.length < 3) {\n        let number = Math.floor(Math.random() * Math.floor(businesses.length));\n        if (!indeces.includes(number)) {\n          indeces.push(number);\n        }\n      };\n    }\n    return indeces;\n  }\n\n  // returns 3 random array items using get indeces function\n  const randomPicks = (array) => {\n    let results = getIndeces(array).map(el => {\n      return array[el];\n    })\n    return results;\n  }\n\n\n  // IF IS IN CUSTOM MODE\n  const setStatesCustom = (inputData) => {\n    // 1 array only\n    console.log('set states custom');\n  }\n  \n  \n\n\n\n  const setInitialStates = (inputData) => {\n    let displayItems = [];\n    let data = [];\n\n\n    // loop through input data [ [1,2,3], [1,1,1], ['a','b','c'] ]\n    if (inputData.length < 3) {\n      displayItems = inputData;\n\n    } else {\n\n      if(randomSorting) {\n        displayItems = randomPicks(inputData);\n\n      } else {\n        for (let i=0; i<3; i++) {\n          displayItems.push(inputData[i]);\n        }\n\n      }\n      data = inputData.filter(el => displayItems.includes(el) === false);\n\n    }\n\n    //displayItems = inputData;\n    console.log('SETTING INITIAL STATES')\n    setBusinesses(data);\n    setDisplayItems(displayItems);\n  }\n\n\n\n\n  // IF IS RANDOM MODE\n  const setStatesRandom = async (inputData) => {\n    let newData = await inputData;\n    let newDisplayItems = [];\n    let data = [];\n\n    if (newData.length < 3 && newData.length !== 0) {\n      newDisplayItems = newData;\n    } else {\n      newDisplayItems = randomPicks(newData);\n\n      // for (let i=0; i<newDisplayItems.length; i++) {\n      //   let item = newData.indexOf(newDisplayItems[i]);\n\n      //   if (item > -1) { newData.splice(item, 1) };\n      // }\n    }\n\n    setBusinesses(data);\n    setDisplayItems(newDisplayItems);\n  }\n\n\n\n\n\n  ///////// FUNCTION TO REMOVE ITEMS BY CLICKING EACH CARD AND UPDATE EACH STATE ///////////////////\n  // removeItem = (passedIndex) => {\n  //   // update display items by deleting clicked item\n  //   let newDisplayItems = this.state.displayItems.filter((el, index) => passedIndex !== index);\n  //   // copy state\n  //   let newState = [...this.state.data];\n  //   let newItem;\n  //   // if random mode is selected\n  //   if (this.props.randomSorting) {\n  //     // select random item from new state and save it to new item\n  //     newItem = newState[this.getIndeces(newState)[0]];\n  //     // update new state, filtering out the new item\n  //     newState = newState.filter(el => newItem.name !== el.name);\n  //   } else {\n  //     // save value of removed item from array with shift\n  //     newItem = newState.shift();\n  //   }\n\n  //   if (newItem !== undefined) {\n  //     newDisplayItems.push(newItem);\n  //   }\n    \n  //   this.setState({ data: newState });\n  //   this.setState({ displayItems: newDisplayItems });\n  // }\n\n\n\n  return (\n    <div>\n      <button onClick={() => console.log(businesses)}>GET BUSINESSES STATE</button>\n      <button onClick={() => console.log(displayItems)}>GET DISPLAY ITEMS STATE</button>\n\n      <ul>\n        {\n          businesses.map((el, index) => {\n            return <li key={index}>{el.name}</li>\n          })\n        }\n      </ul>\n    </div>\n  );\n};\n\nexport default resultList;"]},"metadata":{},"sourceType":"module"}