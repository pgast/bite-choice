{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useContext, useEffect, useLayoutEffect, useMemo, useState } from 'react';\nimport { ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { normalizeColor, parseMetricToNum, useForwardedRef } from '../../utils';\nimport { StyledChart } from './StyledChart';\nimport { normalizeBounds, normalizeValues } from './utils';\nvar gradientMaskColor = '#ffffff'; // use constants so re-renders don't re-trigger effects\n\nvar defaultSize = {\n  height: 'small',\n  width: 'medium'\n};\nvar defaultValues = [];\nvar Chart = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var a11yTitle = _ref.a11yTitle,\n      propsBounds = _ref.bounds,\n      color = _ref.color,\n      dash = _ref.dash,\n      gap = _ref.gap,\n      id = _ref.id,\n      onClick = _ref.onClick,\n      onHover = _ref.onHover,\n      propsOpacity = _ref.opacity,\n      _ref$overflow = _ref.overflow,\n      overflow = _ref$overflow === void 0 ? false : _ref$overflow,\n      pad = _ref.pad,\n      pattern = _ref.pattern,\n      point = _ref.point,\n      round = _ref.round,\n      _ref$size = _ref.size,\n      propsSize = _ref$size === void 0 ? defaultSize : _ref$size,\n      _ref$thickness = _ref.thickness,\n      thickness = _ref$thickness === void 0 ? 'medium' : _ref$thickness,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'bar' : _ref$type,\n      _ref$values = _ref.values,\n      propsValues = _ref$values === void 0 ? defaultValues : _ref$values,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"a11yTitle\", \"bounds\", \"color\", \"dash\", \"gap\", \"id\", \"onClick\", \"onHover\", \"opacity\", \"overflow\", \"pad\", \"pattern\", \"point\", \"round\", \"size\", \"thickness\", \"type\", \"values\"]);\n\n  var containerRef = useForwardedRef(ref);\n  var theme = useContext(ThemeContext) || defaultProps.theme; // normalize variables\n\n  var values = useMemo(function () {\n    return normalizeValues(propsValues);\n  }, [propsValues]);\n  var bounds = useMemo(function () {\n    return normalizeBounds(propsBounds, values);\n  }, [propsBounds, values]);\n  var strokeWidth = useMemo(function () {\n    return parseMetricToNum(theme.global.edgeSize[thickness] || thickness);\n  }, [theme.global.edgeSize, thickness]);\n  var inset = useMemo(function () {\n    var result = [0, 0, 0, 0];\n\n    if (pad) {\n      if (pad.horizontal) {\n        var padSize = parseMetricToNum(theme.global.edgeSize[pad.horizontal]);\n        result[0] += padSize;\n        result[2] += padSize;\n      }\n\n      if (pad.vertical) {\n        var _padSize = parseMetricToNum(theme.global.edgeSize[pad.vertical]);\n\n        result[1] += _padSize;\n        result[3] += _padSize;\n      }\n\n      if (typeof pad === 'string') {\n        var _padSize2 = parseMetricToNum(theme.global.edgeSize[pad]);\n\n        result = [_padSize2, _padSize2, _padSize2, _padSize2];\n      }\n    }\n\n    return result;\n  }, [pad, theme.global.edgeSize]);\n  var strokeDasharray = useMemo(function () {\n    if (dash) {\n      if (round) return strokeWidth + \" \" + strokeWidth * 1.5;\n      return strokeWidth * 2 + \" \" + strokeWidth / 2;\n    }\n\n    return undefined;\n  }, [dash, round, strokeWidth]); // potentially dynamic sizing\n\n  var _useState = useState([0, 0]),\n      containerSize = _useState[0],\n      setContainerSize = _useState[1];\n\n  var needContainerSize = useMemo(function () {\n    return propsSize && (propsSize === 'full' || propsSize === 'fill' || propsSize.height === 'full' || propsSize.height === 'fill' || propsSize.width === 'full' || propsSize.width === 'fill');\n  }, [propsSize]);\n  var size = useMemo(function () {\n    var gapWidth = gap ? parseMetricToNum(theme.global.edgeSize[gap] || gap) : strokeWidth; // autoWidth is how wide we'd pefer\n\n    var autoWidth = strokeWidth * values.length + (values.length - 1) * gapWidth;\n    var sizeWidth = typeof propsSize === 'string' ? propsSize : propsSize.width || defaultSize.width;\n    var width;\n\n    if (sizeWidth === 'full' || sizeWidth === 'fill') {\n      width = containerSize[0];\n    } else if (sizeWidth === 'auto') {\n      width = autoWidth;\n    } else {\n      width = parseMetricToNum(theme.global.size[sizeWidth] || sizeWidth);\n    }\n\n    var sizeHeight = typeof propsSize === 'string' ? propsSize : propsSize.height || defaultSize.height;\n    var height;\n\n    if (sizeHeight === 'full' || sizeHeight === 'fill') {\n      height = containerSize[1];\n    } else {\n      height = parseMetricToNum(theme.global.size[sizeHeight] || sizeHeight);\n    }\n\n    return [width, height];\n  }, [containerSize, gap, propsSize, strokeWidth, theme.global.edgeSize, theme.global.size, values]);\n  var scale = useMemo(function () {\n    return [(size[0] - (inset[0] + inset[2])) / (bounds[0][1] - bounds[0][0]), (size[1] - (inset[1] + inset[3])) / (bounds[1][1] - bounds[1][0])];\n  }, [bounds, inset, size]);\n  var viewBounds = useMemo(function () {\n    return overflow ? [0, 0, size[0], size[1]] : [-(strokeWidth / 2), -(strokeWidth / 2), size[0] + strokeWidth, size[1] + strokeWidth];\n  }, [overflow, size, strokeWidth]); // set container size when we get ref or when size changes\n\n  useLayoutEffect(function () {\n    if (containerRef.current && needContainerSize) {\n      var containerNode = containerRef.current;\n\n      if (containerNode) {\n        var parentNode = containerNode.parentNode;\n\n        if (parentNode) {\n          var rect = parentNode.getBoundingClientRect();\n\n          if (rect.width !== containerSize[0] || rect.height !== containerSize[1]) {\n            setContainerSize([rect.width, rect.height]);\n          }\n        }\n      }\n    }\n  }, [containerRef, containerSize, needContainerSize]); // container size, if needed\n\n  useEffect(function () {\n    var onResize = function onResize() {\n      var parentNode = containerRef.current.parentNode;\n      var rect = parentNode.getBoundingClientRect();\n      setContainerSize([rect.width, rect.height]);\n    };\n\n    if (needContainerSize) {\n      window.addEventListener('resize', onResize);\n      return function () {\n        return window.removeEventListener('resize', onResize);\n      };\n    }\n\n    return undefined;\n  }, [containerRef, needContainerSize]); // Converts values to drawing coordinates.\n  // Takes into account the bounds, any inset, and the scale.\n\n  var valueToCoordinate = function valueToCoordinate(xValue, yValue) {\n    return [(xValue - bounds[0][0]) * scale[0] + inset[0], size[1] - ((yValue - bounds[1][0]) * scale[1] + inset[1])];\n  };\n\n  var useGradient = color && Array.isArray(color);\n  var patternId;\n\n  var renderBars = function renderBars() {\n    return (values || []).filter(function (_ref2) {\n      var value = _ref2.value;\n      return value[1] !== undefined;\n    }).map(function (valueArg, index) {\n      var valueColor = valueArg.color,\n          label = valueArg.label,\n          valueOnHover = valueArg.onHover,\n          valueOpacity = valueArg.opacity,\n          valueThickness = valueArg.thickness,\n          value = valueArg.value,\n          valueRest = _objectWithoutPropertiesLoose(valueArg, [\"color\", \"label\", \"onHover\", \"opacity\", \"thickness\", \"value\"]);\n\n      var key = \"p-\" + index; // Math.min/max are to handle negative values\n\n      var bottom = value.length === 2 ? Math.min(Math.max(0, bounds[1][0]), value[1]) : Math.min(value[1], value[2]);\n      var top = value.length === 2 ? Math.max(Math.min(0, bounds[1][1]), value[1]) : Math.max(value[1], value[2]);\n      var d = \"M \" + valueToCoordinate(value[0], bottom).join(',') + (\" L \" + valueToCoordinate(value[0], top).join(','));\n      var hoverProps;\n\n      if (valueOnHover) {\n        hoverProps = {\n          onMouseOver: function onMouseOver() {\n            return valueOnHover(true);\n          },\n          onMouseLeave: function onMouseLeave() {\n            return valueOnHover(false);\n          }\n        };\n      }\n\n      var clickProps;\n\n      if (onClick) {\n        clickProps = {\n          onClick: onClick\n        };\n      }\n\n      return /*#__PURE__*/React.createElement(\"g\", {\n        key: key,\n        fill: \"none\",\n        stroke: valueColor ? normalizeColor(valueColor, theme) : undefined,\n        strokeWidth: valueThickness ? parseMetricToNum(theme.global.edgeSize[valueThickness] || valueThickness) : undefined,\n        opacity: valueOpacity && theme.global.opacity[valueOpacity] || valueOpacity\n      }, /*#__PURE__*/React.createElement(\"title\", null, label), /*#__PURE__*/React.createElement(\"path\", _extends({\n        d: d\n      }, hoverProps, clickProps, valueRest, {\n        strokeDasharray: strokeDasharray\n      })));\n    });\n  };\n\n  var renderLine = function renderLine() {\n    var d = '';\n    var d2 = '';\n    (values || []).filter(function (_ref3) {\n      var value = _ref3.value;\n      return value[1] !== undefined;\n    }).forEach(function (_ref4) {\n      var value = _ref4.value;\n      d += (d ? ' L' : 'M') + \" \" + valueToCoordinate(value[0], value[1]).join(',');\n\n      if (value[2] !== undefined) {\n        d2 += (d2 ? ' L' : 'M') + \" \" + valueToCoordinate(value[0], value[2]).join(',');\n      }\n    });\n    var hoverProps;\n\n    if (onHover) {\n      hoverProps = {\n        onMouseOver: function onMouseOver() {\n          return onHover(true);\n        },\n        onMouseLeave: function onMouseLeave() {\n          return onHover(false);\n        }\n      };\n    }\n\n    var clickProps;\n\n    if (onClick) {\n      clickProps = {\n        onClick: onClick\n      };\n    }\n\n    return /*#__PURE__*/React.createElement(\"g\", {\n      fill: \"none\"\n    }, /*#__PURE__*/React.createElement(\"path\", _extends({\n      d: d\n    }, hoverProps, clickProps, {\n      strokeDasharray: strokeDasharray\n    })), d2 && /*#__PURE__*/React.createElement(\"path\", _extends({\n      d: d2\n    }, hoverProps, clickProps, {\n      strokeDasharray: strokeDasharray\n    })));\n  };\n\n  var renderArea = function renderArea() {\n    var d = '';\n    (values || []).filter(function (_ref5) {\n      var value = _ref5.value;\n      return value[1] !== undefined;\n    }).forEach(function (_ref6, index) {\n      var value = _ref6.value;\n      d += (!index ? 'M' : ' L') + \" \" + valueToCoordinate(value[0], value[value.length === 2 ? 1 : 2]).join(',');\n    });\n    (values || []).filter(function (_ref7) {\n      var value = _ref7.value;\n      return value[1] !== undefined;\n    }).reverse().forEach(function (_ref8) {\n      var value = _ref8.value;\n      d += \" L \" + valueToCoordinate(value[0], // Math.max() is to account for value[1] being negative\n      value.length === 2 ? Math.max(0, bounds[1][0]) : value[1]).join(',');\n    });\n\n    if (d.length > 0) {\n      d += ' Z';\n    }\n\n    var hoverProps;\n\n    if (onHover) {\n      hoverProps = {\n        onMouseOver: function onMouseOver() {\n          return onHover(true);\n        },\n        onMouseLeave: function onMouseLeave() {\n          return onHover(false);\n        }\n      };\n    }\n\n    var clickProps;\n\n    if (onClick) {\n      clickProps = {\n        onClick: onClick\n      };\n    }\n\n    patternId = pattern && pattern + \"-\" + id + \"-pattern\";\n    return /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", _extends({\n      d: d,\n      fill: patternId ? \"url(#\" + patternId + \")\" : undefined\n    }, hoverProps, clickProps)));\n  };\n\n  var renderPoints = function renderPoints() {\n    return (values || []).filter(function (_ref9) {\n      var value = _ref9.value;\n      return value[1] !== undefined;\n    }).map(function (valueArg, index) {\n      var valueColor = valueArg.color,\n          label = valueArg.label,\n          valueOnHover = valueArg.onHover,\n          valueOpacity = valueArg.opacity,\n          valueThickness = valueArg.thickness,\n          value = valueArg.value,\n          valueRest = _objectWithoutPropertiesLoose(valueArg, [\"color\", \"label\", \"onHover\", \"opacity\", \"thickness\", \"value\"]);\n\n      var key = \"p-\" + index;\n      var hoverProps;\n\n      if (valueOnHover) {\n        hoverProps = {\n          onMouseOver: function onMouseOver() {\n            return valueOnHover(true);\n          },\n          onMouseLeave: function onMouseLeave() {\n            return valueOnHover(false);\n          }\n        };\n      }\n\n      var clickProps;\n\n      if (onClick) {\n        clickProps = {\n          onClick: onClick\n        };\n      }\n\n      var width = valueThickness ? parseMetricToNum(theme.global.edgeSize[valueThickness] || valueThickness) : strokeWidth;\n\n      var renderPoint = function renderPoint(valueX, valueY) {\n        var props = _extends({}, hoverProps, clickProps, valueRest);\n\n        var _valueToCoordinate = valueToCoordinate(valueX, valueY),\n            cx = _valueToCoordinate[0],\n            cy = _valueToCoordinate[1];\n\n        var off = width / 2;\n        if (point === 'circle' || !point && round) return /*#__PURE__*/React.createElement(\"circle\", _extends({\n          cx: cx,\n          cy: cy,\n          r: off\n        }, props));\n        var d;\n        if (point === 'diamond') d = \"M \" + cx + \" \" + (cy - off) + \" L \" + (cx + off) + \" \" + cy + \" L \" + cx + \" \" + (cy + off) + \" L \" + (cx - off) + \" \" + cy + \" Z\";else if (point === 'star') {\n          var off1 = off / 3;\n          var off2 = off1 * 2;\n          d = \"M \" + cx + \" \" + (cy - off) + \" L \" + (cx - off2) + \" \" + (cy + off) + \" L \" + (cx + off) + \" \" + (cy - off1) + \" L \" + (cx - off) + \" \" + (cy - off1) + \" L \" + (cx + off2) + \" \" + (cy + off) + \" Z\";\n        } else if (point === 'triangle') d = \"M \" + cx + \" \" + (cy - off) + \" L \" + (cx + off) + \" \" + (cy + off) + \" L \" + (cx - off) + \" \" + (cy + off) + \" Z\";else if (point === 'triangleDown') d = \"M \" + (cx - off) + \" \" + (cy - off) + \" L \" + (cx + off) + \" \" + (cy - off) + \" L \" + cx + \" \" + (cy + off) + \" Z\"; // square\n        else d = \"M \" + (cx - off) + \" \" + (cy - off) + \" L \" + (cx + off) + \" \" + (cy - off) + \" L \" + (cx + off) + \" \" + (cy + off) + \" L \" + (cx - off) + \" \" + (cy + off) + \" Z\";\n        return /*#__PURE__*/React.createElement(\"path\", {\n          d: d\n        });\n      };\n\n      return /*#__PURE__*/React.createElement(\"g\", {\n        key: key,\n        stroke: \"none\",\n        fill: valueColor ? normalizeColor(valueColor, theme) : undefined,\n        opacity: valueOpacity && theme.global.opacity[valueOpacity] || valueOpacity\n      }, /*#__PURE__*/React.createElement(\"title\", null, label), renderPoint(value[0], value[1]), value[2] !== undefined && renderPoint(value[0], value[2]));\n    });\n  };\n\n  var contents;\n\n  if (type === 'bar') {\n    contents = renderBars();\n  } else if (type === 'line') {\n    contents = renderLine();\n  } else if (type === 'area') {\n    contents = renderArea();\n  } else if (type === 'point') {\n    contents = renderPoints();\n  }\n\n  var viewBox = viewBounds.join(' ');\n  var colorName;\n\n  if (!useGradient) {\n    if (color && color.color) colorName = color.color;else if (color) colorName = color;else if (theme.chart && theme.chart.color) colorName = theme.chart.color;\n  }\n\n  var opacity = propsOpacity || color && color.opacity ? theme.global.opacity[propsOpacity || color.opacity] || propsOpacity || color.opacity : undefined;\n  var stroke;\n\n  if (type !== 'point') {\n    if (useGradient) stroke = gradientMaskColor;else stroke = normalizeColor(colorName, theme);\n  } else stroke = 'none';\n\n  var fill;\n\n  if (type === 'point' || type === 'area') {\n    if (useGradient) fill = gradientMaskColor;else fill = normalizeColor(colorName, theme);\n  } else fill = 'none';\n\n  var drawing = /*#__PURE__*/React.createElement(\"g\", {\n    stroke: stroke,\n    strokeWidth: type !== 'point' && (type !== 'area' || !pattern) ? strokeWidth : undefined,\n    fill: fill,\n    strokeLinecap: round ? 'round' : 'butt',\n    strokeLinejoin: round ? 'round' : 'miter',\n    opacity: opacity\n  }, contents);\n  var defs = [];\n  var gradientRect;\n\n  if (useGradient && size[1]) {\n    var uniqueGradientId = color.map(function (element) {\n      return element.color;\n    }).join('-');\n    var gradientId = uniqueGradientId + \"-\" + id + \"-gradient\";\n    var maskId = uniqueGradientId + \"-\" + id + \"-mask\";\n    defs.push( /*#__PURE__*/React.createElement(\"linearGradient\", {\n      key: \"gradientId\",\n      id: gradientId,\n      x1: 0,\n      y1: 0,\n      x2: 0,\n      y2: 1\n    }, color.slice(0).sort(function (c1, c2) {\n      return c2.value - c1.value;\n    }).map(function (_ref10) {\n      var value = _ref10.value,\n          gradientColor = _ref10.color;\n      return /*#__PURE__*/React.createElement(\"stop\", {\n        key: value,\n        offset: // TODO:\n        (size[1] - (value - bounds[1][0]) * scale[1]) / size[1],\n        stopColor: normalizeColor(gradientColor, theme)\n      });\n    })));\n    defs.push( /*#__PURE__*/React.createElement(\"mask\", {\n      key: \"mask\",\n      id: maskId\n    }, drawing));\n    gradientRect = /*#__PURE__*/React.createElement(\"rect\", {\n      x: viewBounds[0],\n      y: viewBounds[1],\n      width: viewBounds[2],\n      height: viewBounds[3],\n      fill: \"url(#\" + gradientId + \")\",\n      mask: \"url(#\" + maskId + \")\"\n    });\n  } else if (patternId) {\n    var content;\n    var diagonal = pattern.match(/Diagonal/);\n    var unit = diagonal ? strokeWidth * Math.sqrt(2) : strokeWidth;\n    var half = unit / 2;\n\n    var _double = unit * 2;\n\n    var pColor = normalizeColor(colorName, theme);\n\n    if (pattern === 'squares') {\n      content = /*#__PURE__*/React.createElement(\"rect\", {\n        x: half,\n        y: half,\n        width: unit,\n        height: unit,\n        fill: pColor\n      });\n    } else if (pattern === 'circles') {\n      content = /*#__PURE__*/React.createElement(\"circle\", {\n        cx: unit,\n        cy: unit,\n        r: half,\n        fill: pColor\n      });\n    } else if (pattern === 'stripesHorizontal') {\n      content = /*#__PURE__*/React.createElement(\"path\", {\n        d: \"M 0 \" + unit + \" L \" + _double + \" \" + unit,\n        stroke: pColor,\n        strokeWidth: strokeWidth\n      });\n    } else if (pattern === 'stripesVertical') {\n      content = /*#__PURE__*/React.createElement(\"path\", {\n        d: \"M \" + unit + \" 0 L \" + unit + \" \" + _double,\n        stroke: pColor,\n        strokeWidth: strokeWidth\n      });\n    } else if (pattern === 'stripesDiagonalDown') {\n      content = /*#__PURE__*/React.createElement(\"path\", {\n        d: \"M \" + half + \" \" + -half + \" L \" + (_double + half) + \" \" + (_double - half) + \"\\n              M \" + -half + \" \" + half + \" L \" + (_double - half) + \" \" + (_double + half),\n        stroke: pColor,\n        strokeWidth: strokeWidth\n      });\n    } else if (pattern === 'stripesDiagonalUp') {\n      content = /*#__PURE__*/React.createElement(\"path\", {\n        d: \"M \" + -half + \" \" + (_double - half) + \" L \" + (_double - half) + \" \" + -half + \"\\n              M \" + half + \" \" + (_double + half) + \" L \" + (_double + half) + \" \" + half,\n        stroke: pColor,\n        strokeWidth: strokeWidth\n      });\n    }\n\n    defs.push( /*#__PURE__*/React.createElement(\"pattern\", {\n      key: patternId,\n      id: patternId,\n      width: _double,\n      height: _double,\n      patternUnits: \"userSpaceOnUse\"\n    }, content));\n  }\n\n  return /*#__PURE__*/React.createElement(StyledChart, _extends({\n    ref: containerRef,\n    id: id,\n    \"aria-label\": a11yTitle,\n    viewBox: viewBox,\n    preserveAspectRatio: \"none\",\n    width: size === 'full' ? '100%' : size[0],\n    height: size === 'full' ? '100%' : size[1],\n    typeProp: type // prevent adding to DOM\n\n  }, rest), defs.length && /*#__PURE__*/React.createElement(\"defs\", null, defs), useGradient ? gradientRect : drawing);\n});\nChart.displayName = 'Chart';\nvar ChartDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  ChartDoc = require('./doc').doc(Chart); // eslint-disable-line global-require\n}\n\nvar ChartWrapper = ChartDoc || Chart;\nexport { ChartWrapper as Chart };","map":null,"metadata":{},"sourceType":"module"}