{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/ResultList.js\";\nimport React, { useState, useEffect } from 'react'; // FIRST GET INPUT DATA 3 DISPLAY ITEMS AND EVERYTHING ELSE AS DATA\n// IF IS RANDOM MODE GET 3 \n// NO TERM && cualquier criterio menos random\n// RETURN LOS PRIMEROS 3 DE ARRAY DE RESPUESTA\n// NO TERM && random\n// RETURN RANDOM 3 ITEMS\n// 1 TERM && cualquier criterio menos random\n// RETURN LOS PRIMERO 3 DE ARRAY DE RESPUESTA\n// 1 TERM && random\n// RETURN RANDOM 3 ITEMS\n// 2 TERM && cualquier criterio menos random\n// RETURN EL PRIMERO DE 1 Y LOS PRIMEROS 2 DE OTRO (cual tiene 1 y cual 2 luego se define)\n// 2 TERM && random\n// RETURN RANDOM 1 DE 1 Y 2 RANDOM DE OTRO\n// 3 TERM && cualquier criterio menos random\n// RETURN el primero de cada term\n// 3 TERM && random \n// RETURN y \n\nvar resultList = function resultList(_ref) {\n  var data = _ref.data,\n      randomSorting = _ref.randomSorting,\n      isCustom = _ref.isCustom,\n      toggleUi = _ref.toggleUi;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      businesses = _useState2[0],\n      setBusinesses = _useState2[1];\n\n  var _useState3 = useState([{\n    name: 'Waiting for items'\n  }]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      displayItems = _useState4[0],\n      setDisplayItems = _useState4[1];\n\n  useEffect(function () {\n    if (isCustom) {\n      setStatesCustom(data);\n    } else {\n      setStatesRandom(data);\n    }\n  }, [data, setBusinesses]); // returns 3 random indeces depending on input array length\n\n  var getIndeces = function getIndeces(businesses) {\n    var indeces = [];\n\n    if (businesses.length <= 3) {\n      indeces.push(0, 2);\n    } else if (businesses.length !== 0) {\n      while (indeces.length < 3) {\n        var number = Math.floor(Math.random() * Math.floor(businesses.length));\n\n        if (!indeces.includes(number)) {\n          indeces.push(number);\n        }\n      }\n\n      ;\n    }\n\n    return indeces;\n  }; // returns 3 random array items using get indeces function\n\n\n  var randomPicks = function randomPicks(array) {\n    var results = getIndeces(array).map(function (el) {\n      return array[el];\n    });\n    return results;\n  }; // IF IS IN CUSTOM MODE\n\n\n  var setStatesCustom =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(inputData) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(inputData.length > 3)) {\n                _context.next = 3;\n                break;\n              }\n\n              _context.next = 3;\n              return setStatesRandom(inputData);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function setStatesCustom(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // IF IS RANDOM MODE\n\n\n  var setStatesRandom =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(inputData) {\n      var newData, newDisplayItems, i, item;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return inputData;\n\n            case 2:\n              newData = _context2.sent;\n              newDisplayItems = [];\n\n              if (newData.length < 3 && newData.length !== 0) {\n                newDisplayItems = newData;\n              } else if (newData.length > 3) {\n                newDisplayItems = randomPicks(newData);\n\n                for (i = 0; i < newDisplayItems.length; i++) {\n                  item = newData.indexOf(newDisplayItems[i]);\n\n                  if (item > -1) {\n                    newData.splice(item, 1);\n                  }\n\n                  ;\n                }\n              }\n\n              setBusinesses(newData);\n              setDisplayItems(newDisplayItems);\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function setStatesRandom(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var removeItem = function removeItem(passedIndex) {\n    // update display items by deleting clicked item\n    var newDisplayItems = displayItems.filter(function (el, index) {\n      return passedIndex !== index;\n    }); // copy state\n\n    var newState = businesses;\n    var newItem; // if random mode is selected\n\n    if (randomSorting) {\n      // select random item from new state and save it to new item\n      newItem = newState[getIndeces(newState)[0]]; // update new state, filtering out the new item\n\n      newState = newState.filter(function (el) {\n        return newItem.name !== el.name;\n      });\n    } else {\n      // save value of removed item from array with shift\n      newItem = newState.shift();\n    }\n\n    if (newItem !== undefined) {\n      newDisplayItems.push(newItem);\n    }\n\n    setBusinesses(newState);\n    setDisplayItems(newDisplayItems);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: function onClick() {\n      return console.log(businesses);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, \"GET BUSINESSES STATE\"), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return console.log(displayItems);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"GET DISPLAY ITEMS STATE\"), displayItems.length !== 0 ? React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, displayItems.map(function (el, index) {\n    return React.createElement(\"li\", {\n      key: index,\n      onClick: function onClick() {\n        return removeItem(index);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, el.name);\n  })) : // add fetching data message in the begginning\n  // if display items are gone, display button to take user to main page to try again\n  React.createElement(\"button\", {\n    onClick: function onClick() {\n      return toggleUi('landing');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Try again!\"));\n};\n\nexport default resultList;","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/ResultList.js"],"names":["React","useState","useEffect","resultList","data","randomSorting","isCustom","toggleUi","businesses","setBusinesses","name","displayItems","setDisplayItems","setStatesCustom","setStatesRandom","getIndeces","indeces","length","push","number","Math","floor","random","includes","randomPicks","array","results","map","el","inputData","newData","newDisplayItems","i","item","indexOf","splice","removeItem","passedIndex","filter","index","newState","newItem","shift","undefined","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// FIRST GET INPUT DATA 3 DISPLAY ITEMS AND EVERYTHING ELSE AS DATA\n  // IF IS RANDOM MODE GET 3 \n\n// NO TERM && cualquier criterio menos random\n// RETURN LOS PRIMEROS 3 DE ARRAY DE RESPUESTA\n\n// NO TERM && random\n// RETURN RANDOM 3 ITEMS\n\n// 1 TERM && cualquier criterio menos random\n// RETURN LOS PRIMERO 3 DE ARRAY DE RESPUESTA\n\n// 1 TERM && random\n// RETURN RANDOM 3 ITEMS\n\n// 2 TERM && cualquier criterio menos random\n// RETURN EL PRIMERO DE 1 Y LOS PRIMEROS 2 DE OTRO (cual tiene 1 y cual 2 luego se define)\n\n// 2 TERM && random\n// RETURN RANDOM 1 DE 1 Y 2 RANDOM DE OTRO\n\n// 3 TERM && cualquier criterio menos random\n// RETURN el primero de cada term\n\n// 3 TERM && random \n// RETURN y \n\n\n\nconst resultList = ({ data, randomSorting, isCustom, toggleUi }) => {\n  const [businesses, setBusinesses] = useState([]);\n  const [displayItems, setDisplayItems] = useState([{ name: 'Waiting for items' }]);\n\n  useEffect(() => {\n\n    if (isCustom) {\n      setStatesCustom(data);\n    } else {\n      setStatesRandom(data);\n    }\n\n  }, [data, setBusinesses]);\n\n\n  \n\n  // returns 3 random indeces depending on input array length\n  const getIndeces = (businesses) => {\n    let indeces = [];\n    if (businesses.length <= 3) {\n      indeces.push(0, 2);\n    } else if (businesses.length !== 0) {\n      while (indeces.length < 3) {\n        let number = Math.floor(Math.random() * Math.floor(businesses.length));\n        if (!indeces.includes(number)) {\n          indeces.push(number);\n        }\n      };\n    }\n    return indeces;\n  }\n\n  // returns 3 random array items using get indeces function\n  const randomPicks = (array) => {\n    let results = getIndeces(array).map(el => {\n      return array[el];\n    })\n    return results;\n  }\n\n\n  // IF IS IN CUSTOM MODE\n  const setStatesCustom = async (inputData) => {\n    if (inputData.length > 3) {\n      await setStatesRandom(inputData);\n    }\n  }\n  \n\n  // IF IS RANDOM MODE\n  const setStatesRandom = async (inputData) => {\n    let newData = await inputData;\n    let newDisplayItems = [];\n\n\n    if (newData.length < 3 && newData.length !== 0) {\n      newDisplayItems = newData;\n    } else if (newData.length > 3) {\n      newDisplayItems = randomPicks(newData);\n\n      for (let i=0; i<newDisplayItems.length; i++) {\n        let item = newData.indexOf(newDisplayItems[i]);\n        if (item > -1) { newData.splice(item, 1) };\n      }\n    }\n\n    setBusinesses(newData);\n    setDisplayItems(newDisplayItems);\n  }\n\n\n\n\n\n\n\n  const removeItem = (passedIndex) => {\n    // update display items by deleting clicked item\n    let newDisplayItems = displayItems.filter((el, index) => passedIndex !== index);\n    // copy state\n    let newState = businesses;\n    let newItem;\n\n\n    // if random mode is selected\n    if (randomSorting) {\n      // select random item from new state and save it to new item\n      newItem = newState[getIndeces(newState)[0]];\n      // update new state, filtering out the new item\n      newState = newState.filter(el => newItem.name !== el.name);\n    } else {\n      // save value of removed item from array with shift\n      newItem = newState.shift();\n    }\n\n    if (newItem !== undefined) {\n      newDisplayItems.push(newItem);\n    }\n    \n    setBusinesses(newState);\n    setDisplayItems(newDisplayItems);\n  }\n\n\n\n  return (\n    <div>\n      <button onClick={() => console.log(businesses)}>GET BUSINESSES STATE</button>\n      <button onClick={() => console.log(displayItems)}>GET DISPLAY ITEMS STATE</button>\n\n      { displayItems.length !== 0 ?\n        <ul>\n          { \n            displayItems.map((el, index) => {\n              return <li key={index} onClick={() => removeItem(index)}>{el.name}</li>\n            })\n          }\n        </ul>\n        :\n        // add fetching data message in the begginning\n        // if display items are gone, display button to take user to main page to try again\n        <button onClick={() => toggleUi('landing')}>Try again!</button>\n      }\n    </div>\n  );\n};\n\nexport default resultList;"]},"metadata":{},"sourceType":"module"}