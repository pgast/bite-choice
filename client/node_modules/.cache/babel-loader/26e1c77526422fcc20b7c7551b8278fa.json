{"ast":null,"code":"import { normalizeValues } from './utils';\nvar thicknessPad = {\n  xlarge: 'large',\n  large: 'medium',\n  medium: 'small',\n  small: 'xsmall',\n  xsmall: 'xxsmall'\n};\nexport var round = function round(value, decimals) {\n  return Number(Math.round(value + \"e\" + decimals) + \"e-\" + decimals);\n};\n\nvar alignMax = function alignMax(value, interval) {\n  if (value > 0) return value - value % interval + interval;\n  if (value < 0) return value + value % interval;\n  return value;\n};\n\nvar alignMin = function alignMin(value, interval) {\n  if (value > 0) return value - value % interval;\n  if (value < 0) return value - value % interval - interval;\n  return value;\n};\n\nexport var calcBounds = function calcBounds(values, options) {\n  if (options === void 0) {\n    options = {};\n  } // coarseness influences the rounding of the bounds, the smaller the\n  // number, the more the bounds will be rounded. e.g. 111 -> 110 -> 100\n  // Normalize to an array. Backwards compatible has no coarseness for x-axis\n\n\n  var coarseness = Array.isArray(options.coarseness) && options.coarseness || options.coarseness && [undefined, options.coarseness] || [undefined, 5]; // the number of steps is one less than the number of labels\n\n  var steps = options.steps || [1, 1];\n  var calcValues = normalizeValues(values || []); // min and max values\n\n  var minX;\n  var maxX;\n  var minY;\n  var maxY;\n\n  if (calcValues.length) {\n    // Calculate the max and min values.\n    calcValues.filter(function (value) {\n      return value !== undefined;\n    }).forEach(function (value) {\n      var x = value.value[0];\n\n      if (x !== undefined) {\n        minX = minX === undefined ? x : Math.min(minX, x);\n        maxX = maxX === undefined ? x : Math.max(maxX, x);\n      }\n\n      var y = value.value[1];\n\n      if (y !== undefined) {\n        minY = minY === undefined ? y : Math.min(minY, y);\n        maxY = maxY === undefined ? y : Math.max(maxY, y);\n      } // handle ranges of values\n\n\n      var y2 = value.value[2];\n\n      if (y2 !== undefined) {\n        minY = Math.min(minY, y2);\n        maxY = Math.max(maxY, y2);\n      }\n    }); // when max === min, offset them so we can show something\n\n    if (maxX === minX) {\n      if (maxX > 0) minX = maxX - 1;else maxX = minX + 1;\n    }\n\n    if (maxY === minY) {\n      if (maxY > 0) minY = maxY - 1;else maxY = minY + 1;\n    } // Calculate some reasonable bounds based on the max and min values.\n    // This is so values like 87342.12 don't end up being displayed as the\n    // graph axis labels.\n\n\n    var cX = coarseness[0],\n        cY = coarseness[1];\n\n    if (cX) {\n      var deltaX = maxX - minX;\n      var intervalX = Number.parseFloat((deltaX / cX).toPrecision(1));\n      minX = alignMin(minX, intervalX);\n      maxX = alignMax(maxX, intervalX);\n    }\n\n    if (cY) {\n      var deltaY = maxY - minY;\n      var intervalY = Number.parseFloat((deltaY / cY).toPrecision(1));\n      minY = alignMin(minY, intervalY);\n      maxY = alignMax(maxY, intervalY);\n    }\n\n    if (minY < 0 && maxY > 0 && Math.abs(minY) !== Math.abs(maxY)) {\n      // Adjust min and max when crossing 0 to ensure 0 will be shown on\n      // the Y axis based on the number of steps.\n      // const ratio = Math.abs(max) / Math.abs(min);\n      var stepInterval = (maxY - minY) / steps[1];\n      var minSteps = minY / stepInterval;\n      var maxSteps = maxY / stepInterval;\n\n      if (Math.abs(minSteps) < Math.abs(maxSteps)) {\n        stepInterval = maxY / Math.floor(maxSteps);\n        maxY = stepInterval * Math.floor(maxSteps);\n        minY = stepInterval * Math.floor(minSteps);\n      } else {\n        stepInterval = Math.abs(minY / Math.ceil(minSteps));\n        minY = stepInterval * Math.ceil(minSteps);\n        maxY = stepInterval * Math.ceil(maxSteps);\n      }\n    }\n  }\n\n  var bounds;\n  if (calcValues.length) bounds = [[minX, maxX], [minY, maxY]];else bounds = [[], []];\n  return bounds;\n};\nexport var calcs = function calcs(values, options) {\n  if (values === void 0) {\n    values = [];\n  }\n\n  if (options === void 0) {\n    options = {};\n  } // the number of steps is one less than the number of labels\n\n\n  var steps = options.steps || [1, 1];\n  var bounds = options.bounds || calcBounds(values, options);\n  if (options.min !== undefined) bounds[1][0] = options.min;\n  if (options.max !== undefined) bounds[1][1] = options.max;\n  var dimensions = [round(bounds[0][1] - bounds[0][0], 2), round(bounds[1][1] - bounds[1][0], 2)]; // Calculate x and y axis values across the specfied number of steps.\n\n  var yAxis = [];\n  var y = bounds[1][1]; // To deal with javascript math limitations, round the step with 4 decimal\n  // places and then push the values with 2 decimal places\n\n  var yStepInterval = round(dimensions[1] / steps[1], 4);\n\n  while (round(y, 2) >= bounds[1][0]) {\n    yAxis.push(round(y, 2));\n    y -= yStepInterval;\n  }\n\n  var xAxis = [];\n  var x = bounds[0][0];\n  var xStepInterval = round(dimensions[0] / steps[0], 4);\n\n  while (round(x, 2) <= bounds[0][1]) {\n    xAxis.push(round(x, 2));\n    x += xStepInterval;\n  }\n\n  var _options = options,\n      thickness = _options.thickness;\n\n  if (!thickness) {\n    // Set bar thickness based on number of values being rendered.\n    // Someday, it would be better to include the actual rendered size.\n    // These values were emirically determined, trying to balance visibility\n    // and overlap across resolutions.\n    if (values.length < 5) {\n      thickness = 'xlarge';\n    } else if (values.length < 11) {\n      thickness = 'large';\n    } else if (values.length < 21) {\n      thickness = 'medium';\n    } else if (values.length < 61) {\n      thickness = 'small';\n    } else if (values.length < 121) {\n      thickness = 'xsmall';\n    } else {\n      thickness = 'hair';\n    }\n  }\n\n  var pad = thicknessPad[thickness];\n  return {\n    axis: [xAxis, yAxis],\n    bounds: bounds,\n    dimensions: dimensions,\n    pad: pad,\n    thickness: thickness\n  };\n};","map":null,"metadata":{},"sourceType":"module"}