{"ast":null,"code":"import _classCallCheck from \"/Users/Pablo/Documents/React/bitechoice/v7/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/Pablo/Documents/React/bitechoice/v7/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/Pablo/Documents/React/bitechoice/v7/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/Pablo/Documents/React/bitechoice/v7/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/Pablo/Documents/React/bitechoice/v7/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v7/client/src/App.js\";\nimport React, { Component } from 'react';\nimport { Grommet, Box } from 'grommet';\nimport Request from 'request';\nimport MainView from './components/MainView';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fetchSuccess: '',\n      location: ''\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"geoFindMe\",\n    value: function geoFindMe() {\n      function success(position) {\n        var lat = position.coords.latitude;\n        var lon = position.coords.longitude;\n        return {\n          lat: lat,\n          lon: lon\n        };\n      }\n\n      function error() {\n        return \"error\";\n      }\n\n      if (!navigator.geolocation) {\n        error();\n      } else {\n        navigator.geolocation.getCurrentPosition(success, error);\n      }\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      Request.get({\n        \"url\": \"http://ip-api.com/json/\"\n      }, function (error, response, body) {\n        if (error || JSON.parse(body).status === \"fail\") {\n          _this2.setState({\n            fetchSuccess: false\n          });\n\n          return console.dir(error);\n        } else {\n          var location = JSON.parse(body).city;\n\n          _this2.setState({\n            location: location,\n            fetchSuccess: true\n          });\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Grommet, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(Box, {\n        width: \"100vw\",\n        height: \"100vh\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, React.createElement(MainView, {\n        fetchSuccess: this.state.fetchSuccess,\n        location: this.state.location,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v7/client/src/App.js"],"names":["React","Component","Grommet","Box","Request","MainView","App","state","fetchSuccess","location","success","position","lat","coords","latitude","lon","longitude","error","navigator","geolocation","getCurrentPosition","get","response","body","JSON","parse","status","setState","console","dir","city"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,EAAkBC,GAAlB,QAA6B,SAA7B;AACA,OAAOC,OAAP,MAAoB,SAApB;AAEA,OAAOC,QAAP,MAAqB,uBAArB;;IAEMC,G;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,YAAY,EAAE,EADR;AAENC,MAAAA,QAAQ,EAAE;AAFJ,K;;;;;;gCAKK;AACX,eAASC,OAAT,CAAiBC,QAAjB,EAA2B;AACzB,YAAMC,GAAG,GAAGD,QAAQ,CAACE,MAAT,CAAgBC,QAA5B;AACA,YAAMC,GAAG,GAAGJ,QAAQ,CAACE,MAAT,CAAgBG,SAA5B;AACA,eAAO;AAAEJ,UAAAA,GAAG,EAAHA,GAAF;AAAOG,UAAAA,GAAG,EAAHA;AAAP,SAAP;AACD;;AAED,eAASE,KAAT,GAAiB;AACf,eAAO,OAAP;AACD;;AAED,UAAI,CAACC,SAAS,CAACC,WAAf,EAA4B;AAC1BF,QAAAA,KAAK;AACN,OAFD,MAEO;AACLC,QAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCV,OAAzC,EAAkDO,KAAlD;AACD;AACF;;;yCAGoB;AAAA;;AACnBb,MAAAA,OAAO,CAACiB,GAAR,CAAY;AAAE,eAAO;AAAT,OAAZ,EAAkD,UAACJ,KAAD,EAAQK,QAAR,EAAkBC,IAAlB,EAA2B;AACzE,YAAIN,KAAK,IAAIO,IAAI,CAACC,KAAL,CAAWF,IAAX,EAAiBG,MAAjB,KAA4B,MAAzC,EAAiD;AAC/C,UAAA,MAAI,CAACC,QAAL,CAAc;AAAEnB,YAAAA,YAAY,EAAE;AAAhB,WAAd;;AACA,iBAAOoB,OAAO,CAACC,GAAR,CAAYZ,KAAZ,CAAP;AACD,SAHD,MAGO;AACL,cAAMR,QAAQ,GAAGe,IAAI,CAACC,KAAL,CAAWF,IAAX,EAAiBO,IAAlC;;AACA,UAAA,MAAI,CAACH,QAAL,CAAc;AACZlB,YAAAA,QAAQ,EAARA,QADY;AAEZD,YAAAA,YAAY,EAAE;AAFF,WAAd;AAID;AACJ,OAXD;AAYD;;;6BAEQ;AACP,aACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,GAAD;AAAK,QAAA,KAAK,EAAC,OAAX;AAAmB,QAAA,MAAM,EAAC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AACE,QAAA,YAAY,EAAE,KAAKD,KAAL,CAAWC,YAD3B;AAEE,QAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,QAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADF;AAUD;;;;EAnDeR,S;;AAqDlB,eAAeK,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Grommet, Box } from 'grommet';\nimport Request from 'request';\n\nimport MainView from './components/MainView';\n\nclass App extends Component {\n  state = {\n    fetchSuccess: '',\n    location: ''\n  }; \n\n  geoFindMe () {\n    function success(position) {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n      return { lat, lon };\n    }\n  \n    function error() {\n      return \"error\";\n    }\n  \n    if (!navigator.geolocation) {\n      error();\n    } else {\n      navigator.geolocation.getCurrentPosition(success, error);\n    }\n  }\n\n\n  componentWillMount() {\n    Request.get({ \"url\": \"http://ip-api.com/json/\" }, (error, response, body) => {\n        if (error || JSON.parse(body).status === \"fail\") {\n          this.setState({ fetchSuccess: false }); \n          return console.dir(error);    \n        } else {\n          const location = JSON.parse(body).city;\n          this.setState({ \n            location, \n            fetchSuccess: true,\n          });\n        }\n    });\n  };\n\n  render() {\n    return (\n      <Grommet>\n        <Box width=\"100vw\" height=\"100vh\">\n          <MainView \n            fetchSuccess={this.state.fetchSuccess}\n            location={this.state.location} \n          />\n        </Box>\n      </Grommet>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}