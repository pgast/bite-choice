{"ast":null,"code":"import _toConsumableArray from \"/Users/Pablo/Documents/React/bitechoice/v2/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/Pablo/Documents/React/bitechoice/v2/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Pablo/Documents/React/bitechoice/v2/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/Pablo/Documents/React/bitechoice/v2/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v2/client/src/components/ResultList.js\";\nimport React, { useState, useEffect } from 'react';\n\nvar resultList = function resultList(_ref) {\n  var data = _ref.data,\n      randomSorting = _ref.randomSorting,\n      isCustom = _ref.isCustom,\n      toggleUi = _ref.toggleUi,\n      customSearchTerms = _ref.customSearchTerms;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      businesses = _useState2[0],\n      setBusinesses = _useState2[1];\n\n  var _useState3 = useState([{\n    name: 'Waiting for items'\n  }]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      displayItems = _useState4[0],\n      setDisplayItems = _useState4[1];\n\n  useEffect(function () {\n    if (isCustom) {\n      setStatesCustom(data);\n    } else {\n      setStatesFromArray(data);\n    }\n  }, [data, setBusinesses]);\n\n  var getIndeces = function getIndeces(businesses) {\n    var indeces = [];\n\n    if (businesses.length <= 3) {\n      indeces.push(0, 2);\n    } else if (businesses.length !== 0) {\n      while (indeces.length < 3) {\n        var number = Math.floor(Math.random() * Math.floor(businesses.length));\n\n        if (!indeces.includes(number)) {\n          indeces.push(number);\n        }\n      }\n\n      ;\n    }\n\n    return indeces;\n  };\n\n  var randomPicks = function randomPicks(array) {\n    var results = getIndeces(array).map(function (el) {\n      return array[el];\n    });\n    return results;\n  }; // IF IS IN CUSTOM MODE = refactor\n\n\n  var setStatesCustom =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(inputData) {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return inputData;\n\n            case 2:\n              data = _context.sent;\n\n              if (customSearchTerms.searchTerms.length === 0) {\n                setStatesFromArray(data);\n              } else if (customSearchTerms.searchTerms.length === 1) {\n                setStatesFromArray(data[0]);\n              } else {\n                setStatesFromTerms(data);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function setStatesCustom(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var setStatesFromTerms =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(inputData) {\n      var newData, newDisplayItems, allResults, emptyArrays, j;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return inputData;\n\n            case 2:\n              newData = _context2.sent;\n              newDisplayItems = [];\n\n              if (!randomSorting) {\n                _context2.next = 10;\n                break;\n              }\n\n              allResults = [];\n              newData.forEach(function (item) {\n                allResults = [].concat(_toConsumableArray(allResults), _toConsumableArray(item));\n              });\n              setStatesFromArray(allResults);\n              _context2.next = 26;\n              break;\n\n            case 10:\n              if (!(newDisplayItems.length < 3)) {\n                _context2.next = 24;\n                break;\n              }\n\n              emptyArrays = newData.every(function (item) {\n                return item.length === 0;\n              });\n\n              if (!emptyArrays) {\n                _context2.next = 14;\n                break;\n              }\n\n              return _context2.abrupt(\"break\", 24);\n\n            case 14:\n              j = 0;\n\n            case 15:\n              if (!(j < newData.length)) {\n                _context2.next = 22;\n                break;\n              }\n\n              if (newData[j].length !== 0) {\n                newDisplayItems.push(newData[j].shift());\n              }\n\n              if (!(newDisplayItems.length === 3)) {\n                _context2.next = 19;\n                break;\n              }\n\n              return _context2.abrupt(\"break\", 22);\n\n            case 19:\n              j++;\n              _context2.next = 15;\n              break;\n\n            case 22:\n              _context2.next = 10;\n              break;\n\n            case 24:\n              setBusinesses(newData);\n              setDisplayItems(newDisplayItems);\n\n            case 26:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function setStatesFromTerms(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var setStatesFromArray =\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(inputData) {\n      var newData, newDisplayItems, i, item;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return inputData;\n\n            case 2:\n              newData = _context3.sent;\n              newDisplayItems = [];\n\n              if (newData.length < 3 && newData.length !== 0) {\n                newDisplayItems = newData;\n              } else if (newData.length > 3) {\n                if (randomSorting) {\n                  newDisplayItems = randomPicks(newData);\n                } else {\n                  newDisplayItems = [newData[0], newData[1], newData[2]];\n                }\n\n                for (i = 0; i < newDisplayItems.length; i++) {\n                  item = newData.indexOf(newDisplayItems[i]);\n\n                  if (item > -1) {\n                    newData.splice(item, 1);\n                  }\n\n                  ;\n                }\n              }\n\n              setBusinesses(newData);\n              setDisplayItems(newDisplayItems);\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function setStatesFromArray(_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var removeItem = function removeItem(passedIndex) {\n    // update display items by deleting clicked item\n    var newDisplayItems = displayItems.filter(function (el, index) {\n      return passedIndex !== index;\n    }); // copy state\n\n    var newState = businesses;\n    var newItem;\n\n    if (randomSorting) {\n      // select random item from new state and save it to new item\n      newItem = newState[getIndeces(newState)[0]]; // update new state, filtering out the new item\n\n      newState = newState.filter(function (el) {\n        return newItem.name !== el.name;\n      });\n    } else {\n      // IF MULTIPLE TERMS IS TRUE\n      if (customSearchTerms.searchTerms.length > 1) {\n        var newEntry = undefined; // while no se tenga una respuesta, seguir repitiendo el funcion\n\n        while (newEntry === undefined) {\n          var emptyArrays = newState.every(function (item) {\n            return item.length === 0;\n          });\n          if (emptyArrays) break; // sacar numero random para saber cual array de los terms usar\n\n          var pickedArray = Math.floor(Math.random() * Math.floor(newState.length));\n\n          if (newState[pickedArray].length !== 0) {\n            // newItem es igual a shift de ese array \n            newEntry = newState[pickedArray].shift();\n          }\n        }\n\n        newItem = newEntry;\n      } else {\n        newItem = newState.shift();\n      }\n    }\n\n    if (newItem !== undefined) {\n      newDisplayItems.push(newItem);\n    }\n\n    setBusinesses(newState);\n    setDisplayItems(newDisplayItems);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, displayItems.length !== 0 ? React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, displayItems.map(function (el, index) {\n    return React.createElement(\"li\", {\n      key: index,\n      onClick: function onClick() {\n        return removeItem(index);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, el.name);\n  })) : // add fetching data message in the begginning\n  // if display items are gone, display button to take user to main page to try again\n  React.createElement(\"button\", {\n    onClick: function onClick() {\n      return toggleUi('landing');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \"Try again!\"));\n};\n\nexport default resultList;","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v2/client/src/components/ResultList.js"],"names":["React","useState","useEffect","resultList","data","randomSorting","isCustom","toggleUi","customSearchTerms","businesses","setBusinesses","name","displayItems","setDisplayItems","setStatesCustom","setStatesFromArray","getIndeces","indeces","length","push","number","Math","floor","random","includes","randomPicks","array","results","map","el","inputData","searchTerms","setStatesFromTerms","newData","newDisplayItems","allResults","forEach","item","emptyArrays","every","j","shift","i","indexOf","splice","removeItem","passedIndex","filter","index","newState","newItem","newEntry","undefined","pickedArray"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst resultList = ({ data, randomSorting, isCustom, toggleUi, customSearchTerms }) => {\n  const [businesses, setBusinesses] = useState([]);\n  const [displayItems, setDisplayItems] = useState([{ name: 'Waiting for items' }]);\n\n  useEffect(() => {\n    if (isCustom) {\n      setStatesCustom(data);\n    } else {\n      setStatesFromArray(data);\n    }\n  }, [data, setBusinesses]);\n\n  \n\n  const getIndeces = (businesses) => {\n    let indeces = [];\n    if (businesses.length <= 3) {\n      indeces.push(0, 2);\n    } else if (businesses.length !== 0) {\n      while (indeces.length < 3) {\n        let number = Math.floor(Math.random() * Math.floor(businesses.length));\n        if (!indeces.includes(number)) {\n          indeces.push(number);\n        }\n      };\n    }\n    return indeces;\n  }\n\n  const randomPicks = (array) => {\n    let results = getIndeces(array).map(el => {\n      return array[el];\n    })\n    return results;\n  }\n\n\n  // IF IS IN CUSTOM MODE = refactor\n  const setStatesCustom = async (inputData) => {\n    let data = await inputData;\n\n    if (customSearchTerms.searchTerms.length === 0) {\n      setStatesFromArray(data);\n    } else if (customSearchTerms.searchTerms.length === 1) {\n      setStatesFromArray(data[0]);\n    } else {\n      setStatesFromTerms(data);\n    }\n  }\n\n  const setStatesFromTerms = async (inputData) => {\n    let newData = await inputData;\n    let newDisplayItems = [];\n\n    if (randomSorting) {\n      let allResults = [];   \n      newData.forEach(item => {\n        allResults = [...allResults, ...item];\n      });\n      setStatesFromArray(allResults);\n\n    } else {\n\n      while (newDisplayItems.length < 3) {\n        let emptyArrays = newData.every(item => item.length === 0);\n\n        if(emptyArrays) break;\n        \n        for (let j=0; j<newData.length; j++) {\n          if(newData[j].length !== 0) {\n            newDisplayItems.push(newData[j].shift());\n          }\n\n          if(newDisplayItems.length === 3) break;\n        }\n      }\n      setBusinesses(newData);\n      setDisplayItems(newDisplayItems);\n\n    }\n  }\n \n\n  const setStatesFromArray = async (inputData) => {\n    let newData = await inputData;\n    let newDisplayItems = [];\n\n    if (newData.length < 3 && newData.length !== 0) {\n      newDisplayItems = newData;\n    } else if (newData.length > 3) {\n      if (randomSorting) {\n        newDisplayItems = randomPicks(newData);\n      } else {\n        newDisplayItems = [newData[0], newData[1], newData[2]];\n      }\n\n      for (let i=0; i<newDisplayItems.length; i++) {\n        let item = newData.indexOf(newDisplayItems[i]);\n        if (item > -1) { newData.splice(item, 1) };\n      }\n    }\n\n    setBusinesses(newData);\n    setDisplayItems(newDisplayItems); \n  }\n\n  const removeItem = (passedIndex) => {\n    // update display items by deleting clicked item\n    let newDisplayItems = displayItems.filter((el, index) => passedIndex !== index);\n    // copy state\n    let newState = businesses;\n    let newItem;\n\n    if (randomSorting) {\n      // select random item from new state and save it to new item\n      newItem = newState[getIndeces(newState)[0]];\n      // update new state, filtering out the new item\n      newState = newState.filter(el => newItem.name !== el.name);\n    } else {\n\n      // IF MULTIPLE TERMS IS TRUE\n      if (customSearchTerms.searchTerms.length > 1) {\n        let newEntry = undefined;\n\n        // while no se tenga una respuesta, seguir repitiendo el funcion\n        while (newEntry === undefined) {\n          let emptyArrays = newState.every(item => item.length === 0);\n          if(emptyArrays) break;\n\n          // sacar numero random para saber cual array de los terms usar\n          let pickedArray = Math.floor(Math.random() * Math.floor(newState.length));\n\n          if (newState[pickedArray].length !== 0) {\n            // newItem es igual a shift de ese array \n            newEntry = newState[pickedArray].shift();\n          } \n        }\n        \n        newItem = newEntry;\n\n\n\n\n      } else {\n        newItem = newState.shift();\n      }\n\n    }\n\n    if (newItem !== undefined) {\n      newDisplayItems.push(newItem);\n    }\n    \n    setBusinesses(newState);\n    setDisplayItems(newDisplayItems);\n  }\n\n\n  return (\n    <div>\n      { displayItems.length !== 0 ?\n        <ul>\n          { \n            displayItems.map((el, index) => {\n              return <li key={index} onClick={() => removeItem(index)}>{el.name}</li>\n            })\n          }\n        </ul>\n        :\n        // add fetching data message in the begginning\n        // if display items are gone, display button to take user to main page to try again\n        <button onClick={() => toggleUi('landing')}>Try again!</button>\n      }\n    </div>\n  );\n};\n\nexport default resultList;"]},"metadata":{},"sourceType":"module"}