{"ast":null,"code":"import styled, { css, keyframes } from 'styled-components';\nimport { genericStyles } from '../../utils';\nimport { defaultProps } from '../../default-props';\n\nvar animateStyle = function animateStyle(_ref) {\n  var theme = _ref.theme,\n      typeProp = _ref.typeProp;\n  var animateBounds;\n  if (typeProp === 'line') // 200% allows the line to be squiggly\n    animateBounds = ['stroke-dashoffset: 200%;', 'stroke-dashoffset: 0%;'];else if (typeProp === 'point') animateBounds = ['opacity: 0;', 'opacity: 1;'];else animateBounds = ['transform: scaleY(0);', 'transform: scaleY(1);'];\n  return css([\"\", \" animation:\", \" \", \" forwards;\", \"\"], typeProp === 'line' && 'stroke-dasharray: 200%;', keyframes([\"from{\", \"}to{\", \"}\"], animateBounds[0], animateBounds[1]), theme.global.animation.duration, (typeProp === 'bar' || typeProp === 'area') && 'transform-origin: center bottom 0;');\n};\n\nvar StyledChart = styled.svg.withConfig({\n  displayName: \"StyledChart\",\n  componentId: \"sc-1nae0gf-0\"\n})([\"display:block;max-width:100%;overflow:visible;\", \" \", \" \", \";\"], genericStyles, function (props) {\n  return props.animate && animateStyle(props);\n}, function (props) {\n  return props.theme.chart && props.theme.chart.extend;\n});\nStyledChart.defaultProps = {};\nObject.setPrototypeOf(StyledChart.defaultProps, defaultProps);\nexport { StyledChart };","map":null,"metadata":{},"sourceType":"module"}