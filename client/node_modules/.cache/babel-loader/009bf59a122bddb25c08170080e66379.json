{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { forwardRef, useContext } from 'react';\nimport styled, { css, ThemeContext } from 'styled-components';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { CheckBox } from '../CheckBox';\nimport { TableCell } from '../TableCell';\nimport { Text } from '../Text';\nimport { Resizer } from './Resizer';\nimport { Searcher } from './Searcher';\nimport { ExpanderCell } from './ExpanderCell';\nimport { StyledDataTableCell, StyledDataTableHeader, StyledDataTableRow } from './StyledDataTable';\nimport { datumValue } from './buildState';\nimport { kindPartStyles } from '../../utils/styles';\nimport { normalizeColor } from '../../utils/colors'; // separate theme values into groupings depending on what\n// part of header cell they should style\n\nvar separateThemeProps = function separateThemeProps(theme) {\n  var _theme$dataTable$head = theme.dataTable.header,\n      background = _theme$dataTable$head.background,\n      border = _theme$dataTable$head.border,\n      color = _theme$dataTable$head.color,\n      font = _theme$dataTable$head.font,\n      gap = _theme$dataTable$head.gap,\n      units = _theme$dataTable$head.units,\n      rest = _objectWithoutPropertiesLoose(_theme$dataTable$head, [\"background\", \"border\", \"color\", \"font\", \"gap\", \"units\"]);\n\n  var cellProps = {\n    background: background,\n    border: border\n  };\n\n  var textProps = _extends({\n    color: color\n  }, font);\n\n  var iconProps = {\n    color: color\n  };\n\n  var layoutProps = _extends({}, rest);\n\n  return [cellProps, layoutProps, textProps, iconProps];\n}; // build up CSS from basic to specific based on the supplied sub-object paths.\n// adapted from StyledButtonKind to only include parts relevant for DataTable\n\n\nvar buttonStyle = function buttonStyle(_ref) {\n  var theme = _ref.theme;\n  var styles = [];\n\n  var _separateThemeProps = separateThemeProps(theme),\n      layoutProps = _separateThemeProps[1],\n      iconProps = _separateThemeProps[3];\n\n  if (layoutProps) {\n    styles.push(kindPartStyles(layoutProps, theme));\n  }\n\n  if (layoutProps.hover) {\n    // CSS for this sub-object in the theme\n    var partStyles = kindPartStyles(layoutProps.hover, theme);\n    if (partStyles.length > 0) styles.push(css([\"&:hover{\", \"}\"], partStyles));\n  }\n\n  if (iconProps.color) {\n    styles.push(css([\"svg{stroke:\", \";fill:\", \";}\"], normalizeColor(iconProps.color, theme), normalizeColor(iconProps.color, theme)));\n  }\n\n  return styles;\n};\n\nvar StyledHeaderCellButton = styled(Button).withConfig({\n  displayName: \"Header__StyledHeaderCellButton\",\n  componentId: \"sc-1baku5q-0\"\n})([\"\", \"\"], function (props) {\n  return buttonStyle(props);\n}); // allow extend to spread onto Box that surrounds column label\n\nvar StyledContentBox = styled(Box).withConfig({\n  displayName: \"Header__StyledContentBox\",\n  componentId: \"sc-1baku5q-1\"\n})([\"\", \"\"], function (props) {\n  return props.extend;\n});\nvar Header = /*#__PURE__*/forwardRef(function (_ref2, ref) {\n  var backgroundProp = _ref2.background,\n      border = _ref2.border,\n      columns = _ref2.columns,\n      data = _ref2.data,\n      fill = _ref2.fill,\n      filtering = _ref2.filtering,\n      filters = _ref2.filters,\n      groups = _ref2.groups,\n      groupState = _ref2.groupState,\n      onFilter = _ref2.onFilter,\n      onFiltering = _ref2.onFiltering,\n      onResize = _ref2.onResize,\n      onSelect = _ref2.onSelect,\n      onSort = _ref2.onSort,\n      onToggle = _ref2.onToggle,\n      pad = _ref2.pad,\n      tablePin = _ref2.pin,\n      primaryProperty = _ref2.primaryProperty,\n      selected = _ref2.selected,\n      sort = _ref2.sort,\n      widths = _ref2.widths,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"background\", \"border\", \"columns\", \"data\", \"fill\", \"filtering\", \"filters\", \"groups\", \"groupState\", \"onFilter\", \"onFiltering\", \"onResize\", \"onSelect\", \"onSort\", \"onToggle\", \"pad\", \"pin\", \"primaryProperty\", \"selected\", \"sort\", \"widths\"]);\n\n  var theme = useContext(ThemeContext) || defaultProps.theme;\n\n  var _separateThemeProps2 = separateThemeProps(theme),\n      cellProps = _separateThemeProps2[0],\n      layoutProps = _separateThemeProps2[1],\n      textProps = _separateThemeProps2[2];\n\n  var background;\n  if (backgroundProp) background = backgroundProp;else background = undefined;\n  return /*#__PURE__*/React.createElement(StyledDataTableHeader, _extends({\n    ref: ref,\n    fillProp: fill\n  }, rest), /*#__PURE__*/React.createElement(StyledDataTableRow, null, groups && /*#__PURE__*/React.createElement(ExpanderCell, {\n    context: \"header\",\n    expanded: Object.keys(groupState).filter(function (k) {\n      return !groupState[k].expanded;\n    }).length === 0,\n    onToggle: onToggle\n  }), (selected || onSelect) && /*#__PURE__*/React.createElement(TableCell, {\n    background: background || cellProps.background\n  }, onSelect && /*#__PURE__*/React.createElement(CheckBox, {\n    checked: selected.length === data.length,\n    indeterminate: selected.length > 0 && selected.length < data.length,\n    onChange: function onChange() {\n      // if any are selected, clear selection\n      if (selected.length === data.length) onSelect([]); // if none are selected, select all data\n      else onSelect(data.map(function (datum) {\n          return datumValue(datum, primaryProperty);\n        }));\n    }\n  })), columns.map(function (_ref3) {\n    var property = _ref3.property,\n        header = _ref3.header,\n        align = _ref3.align,\n        columnPin = _ref3.pin,\n        search = _ref3.search,\n        sortable = _ref3.sortable,\n        verticalAlign = _ref3.verticalAlign,\n        size = _ref3.size,\n        units = _ref3.units;\n    var content;\n    var unitsContent = units ? /*#__PURE__*/React.createElement(Text, _extends({}, textProps, theme.dataTable.header.units), units) : undefined;\n\n    if (typeof header === 'string') {\n      content = /*#__PURE__*/React.createElement(Text, textProps, header);\n\n      if (Object.keys(layoutProps).length && (sortable === false || !onSort)) {\n        // apply rest of layout styling if cell is not sortable,\n        // otherwise this styling will be applied by\n        // StyledHeaderCellButton\n        content = /*#__PURE__*/React.createElement(StyledContentBox, layoutProps, content);\n      }\n    } else content = header;\n\n    if (onSort && sortable !== false) {\n      var Icon;\n\n      if (onSort && sortable !== false) {\n        if (sort && sort.property === property) {\n          Icon = theme.dataTable.icons[sort.direction !== 'asc' ? 'ascending' : 'descending'];\n        } else if (theme.dataTable.icons.sortable) {\n          Icon = theme.dataTable.icons.sortable;\n        }\n      }\n\n      content = /*#__PURE__*/React.createElement(StyledHeaderCellButton, {\n        plain: true,\n        column: property,\n        fill: \"vertical\",\n        onClick: onSort(property),\n        sort: sort,\n        sortable: true\n      }, /*#__PURE__*/React.createElement(Box, {\n        direction: \"row\",\n        align: \"center\",\n        gap: \"xsmall\",\n        justify: align\n      }, content, Icon && /*#__PURE__*/React.createElement(Icon, null)));\n    }\n\n    if (unitsContent) {\n      content = /*#__PURE__*/React.createElement(Box, {\n        align: \"baseline\",\n        direction: \"row\"\n      }, content, unitsContent);\n    } // content should fill any available space in cell\n\n\n    content = /*#__PURE__*/React.createElement(Box, {\n      flex: \"grow\"\n    }, content);\n\n    if (search || onResize) {\n      var resizer = onResize ? /*#__PURE__*/React.createElement(Resizer, {\n        property: property,\n        onResize: onResize\n      }) : null;\n      var searcher = search && filters ? /*#__PURE__*/React.createElement(Searcher, {\n        filtering: filtering,\n        filters: filters,\n        property: property,\n        onFilter: onFilter,\n        onFiltering: onFiltering\n      }) : null;\n      content = /*#__PURE__*/React.createElement(Box, {\n        direction: \"row\",\n        align: \"center\",\n        justify: !align || align === 'start' ? 'between' : align,\n        gap: theme.dataTable.header.gap,\n        fill: \"vertical\",\n        style: onResize ? {\n          position: 'relative'\n        } : undefined\n      }, content, searcher && resizer ? /*#__PURE__*/React.createElement(Box, {\n        flex: \"shrink\",\n        direction: \"row\",\n        align: \"center\",\n        gap: theme.dataTable.header.gap\n      }, searcher, resizer) : searcher || resizer);\n    }\n\n    var pin = [];\n    if (tablePin) pin.push('top');\n    if (columnPin) pin.push('left');\n    if (backgroundProp) background = backgroundProp;else if (pin.length > 0 && theme.dataTable.pinned && theme.dataTable.pinned.header) {\n      background = theme.dataTable.pinned.header.background;\n    } else background = undefined;\n    return /*#__PURE__*/React.createElement(StyledDataTableCell, {\n      key: property,\n      align: align,\n      context: \"header\",\n      verticalAlign: verticalAlign,\n      background: background || cellProps.background,\n      border: border || cellProps.border,\n      pad: pad,\n      pin: pin,\n      plain: true,\n      scope: \"col\",\n      size: widths && widths[property] ? undefined : size,\n      style: widths && widths[property] ? {\n        width: widths[property]\n      } : undefined\n    }, content);\n  })));\n});\nHeader.displayName = 'Header';\nHeader.defaultProps = {};\nObject.setPrototypeOf(Header.defaultProps, defaultProps);\nexport { Header };","map":null,"metadata":{},"sourceType":"module"}