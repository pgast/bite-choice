{"ast":null,"code":"import _regeneratorRuntime from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/ResultList.js\";\n\nimport React, { useState, useEffect } from 'react'; // FIRST GET INPUT DATA 3 DISPLAY ITEMS AND EVERYTHING ELSE AS DATA\n// IF IS RANDOM MODE GET 3 \n// NO TERM && cualquier criterio menos random\n// RETURN LOS PRIMEROS 3 DE ARRAY DE RESPUESTA\n// NO TERM && random\n// RETURN RANDOM 3 ITEMS\n// 1 TERM && cualquier criterio menos random\n// RETURN LOS PRIMERO 3 DE ARRAY DE RESPUESTA\n// 1 TERM && random\n// RETURN RANDOM 3 ITEMS\n// 2 TERM && cualquier criterio menos random\n// RETURN EL PRIMERO DE 1 Y LOS PRIMEROS 2 DE OTRO (cual tiene 1 y cual 2 luego se define)\n// 2 TERM && random\n// RETURN RANDOM 1 DE 1 Y 2 RANDOM DE OTRO\n// 3 TERM && cualquier criterio menos random\n// RETURN el primero de cada term\n// 3 TERM && random \n// RETURN y \n\nvar resultList = function resultList(_ref) {\n  var data = _ref.data,\n      randomSorting = _ref.randomSorting,\n      isCustom = _ref.isCustom;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      businesses = _useState2[0],\n      setBusinesses = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      displayItems = _useState4[0],\n      setDisplayItems = _useState4[1];\n\n  useEffect(function () {\n    function fetchData() {\n      return _fetchData.apply(this, arguments);\n    }\n\n    function _fetchData() {\n      _fetchData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var newData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return data;\n\n              case 2:\n                newData = _context.sent;\n                //setInitialStates(newData);\n                console.log(newData);\n\n                if (isCustom) {\n                  setStatesCustom();\n                } else {\n                  setStatesRandom(newData);\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _fetchData.apply(this, arguments);\n    }\n\n    fetchData();\n  }, [data, setBusinesses]); // returns 3 random indeces depending on input array length\n\n  var getIndeces = function getIndeces(businesses) {\n    var indeces = [];\n\n    if (businesses.length < 3) {\n      indeces.push(0, 1);\n    } else {\n      while (indeces.length < 3) {\n        var number = Math.floor(Math.random() * Math.floor(businesses.length));\n\n        if (!indeces.includes(number)) {\n          indeces.push(number);\n        }\n      }\n\n      ;\n    }\n\n    return indeces;\n  }; // returns 3 random array items using get indeces function\n\n\n  var randomPicks = function randomPicks(array) {\n    var results = _this.getIndeces(array).map(function (el) {\n      return array[el];\n    });\n\n    return results;\n  }; // IF IS IN CUSTOM MODE\n\n\n  var setStatesCustom = function setStatesCustom(inputData) {\n    // 1 array only\n    console.log('set states custom');\n  }; // IF IS RANDOM MODE\n\n\n  var setStatesRandom = function setStatesRandom(inputData) {\n    var displayItems = [];\n    var data = [];\n\n    if (inputData.length < 3) {\n      displayItems = inputData;\n    } else {\n      if (randomSorting) {\n        displayItems = randomPicks(inputData);\n      } else {\n        for (var i = 0; i < 3; i++) {\n          displayItems.push(inputData[i]);\n        }\n      }\n\n      data = inputData.filter(function (el) {\n        return displayItems.includes(el) === false;\n      });\n    }\n\n    setBusinesses(data);\n    setDisplayItems(displayItems);\n  };\n\n  var setInitialStates = function setInitialStates(inputData) {\n    var displayItems = [];\n    var data = []; // loop through input data [ [1,2,3], [1,1,1], ['a','b','c'] ]\n\n    if (inputData.length < 3) {\n      displayItems = inputData;\n    } else {\n      if (randomSorting) {\n        displayItems = randomPicks(inputData);\n      } else {\n        for (var i = 0; i < 3; i++) {\n          displayItems.push(inputData[i]);\n        }\n      }\n\n      data = inputData.filter(function (el) {\n        return displayItems.includes(el) === false;\n      });\n    } //displayItems = inputData;\n\n\n    console.log('SETTING INITIAL STATES');\n    setBusinesses(data);\n    setDisplayItems(displayItems);\n  }; ///////// FUNCTION TO REMOVE ITEMS BY CLICKING EACH CARD AND UPDATE EACH STATE ///////////////////\n  // removeItem = (passedIndex) => {\n  //   // update display items by deleting clicked item\n  //   let newDisplayItems = this.state.displayItems.filter((el, index) => passedIndex !== index);\n  //   // copy state\n  //   let newState = [...this.state.data];\n  //   let newItem;\n  //   // if random mode is selected\n  //   if (this.props.randomSorting) {\n  //     // select random item from new state and save it to new item\n  //     newItem = newState[this.getIndeces(newState)[0]];\n  //     // update new state, filtering out the new item\n  //     newState = newState.filter(el => newItem.name !== el.name);\n  //   } else {\n  //     // save value of removed item from array with shift\n  //     newItem = newState.shift();\n  //   }\n  //   if (newItem !== undefined) {\n  //     newDisplayItems.push(newItem);\n  //   }\n  //   this.setState({ data: newState });\n  //   this.setState({ displayItems: newDisplayItems });\n  // }\n\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: function onClick() {\n      return console.log(businesses);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, \"GET BUSINESSES STATE\"), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return console.log(displayItems);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, \"GET DISPLAY ITEMS STATE\"), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }));\n};\n\nexport default resultList;","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/ResultList.js"],"names":["React","useState","useEffect","resultList","data","randomSorting","isCustom","businesses","setBusinesses","displayItems","setDisplayItems","fetchData","newData","console","log","setStatesCustom","setStatesRandom","getIndeces","indeces","length","push","number","Math","floor","random","includes","randomPicks","array","results","map","el","inputData","i","filter","setInitialStates"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\n// FIRST GET INPUT DATA 3 DISPLAY ITEMS AND EVERYTHING ELSE AS DATA\n  // IF IS RANDOM MODE GET 3 \n\n\n\n// NO TERM && cualquier criterio menos random\n// RETURN LOS PRIMEROS 3 DE ARRAY DE RESPUESTA\n\n// NO TERM && random\n// RETURN RANDOM 3 ITEMS\n\n// 1 TERM && cualquier criterio menos random\n// RETURN LOS PRIMERO 3 DE ARRAY DE RESPUESTA\n\n// 1 TERM && random\n// RETURN RANDOM 3 ITEMS\n\n// 2 TERM && cualquier criterio menos random\n// RETURN EL PRIMERO DE 1 Y LOS PRIMEROS 2 DE OTRO (cual tiene 1 y cual 2 luego se define)\n\n// 2 TERM && random\n// RETURN RANDOM 1 DE 1 Y 2 RANDOM DE OTRO\n\n// 3 TERM && cualquier criterio menos random\n// RETURN el primero de cada term\n\n// 3 TERM && random \n// RETURN y \n\nconst resultList = ({ data, randomSorting, isCustom }) => {\n  const [businesses, setBusinesses] = useState([]);\n  const [displayItems, setDisplayItems] = useState([]);\n\n\n  useEffect(() => {\n    async function fetchData() {\n      let newData = await data;\n      //setInitialStates(newData);\n      console.log(newData);\n      if (isCustom) {\n        setStatesCustom();\n      } else {\n        setStatesRandom(newData);\n      }\n\n    }\n    fetchData();\n  }, [data, setBusinesses]);\n\n\n\n\n\n\n\n\n  \n\n  // returns 3 random indeces depending on input array length\n  const getIndeces = (businesses) => {\n    let indeces = [];\n    if (businesses.length < 3) {\n      indeces.push(0, 1);\n    } else {\n      while (indeces.length < 3) {\n        let number = Math.floor(Math.random() * Math.floor(businesses.length));\n        if (!indeces.includes(number)) {\n          indeces.push(number);\n        }\n      };\n    }\n    return indeces;\n  }\n\n  // returns 3 random array items using get indeces function\n  const randomPicks = (array) => {\n    let results = this.getIndeces(array).map(el => {\n      return array[el];\n    })\n    return results;\n  }\n\n\n  // IF IS IN CUSTOM MODE\n  const setStatesCustom = (inputData) => {\n    // 1 array only\n    console.log('set states custom');\n  }\n  \n  // IF IS RANDOM MODE\n  const setStatesRandom = (inputData) => {\n    let displayItems = [];\n    let data = [];\n\n    if (inputData.length < 3) {\n      displayItems=inputData;\n    } else {\n      if(randomSorting) {\n        displayItems=randomPicks(inputData);\n      } else {\n        for (let i=0; i<3; i++) {\n          displayItems.push(inputData[i]);\n        }\n      }\n      data = inputData.filter(el => displayItems.includes(el) === false);\n    }\n\n    setBusinesses(data);\n    setDisplayItems(displayItems);\n  }\n\n\n\n  const setInitialStates = (inputData) => {\n    let displayItems = [];\n    let data = [];\n\n\n    // loop through input data [ [1,2,3], [1,1,1], ['a','b','c'] ]\n    if (inputData.length < 3) {\n      displayItems = inputData;\n\n    } else {\n\n      if(randomSorting) {\n        displayItems = randomPicks(inputData);\n\n      } else {\n        for (let i=0; i<3; i++) {\n          displayItems.push(inputData[i]);\n        }\n\n      }\n      data = inputData.filter(el => displayItems.includes(el) === false);\n\n    }\n\n    //displayItems = inputData;\n    console.log('SETTING INITIAL STATES')\n    setBusinesses(data);\n    setDisplayItems(displayItems);\n  }\n\n\n\n\n\n\n  ///////// FUNCTION TO REMOVE ITEMS BY CLICKING EACH CARD AND UPDATE EACH STATE ///////////////////\n  // removeItem = (passedIndex) => {\n  //   // update display items by deleting clicked item\n  //   let newDisplayItems = this.state.displayItems.filter((el, index) => passedIndex !== index);\n  //   // copy state\n  //   let newState = [...this.state.data];\n  //   let newItem;\n  //   // if random mode is selected\n  //   if (this.props.randomSorting) {\n  //     // select random item from new state and save it to new item\n  //     newItem = newState[this.getIndeces(newState)[0]];\n  //     // update new state, filtering out the new item\n  //     newState = newState.filter(el => newItem.name !== el.name);\n  //   } else {\n  //     // save value of removed item from array with shift\n  //     newItem = newState.shift();\n  //   }\n\n  //   if (newItem !== undefined) {\n  //     newDisplayItems.push(newItem);\n  //   }\n    \n  //   this.setState({ data: newState });\n  //   this.setState({ displayItems: newDisplayItems });\n  // }\n\n\n\n  return (\n    <div>\n      <button onClick={() => console.log(businesses)}>GET BUSINESSES STATE</button>\n      <button onClick={() => console.log(displayItems)}>GET DISPLAY ITEMS STATE</button>\n\n      \n        {/* {\n          businesses.length === 0 ?\n          // ADD NO BUSINESSES COMPONENT\n          <h1>There are no businesses</h1> :\n          // ELSE RETURN DISPLAY ITEMS\n          businesses.map((el, index) => {\n            // return <li key={index} onClick={() => this.removeItem(index)}>{el.name}</li>\n            return <li key={index}>{el.name}</li>\n          })\n        } */}\n\n        <ul>\n          {\n\n              // data[0].map((el, index) => {\n              //   return <li key={index}>{el.name}</li>\n              // })\n              \n          }\n        </ul>\n    </div>\n  );\n};\n\nexport default resultList;"]},"metadata":{},"sourceType":"module"}