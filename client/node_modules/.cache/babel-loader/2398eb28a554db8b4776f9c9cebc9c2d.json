{"ast":null,"code":"// Converting between Date and String types is handled via a \"schema\".\n// The schema is an array of strings, split into strings with identical\n// characters. So, 'mm/dd/yyyy' will be ['mm', '/', 'dd', '/', 'yyyyy'].\nexport var formatToSchema = function formatToSchema(format) {\n  if (!format) return undefined;\n  var result = [];\n  var i = 0;\n  var part;\n\n  while (i < format.length) {\n    if (!part || part[0] !== format[i]) {\n      if (part) result.push(part);\n      part = format[i];\n    } else {\n      part += format[i];\n    }\n\n    i += 1;\n  }\n\n  if (part) result.push(part);\n  return result;\n}; // convert value into text representation using the schema\n\nexport var valueToText = function valueToText(value, schema) {\n  if (!value) return '';\n  var text = '';\n  var dates = (Array.isArray(value) ? value : [value]).map(function (v) {\n    return new Date(v);\n  });\n  var dateIndex = 0;\n  var parts = {};\n  schema.forEach(function (part) {\n    var _char = part[0].toLowerCase(); // advance dateIndex if we already have this part\n\n\n    while (dateIndex < dates.length && (Number.isNaN(dates[dateIndex].date) || (_char === 'm' || _char === 'd' || _char === 'y') && parts[_char])) {\n      dateIndex += 1;\n      parts = {};\n    }\n\n    var date = dates[dateIndex];\n\n    if (date && _char === 'm') {\n      text += date.getMonth() + 1;\n      parts[_char] = true;\n    } else if (date && _char === 'd') {\n      text += date.getDate();\n      parts[_char] = true;\n    } else if (date && _char === 'y') {\n      text += date.getFullYear();\n      parts[_char] = true;\n    } else text += part;\n  });\n  return text;\n};\nvar charCodeZero = '0'.charCodeAt(0);\nvar charCodeNine = '9'.charCodeAt(0);\n\nvar pullDigits = function pullDigits(text, index) {\n  var end = index;\n\n  while (text.charCodeAt(end) >= charCodeZero && text.charCodeAt(end) <= charCodeNine) {\n    end += 1;\n  }\n\n  return text.slice(index, end);\n};\n\nexport var textToValue = function textToValue(text, schema) {\n  if (!text) return undefined;\n  var result;\n\n  var addDate = function addDate(parts) {\n    // do a little sanity checking on the values\n    if (!parts.m || !parts.d || !parts.y || parts.y.length < 4 || parts.m.length > 2 || parts.d.length > 2 || parts.m > 12 || parts.d > 31) return parts;\n    var date = new Date(parts.y, parts.m - 1, parts.d).toISOString();\n    if (!result) result = date; // single\n    else if (Array.isArray(result)) result.push(date); // second\n      else result = [result, date]; // third and beyond, unused?\n\n    return {};\n  };\n\n  var parts = {};\n  var index = 0;\n  schema.forEach(function (part) {\n    if (index < text.length) {\n      var _char2 = part[0].toLowerCase();\n\n      if (parts[_char2] !== undefined) parts = addDate(parts);\n\n      if (_char2 === 'm') {\n        parts.m = pullDigits(text, index);\n        index += parts.m.length;\n      } else if (_char2 === 'd') {\n        parts.d = pullDigits(text, index);\n        index += parts.d.length;\n      } else if (_char2 === 'y') {\n        parts.y = pullDigits(text, index);\n        index += parts.y.length;\n      } else if (text.slice(index, index + part.length) === part) {\n        index += part.length;\n      } else {\n        // syntax error\n        index = text.length;\n        result = undefined;\n      }\n    }\n  });\n  addDate(parts);\n  return result;\n};","map":null,"metadata":{},"sourceType":"module"}