{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useState } from 'react';\nimport { compose } from 'recompose';\nimport { withTheme } from 'styled-components';\nimport { normalizeColor } from '../../utils';\nimport { defaultProps } from '../../default-props';\nimport { Box } from '../Box';\nimport { Button } from '../Button';\nimport { Collapsible } from '../Collapsible';\nimport { Heading } from '../Heading';\nimport { withForwardRef } from '../hocs';\nimport { AccordionContext } from '../Accordion/AccordionContext';\n\nvar AccordionPanel = function AccordionPanel(_ref) {\n  var children = _ref.children,\n      header = _ref.header,\n      label = _ref.label,\n      theme = _ref.theme,\n      onMouseOut = _ref.onMouseOut,\n      onMouseOver = _ref.onMouseOver,\n      onFocus = _ref.onFocus,\n      onBlur = _ref.onBlur,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"children\", \"header\", \"label\", \"theme\", \"onMouseOut\", \"onMouseOver\", \"onFocus\", \"onBlur\"]);\n\n  var _useState = useState(undefined),\n      hover = _useState[0],\n      setHover = _useState[1];\n\n  var iconColor = normalizeColor(theme.accordion.icons.color || 'control', theme);\n\n  var onHandleMouseOver = function onHandleMouseOver() {\n    var dark = theme.dark;\n    setHover(dark ? 'light-4' : 'dark-3');\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (onMouseOver) onMouseOver(args);\n  };\n\n  var onHandleMouseOut = function onHandleMouseOut() {\n    setHover(undefined);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    if (onMouseOut) onMouseOut(args);\n  };\n\n  var onHandleFocus = function onHandleFocus() {\n    var dark = theme.dark;\n    setHover(dark ? 'light-4' : 'dark-3');\n\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    if (onFocus) onFocus(args);\n  };\n\n  var onHandleBlur = function onHandleBlur() {\n    setHover(undefined);\n\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    if (onBlur) onBlur(args);\n  };\n\n  return React.createElement(AccordionContext.Consumer, null, function (panelContext) {\n    var active = panelContext.active,\n        animate = panelContext.animate,\n        onPanelChange = panelContext.onPanelChange;\n    var AccordionIcon = active ? theme.accordion.icons.collapse : theme.accordion.icons.expand;\n    return React.createElement(Box, {\n      flex: false\n    }, React.createElement(Button, {\n      role: \"tab\",\n      \"aria-selected\": active,\n      \"aria-expanded\": active,\n      onClick: onPanelChange,\n      onMouseOver: onHandleMouseOver,\n      onMouseOut: onHandleMouseOut,\n      onFocus: onHandleFocus,\n      onBlur: onHandleBlur\n    }, header || React.createElement(Box, _extends({\n      align: \"center\",\n      direction: \"row\",\n      justify: \"between\"\n    }, rest), typeof label === 'string' ? React.createElement(Box, {\n      pad: {\n        horizontal: 'xsmall'\n      }\n    }, React.createElement(Heading, {\n      level: theme.accordion.heading && theme.accordion.heading.level || 4,\n      color: hover\n    }, label)) : label, AccordionIcon && React.createElement(Box, {\n      pad: {\n        horizontal: 'small'\n      }\n    }, React.createElement(AccordionIcon, {\n      color: iconColor\n    })))), React.createElement(Box, {\n      border: theme.accordion.border\n    }, animate ? React.createElement(Collapsible, {\n      open: active\n    }, children) : active && children));\n  });\n};\n\nAccordionPanel.defaultProps = {};\nObject.setPrototypeOf(AccordionPanel.defaultProps, defaultProps);\nvar AccordionPanelDoc;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line global-require\n  AccordionPanelDoc = require('./doc').doc(AccordionPanel);\n}\n\nvar AccordionPanelWrapper = compose(withTheme, withForwardRef)(AccordionPanelDoc || AccordionPanel);\nexport { AccordionPanelWrapper as AccordionPanel };","map":null,"metadata":{},"sourceType":"module"}