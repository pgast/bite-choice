{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.themeDoc = exports.doc = void 0;\n\nvar _reactDesc = require(\"react-desc\");\n\nvar _utils = require(\"../../utils\");\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar doc = function doc(Anchor) {\n  var DocumentedAnchor = (0, _reactDesc.describe)(Anchor).availableAt((0, _utils.getAvailableAtBadge)('Anchor')).description('A text link.').details(\"We have a separate component from the browser\\nbase so we can style it. You can either set the icon and/or label properties\\nor just use children.\").usage(\"import { Anchor } from 'grommet';\\n<Anchor href={location} label='Label' />\").intrinsicElement('a');\n  DocumentedAnchor.propTypes = _extends({}, _utils.genericProps, {\n    a11yTitle: _reactDesc.PropTypes.string.description('Custom title to be used by screen readers.'),\n    color: _utils.colorPropType.description('Label color and icon color, if not specified on the icon.'),\n    href: _reactDesc.PropTypes.string.description('Hyperlink reference to place in the anchor.'),\n    icon: _reactDesc.PropTypes.element.description('Icon element to place in the anchor.'),\n    label: _reactDesc.PropTypes.node.description('Label text to place in the anchor.'),\n    onClick: _reactDesc.PropTypes.func.description(\"Click handler. It can be used, for example,\\n        to add analytics and track who clicked in the anchor.\"),\n    reverse: _reactDesc.PropTypes.bool.description(\"Whether an icon and label should be reversed so that the\\n        icon is at the end of the anchor.\").defaultValue(false),\n    size: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.oneOf(['xsmall', 'small', 'medium', 'large', 'xlarge', 'xxlarge']), _reactDesc.PropTypes.string]).description(\"The font size is typically driven by the components containing\\nthis component. But, it can be adjusted directly via this size property, typically\\nwhen it is not contained in a 'Heading', 'Paragraph', or 'Text'.\"),\n    as: _reactDesc.PropTypes.oneOfType([_reactDesc.PropTypes.string, _reactDesc.PropTypes.func]).description(\"The DOM tag or react component to use for the element.\")\n  });\n  return DocumentedAnchor;\n};\n\nexports.doc = doc;\n\nvar themeDoc = _extends({\n  'anchor.color': {\n    description: 'The color of the label text and icon strokes.',\n    type: 'string | { dark: string, light: string }',\n    defaultValue: \"{ light: '#1D67E3', dark: '#6194EB' }\"\n  },\n  'anchor.fontWeight': {\n    description: 'The font weight of the label.',\n    type: 'number',\n    defaultValue: 600\n  },\n  'anchor.textDecoration': {\n    description: 'The text decoration of the label. Refer to [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration) for possible values.',\n    type: 'string',\n    defaultValue: 'none'\n  },\n  'anchor.hover.fontWeight': {\n    description: 'The font weight of the label when hovering.',\n    type: 'number',\n    defaultValue: undefined\n  },\n  'anchor.hover.textDecoration': {\n    description: 'The text decoration of the label when hovering. Refer to [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration) for possible values.',\n    type: 'string',\n    defaultValue: 'underline'\n  },\n  'anchor.hover.extend': {\n    description: 'Any additional style for the Anchor when hovering.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'anchor.extend': {\n    description: 'Any additional style for the Anchor.',\n    type: 'string | (props) => {}',\n    defaultValue: undefined\n  },\n  'text.medium.size': {\n    description: 'The font size of the text label.',\n    type: 'string',\n    defaultValue: '18px'\n  },\n  'text.medium.height': {\n    description: 'The line height of the text label.',\n    type: 'string',\n    defaultValue: '24px'\n  }\n}, _utils.themeDocUtils.focusStyle, _utils.themeDocUtils.edgeStyle('The possible sizes for margin.'));\n\nexports.themeDoc = themeDoc;","map":null,"metadata":{},"sourceType":"script"}