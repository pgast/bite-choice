{"ast":null,"code":"export var normalizeColor = function normalizeColor(color, theme, required) {\n  var colorSpec = theme.global.colors[color] || color; // If the color has a light or dark object, use that\n\n  var result = colorSpec;\n\n  if (colorSpec) {\n    if (theme.dark && colorSpec.dark) {\n      result = colorSpec.dark;\n    } else if (!theme.dark && colorSpec.light) {\n      result = colorSpec.light;\n    }\n  } // allow one level of indirection in color names\n\n\n  if (result && theme.global.colors[result]) {\n    result = normalizeColor(result, theme);\n  }\n\n  return required && result === color ? 'inherit' : result;\n};\n\nvar parseHexToRGB = function parseHexToRGB(color) {\n  return color.length === 4 ? color.match(/[A-Za-z0-9]{1}/g).map(function (v) {\n    return parseInt(v, 16);\n  }) : // https://stackoverflow.com/a/42429333\n  color.match(/[A-Za-z0-9]{2}/g).map(function (v) {\n    return parseInt(v, 16);\n  });\n}; // From: https://stackoverflow.com/a/9493060/8513067\n// Converts an HSL color value to RGB. Conversion formula\n// adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n// Assumes h, s, and l are contained in the set [0, 1] and\n// returns r, g, and b in the set [0, 255].\n\n\nvar hslToRGB = function hslToRGB(h, s, l) {\n  var r;\n  var g;\n  var b;\n\n  if (s === 0 || s === '0') {\n    // achromatic\n    r = l;\n    g = l;\n    b = l;\n  } else {\n    var hue2rgb = function hue2rgb(p, q, inT) {\n      var t = inT;\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 0.16666667) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 0.66666667) return p + (q - p) * (0.66666667 - t) * 6;\n      return p;\n    };\n\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 0.33333333);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 0.33333333);\n  }\n\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n};\n\nvar canExtractRGBArray = function canExtractRGBArray(color) {\n  return /^#/.test(color) || /^rgb/.test(color) || /^hsl/.test(color);\n};\n\nvar getRGBArray = function getRGBArray(color) {\n  if (/^#/.test(color)) {\n    return parseHexToRGB(color);\n  }\n\n  if (/^rgb/.test(color)) {\n    return color.match(/rgba?\\(\\s?([0-9]*)\\s?,\\s?([0-9]*)\\s?,\\s?([0-9]*)\\s?.*?\\)/).splice(1);\n  }\n\n  if (/^hsl/.test(color)) {\n    // e.g. hsl(240, 60%, 50%)\n    var _color$match$splice$m = color.match(/hsla?\\(\\s?([0-9]*)\\s?,\\s?([0-9]*)%?\\s?,\\s?([0-9]*)%?\\s?.*?\\)/).splice(1).map(function (v) {\n      return parseInt(v, 10);\n    }),\n        h = _color$match$splice$m[0],\n        s = _color$match$splice$m[1],\n        l = _color$match$splice$m[2];\n\n    return hslToRGB(h / 360.0, s / 100.0, l / 100.0);\n  }\n\n  return color;\n};\n\nexport var colorIsDark = function colorIsDark(color) {\n  var _getRGBArray = getRGBArray(color),\n      red = _getRGBArray[0],\n      green = _getRGBArray[1],\n      blue = _getRGBArray[2]; // http://www.had2know.com/technology/\n  //  color-contrast-calculator-web-design.html\n\n\n  var brightness = (299 * red + 587 * green + 114 * blue) / 1000;\n  return brightness < 125;\n};\nexport var getRGBA = function getRGBA(color, opacity) {\n  if (color && canExtractRGBArray(color)) {\n    var _getRGBArray2 = getRGBArray(color),\n        red = _getRGBArray2[0],\n        green = _getRGBArray2[1],\n        blue = _getRGBArray2[2];\n\n    return \"rgba(\" + red + \", \" + green + \", \" + blue + \", \" + (opacity || 1) + \")\";\n  }\n\n  return undefined;\n};","map":null,"metadata":{},"sourceType":"module"}