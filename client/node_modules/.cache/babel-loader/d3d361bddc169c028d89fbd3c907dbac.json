{"ast":null,"code":"import _toConsumableArray from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/ResultList.js\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Store } from '../Store'; // 2 TERM && cualquier criterio menos random\n// RETURN EL PRIMERO DE 1 Y LOS PRIMEROS 2 DE OTRO (cual tiene 1 y cual 2 luego se define)\n// businesses se convertira en esto [[pizza], [taco]];\n// displayItems se consigue looping through businesses array y quitando el primer item de cada array\n// while displayItems length is not 3 (what happens with 2 or 1 or 0)\n// loop through businesses y quitar primer item de cada array\n// si el array en un index se queda sin nada que hacer?\n// const pizzas = ['dominos', 'bananas', 'jessies', 'papa johns'];\n// const tacos = ['papa'];\n// const empty = [];\n// const businesses = [empty];\n// const displayBusinesses = [];\n// const setInitialStates = () => {\n//   // while display businesses length is not 3 run this code\n//   while (displayBusinesses.length < 3) {\n//     // boolean value that returns true if every business array is empty\n//     let emptyArrays = businesses.every(item => item.length === 0);\n//     // if every business array is empty, break the while loop\n//     if (emptyArrays) break;\n//     // if not, loop through businesses array\n//     for (let i=0; i<businesses.length; i++) {\n//       // if the current business array has no length of 0\n//       if(businesses[i].length !== 0) {\n//         // add first item to displaybusinesses and remove it from array\n//         displayBusinesses.push(businesses[i].shift());\n//       }\n//       // if display businesses has 3 items, break the while loop\n//       if (displayBusinesses.length === 3) break;\n//     }   \n//   }  \n// }\n// setInitialStates();\n\nvar resultList = function resultList(_ref) {\n  var data = _ref.data,\n      randomSorting = _ref.randomSorting,\n      isCustom = _ref.isCustom,\n      toggleUi = _ref.toggleUi,\n      customSearchTerms = _ref.customSearchTerms;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      businesses = _useState2[0],\n      setBusinesses = _useState2[1];\n\n  var _useState3 = useState([{\n    name: 'Waiting for items'\n  }]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      displayItems = _useState4[0],\n      setDisplayItems = _useState4[1];\n\n  var _useContext = useContext(Store),\n      state = _useContext.state;\n\n  useEffect(function () {\n    if (isCustom) {\n      setStatesCustom(data);\n    } else {\n      setStatesFromArray(data);\n    }\n  }, [data, setBusinesses]);\n\n  var getIndeces = function getIndeces(businesses) {\n    var indeces = [];\n\n    if (businesses.length <= 3) {\n      indeces.push(0, 2);\n    } else if (businesses.length !== 0) {\n      while (indeces.length < 3) {\n        var number = Math.floor(Math.random() * Math.floor(businesses.length));\n\n        if (!indeces.includes(number)) {\n          indeces.push(number);\n        }\n      }\n\n      ;\n    }\n\n    return indeces;\n  };\n\n  var randomPicks = function randomPicks(array) {\n    var results = getIndeces(array).map(function (el) {\n      return array[el];\n    });\n    return results;\n  }; // IF IS IN CUSTOM MODE = refactor\n\n\n  var setStatesCustom =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(inputData) {\n      var data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return inputData;\n\n            case 2:\n              data = _context.sent;\n\n              if (customSearchTerms.searchTerms.length === 0) {\n                console.log('[CUSTOM - NO TERMS]');\n                setStatesFromArray(data);\n              } else if (customSearchTerms.searchTerms.length === 1) {\n                setStatesFromArray(data[0]);\n              } else {\n                console.log('[CUSTOM - WITH TERMS]');\n                setBusinesses(data);\n                setStatesFromTerms(data);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function setStatesCustom(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var setStatesFromTerms =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(inputData) {\n      var newData, newDisplayItems, allResults, emptyArrays, j, newBusinesses;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return inputData;\n\n            case 2:\n              newData = _context2.sent;\n              newDisplayItems = [];\n\n              if (!randomSorting) {\n                _context2.next = 10;\n                break;\n              }\n\n              allResults = [];\n              newData.forEach(function (item) {\n                allResults = [].concat(_toConsumableArray(allResults), _toConsumableArray(item));\n              });\n              setStatesFromArray(allResults);\n              _context2.next = 25;\n              break;\n\n            case 10:\n              if (!(newDisplayItems.length < 3)) {\n                _context2.next = 24;\n                break;\n              }\n\n              emptyArrays = businesses.every(function (item) {\n                return item.length === 0;\n              });\n\n              if (!emptyArrays) {\n                _context2.next = 14;\n                break;\n              }\n\n              return _context2.abrupt(\"break\", 24);\n\n            case 14:\n              j = 0;\n\n            case 15:\n              if (!(j < businesses.length)) {\n                _context2.next = 22;\n                break;\n              }\n\n              if (businesses[j].length !== 0) {\n                newBusinesses = _toConsumableArray(businesses);\n                newDisplayItems.push(newBusinesses[j].shift());\n                setBusinesses(newBusinesses);\n              }\n\n              if (!(newDisplayItems.length === 3)) {\n                _context2.next = 19;\n                break;\n              }\n\n              return _context2.abrupt(\"break\", 22);\n\n            case 19:\n              j++;\n              _context2.next = 15;\n              break;\n\n            case 22:\n              _context2.next = 10;\n              break;\n\n            case 24:\n              setDisplayItems(newDisplayItems);\n\n            case 25:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function setStatesFromTerms(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var setStatesFromArray =\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(inputData) {\n      var newData, newDisplayItems, i, item;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return inputData;\n\n            case 2:\n              newData = _context3.sent;\n              newDisplayItems = [];\n\n              if (newData.length < 3 && newData.length !== 0) {\n                newDisplayItems = newData;\n              } else if (newData.length > 3) {\n                if (randomSorting) {\n                  console.log('[RANDOM SORTING]');\n                  newDisplayItems = randomPicks(newData);\n                } else {\n                  console.log('[NOT RANDOM SORTING]');\n                  newDisplayItems = [newData[0], newData[1], newData[2]];\n                }\n\n                for (i = 0; i < newDisplayItems.length; i++) {\n                  item = newData.indexOf(newDisplayItems[i]);\n\n                  if (item > -1) {\n                    newData.splice(item, 1);\n                  }\n\n                  ;\n                }\n              }\n\n              setBusinesses(newData);\n              setDisplayItems(newDisplayItems);\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function setStatesFromArray(_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var removeItem = function removeItem(passedIndex) {\n    // update display items by deleting clicked item\n    var newDisplayItems = displayItems.filter(function (el, index) {\n      return passedIndex !== index;\n    }); // copy state\n\n    var newState = businesses;\n    var newItem; // if random mode is selected\n\n    if (randomSorting) {\n      // select random item from new state and save it to new item\n      newItem = newState[getIndeces(newState)[0]]; // update new state, filtering out the new item\n\n      newState = newState.filter(function (el) {\n        return newItem.name !== el.name;\n      });\n    } else {\n      // save value of removed item from array with shift\n      newItem = newState.shift();\n    }\n\n    if (newItem !== undefined) {\n      newDisplayItems.push(newItem);\n    }\n\n    setBusinesses(newState);\n    setDisplayItems(newDisplayItems);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: function onClick() {\n      return console.log(businesses);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"GET BUSINESSES STATE\"), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return console.log(displayItems);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, \"GET DISPLAY ITEMS STATE\"), displayItems.length !== 0 ? React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, displayItems.map(function (el, index) {\n    return React.createElement(\"li\", {\n      key: index,\n      onClick: function onClick() {\n        return removeItem(index);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, el.name);\n  })) : // add fetching data message in the begginning\n  // if display items are gone, display button to take user to main page to try again\n  React.createElement(\"button\", {\n    onClick: function onClick() {\n      return toggleUi('landing');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, \"Try again!\"), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return console.log(state);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }, \"GET STATE\"));\n};\n\nexport default resultList;","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/ResultList.js"],"names":["React","useState","useEffect","useContext","Store","resultList","data","randomSorting","isCustom","toggleUi","customSearchTerms","businesses","setBusinesses","name","displayItems","setDisplayItems","state","setStatesCustom","setStatesFromArray","getIndeces","indeces","length","push","number","Math","floor","random","includes","randomPicks","array","results","map","el","inputData","searchTerms","console","log","setStatesFromTerms","newData","newDisplayItems","allResults","forEach","item","emptyArrays","every","j","newBusinesses","shift","i","indexOf","splice","removeItem","passedIndex","filter","index","newState","newItem","undefined"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { Store } from '../Store';\n\n\n// 2 TERM && cualquier criterio menos random\n// RETURN EL PRIMERO DE 1 Y LOS PRIMEROS 2 DE OTRO (cual tiene 1 y cual 2 luego se define)\n\n  // businesses se convertira en esto [[pizza], [taco]];\n  // displayItems se consigue looping through businesses array y quitando el primer item de cada array\n    // while displayItems length is not 3 (what happens with 2 or 1 or 0)\n    // loop through businesses y quitar primer item de cada array\n\n\n  // si el array en un index se queda sin nada que hacer?\n\n// const pizzas = ['dominos', 'bananas', 'jessies', 'papa johns'];\n// const tacos = ['papa'];\n// const empty = [];\n// const businesses = [empty];\n// const displayBusinesses = [];\n  \n// const setInitialStates = () => {\n//   // while display businesses length is not 3 run this code\n//   while (displayBusinesses.length < 3) {\n//     // boolean value that returns true if every business array is empty\n//     let emptyArrays = businesses.every(item => item.length === 0);\n//     // if every business array is empty, break the while loop\n//     if (emptyArrays) break;\n//     // if not, loop through businesses array\n//     for (let i=0; i<businesses.length; i++) {\n//       // if the current business array has no length of 0\n//       if(businesses[i].length !== 0) {\n//         // add first item to displaybusinesses and remove it from array\n//         displayBusinesses.push(businesses[i].shift());\n//       }\n//       // if display businesses has 3 items, break the while loop\n//       if (displayBusinesses.length === 3) break;\n//     }   \n//   }  \n// }\n  \n// setInitialStates();\n\n\nconst resultList = ({ data, randomSorting, isCustom, toggleUi, customSearchTerms }) => {\n  const [businesses, setBusinesses] = useState([]);\n  const [displayItems, setDisplayItems] = useState([{ name: 'Waiting for items' }]);\n  const { state } = useContext(Store);\n\n  useEffect(() => {\n    if (isCustom) {\n      setStatesCustom(data);\n    } else {\n      setStatesFromArray(data);\n    }\n  }, [data, setBusinesses]);\n\n  \n\n  const getIndeces = (businesses) => {\n    let indeces = [];\n    if (businesses.length <= 3) {\n      indeces.push(0, 2);\n    } else if (businesses.length !== 0) {\n      while (indeces.length < 3) {\n        let number = Math.floor(Math.random() * Math.floor(businesses.length));\n        if (!indeces.includes(number)) {\n          indeces.push(number);\n        }\n      };\n    }\n    return indeces;\n  }\n\n  const randomPicks = (array) => {\n    let results = getIndeces(array).map(el => {\n      return array[el];\n    })\n    return results;\n  }\n\n\n  // IF IS IN CUSTOM MODE = refactor\n  const setStatesCustom = async (inputData) => {\n    let data = await inputData;\n\n    if (customSearchTerms.searchTerms.length === 0) {\n      console.log('[CUSTOM - NO TERMS]')\n      setStatesFromArray(data);\n    } else if (customSearchTerms.searchTerms.length === 1) {\n      setStatesFromArray(data[0]);\n    } else {\n      console.log('[CUSTOM - WITH TERMS]')\n      setBusinesses(data);\n      setStatesFromTerms(data);\n    }\n  }\n\n  const setStatesFromTerms = async (inputData) => {\n    let newData = await inputData;\n    let newDisplayItems = [];\n\n    if (randomSorting) {\n      let allResults = [];   \n      newData.forEach(item => {\n        allResults = [...allResults, ...item];\n      });\n      setStatesFromArray(allResults);\n\n    } else {\n\n      while (newDisplayItems.length < 3) {\n        let emptyArrays = businesses.every(item => item.length === 0);\n\n        if(emptyArrays) break;\n\n        for (let j=0; j<businesses.length; j++) {\n          if(businesses[j].length !== 0) {\n\n            let newBusinesses = [...businesses];\n            newDisplayItems.push(newBusinesses[j].shift());\n            setBusinesses(newBusinesses);\n\n\n          }\n\n          if(newDisplayItems.length === 3) break;\n        }\n      }\n\n      setDisplayItems(newDisplayItems);\n\n    }\n  }\n \n\n  const setStatesFromArray = async (inputData) => {\n    let newData = await inputData;\n    let newDisplayItems = [];\n\n    if (newData.length < 3 && newData.length !== 0) {\n      newDisplayItems = newData;\n    } else if (newData.length > 3) {\n      if (randomSorting) {\n        console.log('[RANDOM SORTING]')\n        newDisplayItems = randomPicks(newData);\n      } else {\n        console.log('[NOT RANDOM SORTING]')\n        newDisplayItems = [newData[0], newData[1], newData[2]];\n      }\n\n      for (let i=0; i<newDisplayItems.length; i++) {\n        let item = newData.indexOf(newDisplayItems[i]);\n        if (item > -1) { newData.splice(item, 1) };\n      }\n    }\n\n    setBusinesses(newData);\n    setDisplayItems(newDisplayItems); \n  }\n\n  const removeItem = (passedIndex) => {\n    // update display items by deleting clicked item\n    let newDisplayItems = displayItems.filter((el, index) => passedIndex !== index);\n    // copy state\n    let newState = businesses;\n    let newItem;\n\n\n    // if random mode is selected\n    if (randomSorting) {\n      // select random item from new state and save it to new item\n      newItem = newState[getIndeces(newState)[0]];\n      // update new state, filtering out the new item\n      newState = newState.filter(el => newItem.name !== el.name);\n    } else {\n      // save value of removed item from array with shift\n      newItem = newState.shift();\n    }\n\n    if (newItem !== undefined) {\n      newDisplayItems.push(newItem);\n    }\n    \n    setBusinesses(newState);\n    setDisplayItems(newDisplayItems);\n  }\n\n\n  return (\n    <div>\n      <button onClick={() => console.log(businesses)}>GET BUSINESSES STATE</button>\n      <button onClick={() => console.log(displayItems)}>GET DISPLAY ITEMS STATE</button>\n\n      { displayItems.length !== 0 ?\n        <ul>\n          { \n            displayItems.map((el, index) => {\n              return <li key={index} onClick={() => removeItem(index)}>{el.name}</li>\n            })\n          }\n        </ul>\n        :\n        // add fetching data message in the begginning\n        // if display items are gone, display button to take user to main page to try again\n        <button onClick={() => toggleUi('landing')}>Try again!</button>\n      }\n      <button onClick={() => console.log(state)}>GET STATE</button>\n    </div>\n  );\n};\n\nexport default resultList;"]},"metadata":{},"sourceType":"module"}