{"ast":null,"code":"import _toConsumableArray from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/Pablo/Documents/React/bitechoice/v1/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/CustomForm.js\";\nimport React, { Fragment, useState, useContext } from 'react';\nimport { Store } from '../Store'; // updates state with pertaining custom search info\n// when user clicks submit, action is dispatched to fetch data from store\n// searchTerms, sort by info is updated into state\n// data is fetched\n\nvar customForm = function customForm() {\n  var _useContext = useContext(Store),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch; // data = from state\n\n\n  var _useState = useState(state.customView.searchTerms),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchTerms = _useState2[0],\n      setSearchTerms = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentTerm = _useState4[0],\n      setCurrentTerm = _useState4[1];\n\n  var _useState5 = useState(state.customView.sortBy),\n      _useState6 = _slicedToArray(_useState5, 2),\n      sortBy = _useState6[0],\n      setSortBy = _useState6[1];\n\n  var addTerm = function addTerm(e) {\n    e.preventDefault();\n\n    if (currentTerm !== '') {\n      if (searchTerms.length < 3) {\n        var newTerms = _toConsumableArray(searchTerms);\n\n        newTerms.push(currentTerm);\n        setSearchTerms(newTerms);\n        setCurrentTerm('');\n      }\n    }\n  };\n\n  var removeTerm = function removeTerm(inputIndex) {\n    var newSearchTerms = _toConsumableArray(searchTerms).filter(function (el, inx) {\n      return inx !== inputIndex;\n    });\n\n    setSearchTerms(newSearchTerms);\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Custom Form\"), React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Name:\", React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Type Search Term\",\n    value: currentTerm,\n    onChange: function onChange(e) {\n      return setCurrentTerm(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: function onClick(e) {\n      return addTerm(e);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Add term\")), searchTerms.map(function (el, index) {\n    return React.createElement(\"p\", {\n      key: index,\n      onClick: function onClick(index) {\n        return removeTerm(index);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, el);\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Sort by:\", React.createElement(\"select\", {\n    value: state.sortBy,\n    onChange: function onChange(e) {\n      return setSortBy(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"best_match\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Best Match\"), React.createElement(\"option\", {\n    value: \"rating\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Rating\"), React.createElement(\"option\", {\n    value: \"review_count\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Review Count\"), React.createElement(\"option\", {\n    value: \"distance\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"Distance\"), React.createElement(\"option\", {\n    value: \"random\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Random\"))), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })));\n};\n\nexport default customForm;","map":{"version":3,"sources":["/Users/Pablo/Documents/React/bitechoice/v1/client/src/components/CustomForm.js"],"names":["React","Fragment","useState","useContext","Store","customForm","state","dispatch","customView","searchTerms","setSearchTerms","currentTerm","setCurrentTerm","sortBy","setSortBy","addTerm","e","preventDefault","length","newTerms","push","removeTerm","inputIndex","newSearchTerms","filter","el","inx","target","value","map","index"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useContext } from 'react';\nimport { Store } from '../Store';\n\n// updates state with pertaining custom search info\n  // when user clicks submit, action is dispatched to fetch data from store\n  // searchTerms, sort by info is updated into state\n  // data is fetched\n\n\nconst customForm = () => {\n  const { state, dispatch } = useContext(Store);\n\n  // data = from state\n  const [searchTerms, setSearchTerms] = useState(state.customView.searchTerms);\n  const [currentTerm, setCurrentTerm] = useState(\"\");\n  const [sortBy, setSortBy] = useState(state.customView.sortBy);\n\n\n  const addTerm = (e) => {\n    e.preventDefault();\n    if (currentTerm !== '') {\n      if (searchTerms.length < 3) {\n        let newTerms = [...searchTerms];\n        newTerms.push(currentTerm);\n        setSearchTerms(newTerms);\n        setCurrentTerm('');\n      }\n    }\n  };\n\n  const removeTerm = (inputIndex) => {\n    let newSearchTerms = [...searchTerms].filter((el, inx) => inx !== inputIndex);\n    setSearchTerms(newSearchTerms);\n  };\n\n  return (\n    <Fragment>\n      <h1>Custom Form</h1>\n\n      {/* onSubmit fetch data */}\n      <form>\n          <label>\n            Name:\n            <input \n              type=\"text\" \n              placeholder=\"Type Search Term\"\n              value={currentTerm}\n              onChange={(e) => setCurrentTerm(e.target.value)} \n            />\n            <button onClick={(e) => addTerm(e)}>Add term</button>\n          </label>\n\n          {\n            searchTerms.map((el, index) => {\n              return <p key={index} onClick={(index) => removeTerm(index)}>{el}</p>\n            })\n          }\n\n          <label>\n            Sort by:\n            <select value={state.sortBy} onChange={(e) => setSortBy(e.target.value)} >\n              <option value=\"best_match\">Best Match</option>\n              <option value=\"rating\">Rating</option>\n              <option value=\"review_count\">Review Count</option>\n              <option value=\"distance\">Distance</option>\n              <option value=\"random\">Random</option>\n            </select>\n          </label>\n\n          <input type=\"submit\" value=\"Submit\" />\n\n\n          {/* <label>\n            Sort by:\n            <select name=\"sortBy\" value={this.state.sortBy} onChange={this.handleInputChange} >\n              <option value=\"best_match\">Best Match</option>\n              <option value=\"rating\">Rating</option>\n              <option value=\"review_count\">Review Count</option>\n              <option value=\"distance\">Distance</option>\n              <option value=\"random\">Random</option>\n            </select>\n          </label>\n\n          <input type=\"submit\" value=\"Submit\" /> */}\n        </form>\n    </Fragment>\n  );\n};\n\nexport default customForm;"]},"metadata":{},"sourceType":"module"}