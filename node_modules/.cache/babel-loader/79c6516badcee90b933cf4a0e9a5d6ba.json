{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"/Users/pablogl/Documents/Dev/bite-choice/node_modules/@babel/runtime/helpers/defineProperty.js\").default;\nvar _Object$setPrototypeO;\nvar finished = require('./end-of-stream');\nvar kLastResolve = Symbol('lastResolve');\nvar kLastReject = Symbol('lastReject');\nvar kError = Symbol('error');\nvar kEnded = Symbol('ended');\nvar kLastPromise = Symbol('lastPromise');\nvar kHandlePromise = Symbol('handlePromise');\nvar kStream = Symbol('stream');\nfunction createIterResult(value, done) {\n  return {\n    value: value,\n    done: done\n  };\n}\nfunction readAndResolve(iter) {\n  var resolve = iter[kLastResolve];\n  if (resolve !== null) {\n    var data = iter[kStream].read();\n    // we defer if data is null\n    // we can be expecting either 'end' or\n    // 'error'\n    if (data !== null) {\n      iter[kLastPromise] = null;\n      iter[kLastResolve] = null;\n      iter[kLastReject] = null;\n      resolve(createIterResult(data, false));\n    }\n  }\n}\nfunction onReadable(iter) {\n  // we wait for the next tick, because it might\n  // emit an error with process.nextTick\n  process.nextTick(readAndResolve, iter);\n}\nfunction wrapForNext(lastPromise, iter) {\n  return function (resolve, reject) {\n    lastPromise.then(function () {\n      if (iter[kEnded]) {\n        resolve(createIterResult(undefined, true));\n        return;\n      }\n      iter[kHandlePromise](resolve, reject);\n    }, reject);\n  };\n}\nvar AsyncIteratorPrototype = Object.getPrototypeOf(function () {});\nvar ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n  get stream() {\n    return this[kStream];\n  },\n  next: function next() {\n    var _this = this;\n    // if we have detected an error in the meanwhile\n    // reject straight away\n    var error = this[kError];\n    if (error !== null) {\n      return Promise.reject(error);\n    }\n    if (this[kEnded]) {\n      return Promise.resolve(createIterResult(undefined, true));\n    }\n    if (this[kStream].destroyed) {\n      // We need to defer via nextTick because if .destroy(err) is\n      // called, the error will be emitted via nextTick, and\n      // we cannot guarantee that there is no error lingering around\n      // waiting to be emitted.\n      return new Promise(function (resolve, reject) {\n        process.nextTick(function () {\n          if (_this[kError]) {\n            reject(_this[kError]);\n          } else {\n            resolve(createIterResult(undefined, true));\n          }\n        });\n      });\n    }\n\n    // if we have multiple next() calls\n    // we will wait for the previous Promise to finish\n    // this logic is optimized to support for await loops,\n    // where next() is only called once at a time\n    var lastPromise = this[kLastPromise];\n    var promise;\n    if (lastPromise) {\n      promise = new Promise(wrapForNext(lastPromise, this));\n    } else {\n      // fast path needed to support multiple this.push()\n      // without triggering the next() queue\n      var data = this[kStream].read();\n      if (data !== null) {\n        return Promise.resolve(createIterResult(data, false));\n      }\n      promise = new Promise(this[kHandlePromise]);\n    }\n    this[kLastPromise] = promise;\n    return promise;\n  }\n}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {\n  return this;\n}), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n  var _this2 = this;\n  // destroy(err, cb) is a private API\n  // we can guarantee we have that here, because we control the\n  // Readable class this is attached to\n  return new Promise(function (resolve, reject) {\n    _this2[kStream].destroy(null, function (err) {\n      if (err) {\n        reject(err);\n        return;\n      }\n      resolve(createIterResult(undefined, true));\n    });\n  });\n}), _Object$setPrototypeO), AsyncIteratorPrototype);\nvar createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {\n  var _Object$create;\n  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n    value: stream,\n    writable: true\n  }), _defineProperty(_Object$create, kLastResolve, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kLastReject, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kError, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kEnded, {\n    value: stream._readableState.endEmitted,\n    writable: true\n  }), _defineProperty(_Object$create, kHandlePromise, {\n    value: function value(resolve, reject) {\n      var data = iterator[kStream].read();\n      if (data) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        resolve(createIterResult(data, false));\n      } else {\n        iterator[kLastResolve] = resolve;\n        iterator[kLastReject] = reject;\n      }\n    },\n    writable: true\n  }), _Object$create));\n  iterator[kLastPromise] = null;\n  finished(stream, function (err) {\n    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n      var reject = iterator[kLastReject];\n      // reject if we are waiting for data in the Promise\n      // returned by next() and store the error\n      if (reject !== null) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        reject(err);\n      }\n      iterator[kError] = err;\n      return;\n    }\n    var resolve = iterator[kLastResolve];\n    if (resolve !== null) {\n      iterator[kLastPromise] = null;\n      iterator[kLastResolve] = null;\n      iterator[kLastReject] = null;\n      resolve(createIterResult(undefined, true));\n    }\n    iterator[kEnded] = true;\n  });\n  stream.on('readable', onReadable.bind(null, iterator));\n  return iterator;\n};\nmodule.exports = createReadableStreamAsyncIterator;","map":{"version":3,"names":["_defineProperty","require","default","_Object$setPrototypeO","finished","kLastResolve","Symbol","kLastReject","kError","kEnded","kLastPromise","kHandlePromise","kStream","createIterResult","value","done","readAndResolve","iter","resolve","data","read","onReadable","process","nextTick","wrapForNext","lastPromise","reject","then","undefined","AsyncIteratorPrototype","Object","getPrototypeOf","ReadableStreamAsyncIteratorPrototype","setPrototypeOf","stream","next","_this","error","Promise","destroyed","promise","asyncIterator","_return","_this2","destroy","err","createReadableStreamAsyncIterator","_Object$create","iterator","create","writable","_readableState","endEmitted","code","on","bind","module","exports"],"sources":["/Users/pablogl/Documents/Dev/bite-choice/node_modules/hash-base/node_modules/readable-stream/lib/internal/streams/async_iterator.js"],"sourcesContent":["'use strict';\n\nconst finished = require('./end-of-stream');\nconst kLastResolve = Symbol('lastResolve');\nconst kLastReject = Symbol('lastReject');\nconst kError = Symbol('error');\nconst kEnded = Symbol('ended');\nconst kLastPromise = Symbol('lastPromise');\nconst kHandlePromise = Symbol('handlePromise');\nconst kStream = Symbol('stream');\nfunction createIterResult(value, done) {\n  return {\n    value,\n    done\n  };\n}\nfunction readAndResolve(iter) {\n  const resolve = iter[kLastResolve];\n  if (resolve !== null) {\n    const data = iter[kStream].read();\n    // we defer if data is null\n    // we can be expecting either 'end' or\n    // 'error'\n    if (data !== null) {\n      iter[kLastPromise] = null;\n      iter[kLastResolve] = null;\n      iter[kLastReject] = null;\n      resolve(createIterResult(data, false));\n    }\n  }\n}\nfunction onReadable(iter) {\n  // we wait for the next tick, because it might\n  // emit an error with process.nextTick\n  process.nextTick(readAndResolve, iter);\n}\nfunction wrapForNext(lastPromise, iter) {\n  return (resolve, reject) => {\n    lastPromise.then(() => {\n      if (iter[kEnded]) {\n        resolve(createIterResult(undefined, true));\n        return;\n      }\n      iter[kHandlePromise](resolve, reject);\n    }, reject);\n  };\n}\nconst AsyncIteratorPrototype = Object.getPrototypeOf(function () {});\nconst ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf({\n  get stream() {\n    return this[kStream];\n  },\n  next() {\n    // if we have detected an error in the meanwhile\n    // reject straight away\n    const error = this[kError];\n    if (error !== null) {\n      return Promise.reject(error);\n    }\n    if (this[kEnded]) {\n      return Promise.resolve(createIterResult(undefined, true));\n    }\n    if (this[kStream].destroyed) {\n      // We need to defer via nextTick because if .destroy(err) is\n      // called, the error will be emitted via nextTick, and\n      // we cannot guarantee that there is no error lingering around\n      // waiting to be emitted.\n      return new Promise((resolve, reject) => {\n        process.nextTick(() => {\n          if (this[kError]) {\n            reject(this[kError]);\n          } else {\n            resolve(createIterResult(undefined, true));\n          }\n        });\n      });\n    }\n\n    // if we have multiple next() calls\n    // we will wait for the previous Promise to finish\n    // this logic is optimized to support for await loops,\n    // where next() is only called once at a time\n    const lastPromise = this[kLastPromise];\n    let promise;\n    if (lastPromise) {\n      promise = new Promise(wrapForNext(lastPromise, this));\n    } else {\n      // fast path needed to support multiple this.push()\n      // without triggering the next() queue\n      const data = this[kStream].read();\n      if (data !== null) {\n        return Promise.resolve(createIterResult(data, false));\n      }\n      promise = new Promise(this[kHandlePromise]);\n    }\n    this[kLastPromise] = promise;\n    return promise;\n  },\n  [Symbol.asyncIterator]() {\n    return this;\n  },\n  return() {\n    // destroy(err, cb) is a private API\n    // we can guarantee we have that here, because we control the\n    // Readable class this is attached to\n    return new Promise((resolve, reject) => {\n      this[kStream].destroy(null, err => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(createIterResult(undefined, true));\n      });\n    });\n  }\n}, AsyncIteratorPrototype);\nconst createReadableStreamAsyncIterator = stream => {\n  const iterator = Object.create(ReadableStreamAsyncIteratorPrototype, {\n    [kStream]: {\n      value: stream,\n      writable: true\n    },\n    [kLastResolve]: {\n      value: null,\n      writable: true\n    },\n    [kLastReject]: {\n      value: null,\n      writable: true\n    },\n    [kError]: {\n      value: null,\n      writable: true\n    },\n    [kEnded]: {\n      value: stream._readableState.endEmitted,\n      writable: true\n    },\n    // the function passed to new Promise\n    // is cached so we avoid allocating a new\n    // closure at every run\n    [kHandlePromise]: {\n      value: (resolve, reject) => {\n        const data = iterator[kStream].read();\n        if (data) {\n          iterator[kLastPromise] = null;\n          iterator[kLastResolve] = null;\n          iterator[kLastReject] = null;\n          resolve(createIterResult(data, false));\n        } else {\n          iterator[kLastResolve] = resolve;\n          iterator[kLastReject] = reject;\n        }\n      },\n      writable: true\n    }\n  });\n  iterator[kLastPromise] = null;\n  finished(stream, err => {\n    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n      const reject = iterator[kLastReject];\n      // reject if we are waiting for data in the Promise\n      // returned by next() and store the error\n      if (reject !== null) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        reject(err);\n      }\n      iterator[kError] = err;\n      return;\n    }\n    const resolve = iterator[kLastResolve];\n    if (resolve !== null) {\n      iterator[kLastPromise] = null;\n      iterator[kLastResolve] = null;\n      iterator[kLastReject] = null;\n      resolve(createIterResult(undefined, true));\n    }\n    iterator[kEnded] = true;\n  });\n  stream.on('readable', onReadable.bind(null, iterator));\n  return iterator;\n};\nmodule.exports = createReadableStreamAsyncIterator;"],"mappings":"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"},"metadata":{},"sourceType":"script"}